/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nvar _vue = __webpack_require__(1);\n\nvar _vue2 = _interopRequireDefault(_vue);\n\nvar _vueRouter = __webpack_require__(3);\n\nvar _vueRouter2 = _interopRequireDefault(_vueRouter);\n\nvar _img = __webpack_require__(4);\n\nvar _Search = __webpack_require__(5);\n\nvar _Search2 = _interopRequireDefault(_Search);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Img2.prototype.mode = PRELOAD_MODES.WHEN_VISIBLE;\n\n_vue2.default.config.ignoredElements = [\"img-2\"]; /**\r\n                                                   * Created by Leon Revill on 7/27/2017.\r\n                                                   * Blog: blog.revillweb.com\r\n                                                   * Twitter: @RevillWeb\r\n                                                   * GitHub: github.com/RevillWeb\r\n                                                   */\n\n\n_vue2.default.use(_vueRouter2.default);\n\nvar routes = [{ path: \"/search\", name: \"search-with\", component: _Search2.default }, { path: \"*\", redirect: \"/search\" }];\n\nvar router = new _vueRouter2.default({\n    mode: \"history\",\n    routes: routes,\n    scrollBehavior: function scrollBehavior() {\n        return { x: 0, y: 0 };\n    }\n});\n\nvar app = new _vue2.default({\n    router: router\n}).$mount(\"#app\");\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanM/OTU1MiJdLCJuYW1lcyI6WyJjb25maWciLCJpZ25vcmVkRWxlbWVudHMiLCJ1c2UiLCJyb3V0ZXMiLCJwYXRoIiwibmFtZSIsImNvbXBvbmVudCIsInJlZGlyZWN0Iiwicm91dGVyIiwibW9kZSIsInNjcm9sbEJlaGF2aW9yIiwieCIsInkiLCJhcHAiLCIkbW91bnQiXSwibWFwcGluZ3MiOiI7O0FBTUE7Ozs7QUFDQTs7OztBQUNBOztBQVVBOzs7Ozs7QUFSQTs7QUFFQSxjQUFJQSxNQUFKLENBQVdDLGVBQVgsR0FBNkIsQ0FDekIsT0FEeUIsQ0FBN0IsQyxDQVpBOzs7Ozs7OztBQWdCQSxjQUFJQyxHQUFKOztBQUlBLElBQU1DLFNBQVMsQ0FDWCxFQUFFQyxNQUFNLFNBQVIsRUFBbUJDLE1BQU0sYUFBekIsRUFBd0NDLDJCQUF4QyxFQURXLEVBRVgsRUFBRUYsTUFBTSxHQUFSLEVBQWFHLFVBQVUsU0FBdkIsRUFGVyxDQUFmOztBQUtBLElBQU1DLFNBQVMsd0JBQWM7QUFDekJDLFVBQU0sU0FEbUI7QUFFekJOLGtCQUZ5QjtBQUd6Qk8sa0JBSHlCLDRCQUdQO0FBQ2QsZUFBTyxFQUFFQyxHQUFHLENBQUwsRUFBUUMsR0FBRyxDQUFYLEVBQVA7QUFDSDtBQUx3QixDQUFkLENBQWY7O0FBUUEsSUFBTUMsTUFBTSxrQkFBUTtBQUNoQkw7QUFEZ0IsQ0FBUixFQUVUTSxNQUZTLENBRUYsTUFGRSxDQUFaIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ3JlYXRlZCBieSBMZW9uIFJldmlsbCBvbiA3LzI3LzIwMTcuXHJcbiAqIEJsb2c6IGJsb2cucmV2aWxsd2ViLmNvbVxyXG4gKiBUd2l0dGVyOiBAUmV2aWxsV2ViXHJcbiAqIEdpdEh1YjogZ2l0aHViLmNvbS9SZXZpbGxXZWJcclxuICovXHJcbmltcG9ydCBWdWUgZnJvbSBcInZ1ZVwiO1xyXG5pbXBvcnQgVnVlUm91dGVyIGZyb20gXCJ2dWUtcm91dGVyXCI7XHJcbmltcG9ydCB7IEltZzIsIFBSRUxPQURfTU9ERVMgfSBmcm9tIFwiLi93ZWItY29tcG9uZW50cy9pbWctMlwiO1xyXG5cclxuLy8gSW1nMi5wcm90b3R5cGUubW9kZSA9IFBSRUxPQURfTU9ERVMuV0hFTl9WSVNJQkxFO1xyXG5cclxuVnVlLmNvbmZpZy5pZ25vcmVkRWxlbWVudHMgPSBbXHJcbiAgICBcImltZy0yXCJcclxuXTtcclxuXHJcblZ1ZS51c2UoVnVlUm91dGVyKTtcclxuXHJcbmltcG9ydCBTZWFyY2ggZnJvbSBcIi4vcGFnZXMvU2VhcmNoLnZ1ZVwiO1xyXG5cclxuY29uc3Qgcm91dGVzID0gW1xyXG4gICAgeyBwYXRoOiBcIi9zZWFyY2hcIiwgbmFtZTogXCJzZWFyY2gtd2l0aFwiLCBjb21wb25lbnQ6IFNlYXJjaCB9LFxyXG4gICAgeyBwYXRoOiBcIipcIiwgcmVkaXJlY3Q6IFwiL3NlYXJjaFwiIH1cclxuXTtcclxuXHJcbmNvbnN0IHJvdXRlciA9IG5ldyBWdWVSb3V0ZXIoe1xyXG4gICAgbW9kZTogXCJoaXN0b3J5XCIsXHJcbiAgICByb3V0ZXMsXHJcbiAgICBzY3JvbGxCZWhhdmlvciAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHsgeDogMCwgeTogMCB9XHJcbiAgICB9XHJcbn0pO1xyXG5cclxuY29uc3QgYXBwID0gbmV3IFZ1ZSh7XHJcbiAgICByb3V0ZXJcclxufSkuJG1vdW50KFwiI2FwcFwiKTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2luZGV4LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	eval("/* WEBPACK VAR INJECTION */(function(process, global) {/*!\n * Vue.js v2.4.4\n * (c) 2014-2017 Evan You\n * Released under the MIT License.\n */\n'use strict';\n\n/*  */\n\n// these helpers produces better vm code in JS engines due to their\n// explicitness and function inlining\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n\n/**\n * Check if value is primitive\n */\nfunction isPrimitive (value) {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    typeof value === 'boolean'\n  )\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\nvar _toString = Object.prototype.toString;\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Check if val is a valid array index.\n */\nfunction isValidArrayIndex (val) {\n  var n = parseFloat(val);\n  return n >= 0 && Math.floor(n) === n && isFinite(val)\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : typeof val === 'object'\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert a input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Check if a attribute is a reserved attribute.\n */\nvar isReservedAttribute = makeMap('key,ref,slot,is');\n\n/**\n * Remove an item from an array\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether the object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, '-$1').toLowerCase()\n});\n\n/**\n * Simple bind, faster than native\n */\nfunction bind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n  // record original fn length\n  boundFn._length = fn.length;\n  return boundFn\n}\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/**\n * Perform no operation.\n * Stubbing args to make Flow happy without leaving useless transpiled code\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/)\n */\nfunction noop (a, b, c) {}\n\n/**\n * Always return false.\n */\nvar no = function (a, b, c) { return false; };\n\n/**\n * Return same value\n */\nvar identity = function (_) { return _; };\n\n/**\n * Generate a static keys string from compiler modules.\n */\nfunction genStaticKeys (modules) {\n  return modules.reduce(function (keys, m) {\n    return keys.concat(m.staticKeys || [])\n  }, []).join(',')\n}\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  if (a === b) { return true }\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      var isArrayA = Array.isArray(a);\n      var isArrayB = Array.isArray(b);\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every(function (e, i) {\n          return looseEqual(e, b[i])\n        })\n      } else if (!isArrayA && !isArrayB) {\n        var keysA = Object.keys(a);\n        var keysB = Object.keys(b);\n        return keysA.length === keysB.length && keysA.every(function (key) {\n          return looseEqual(a[key], b[key])\n        })\n      } else {\n        /* istanbul ignore next */\n        return false\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar SSR_ATTR = 'data-server-rendered';\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated'\n];\n\n/*  */\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: process.env.NODE_ENV !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: process.env.NODE_ENV !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Warn handler for watcher warns\n   */\n  warnHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n});\n\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = /[^\\w.$]/;\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar formatComponentName = (null); // work around flow check\n\nif (process.env.NODE_ENV !== 'production') {\n  var hasConsole = typeof console !== 'undefined';\n  var classifyRE = /(?:^|[-_])(\\w)/g;\n  var classify = function (str) { return str\n    .replace(classifyRE, function (c) { return c.toUpperCase(); })\n    .replace(/[-_]/g, ''); };\n\n  warn = function (msg, vm) {\n    var trace = vm ? generateComponentTrace(vm) : '';\n\n    if (config.warnHandler) {\n      config.warnHandler.call(null, msg, vm, trace);\n    } else if (hasConsole && (!config.silent)) {\n      console.error((\"[Vue warn]: \" + msg + trace));\n    }\n  };\n\n  tip = function (msg, vm) {\n    if (hasConsole && (!config.silent)) {\n      console.warn(\"[Vue tip]: \" + msg + (\n        vm ? generateComponentTrace(vm) : ''\n      ));\n    }\n  };\n\n  formatComponentName = function (vm, includeFile) {\n    if (vm.$root === vm) {\n      return '<Root>'\n    }\n    var name = typeof vm === 'string'\n      ? vm\n      : typeof vm === 'function' && vm.options\n        ? vm.options.name\n        : vm._isVue\n          ? vm.$options.name || vm.$options._componentTag\n          : vm.name;\n\n    var file = vm._isVue && vm.$options.__file;\n    if (!name && file) {\n      var match = file.match(/([^/\\\\]+)\\.vue$/);\n      name = match && match[1];\n    }\n\n    return (\n      (name ? (\"<\" + (classify(name)) + \">\") : \"<Anonymous>\") +\n      (file && includeFile !== false ? (\" at \" + file) : '')\n    )\n  };\n\n  var repeat = function (str, n) {\n    var res = '';\n    while (n) {\n      if (n % 2 === 1) { res += str; }\n      if (n > 1) { str += str; }\n      n >>= 1;\n    }\n    return res\n  };\n\n  var generateComponentTrace = function (vm) {\n    if (vm._isVue && vm.$parent) {\n      var tree = [];\n      var currentRecursiveSequence = 0;\n      while (vm) {\n        if (tree.length > 0) {\n          var last = tree[tree.length - 1];\n          if (last.constructor === vm.constructor) {\n            currentRecursiveSequence++;\n            vm = vm.$parent;\n            continue\n          } else if (currentRecursiveSequence > 0) {\n            tree[tree.length - 1] = [last, currentRecursiveSequence];\n            currentRecursiveSequence = 0;\n          }\n        }\n        tree.push(vm);\n        vm = vm.$parent;\n      }\n      return '\\n\\nfound in\\n\\n' + tree\n        .map(function (vm, i) { return (\"\" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)\n            ? ((formatComponentName(vm[0])) + \"... (\" + (vm[1]) + \" recursive calls)\")\n            : formatComponentName(vm))); })\n        .join('\\n')\n    } else {\n      return (\"\\n\\n(found in \" + (formatComponentName(vm)) + \")\")\n    }\n  };\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  if (config.errorHandler) {\n    config.errorHandler.call(null, err, vm, info);\n  } else {\n    if (process.env.NODE_ENV !== 'production') {\n      warn((\"Error in \" + info + \": \\\"\" + (err.toString()) + \"\\\"\"), vm);\n    }\n    /* istanbul ignore else */\n    if (inBrowser && typeof console !== 'undefined') {\n      console.error(err);\n    } else {\n      throw err\n    }\n  }\n}\n\n/*  */\n/* globals MutationObserver */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = UA && UA.indexOf('android') > 0;\nvar isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\n\n// Firefox has a \"watch\" function on Object.prototype...\nvar nativeWatch = ({}).watch;\n\nvar supportsPassive = false;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n        /* istanbul ignore next */\n        supportsPassive = true;\n      }\n    })); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\n/**\n * Defer a task to execute it asynchronously.\n */\nvar nextTick = (function () {\n  var callbacks = [];\n  var pending = false;\n  var timerFunc;\n\n  function nextTickHandler () {\n    pending = false;\n    var copies = callbacks.slice(0);\n    callbacks.length = 0;\n    for (var i = 0; i < copies.length; i++) {\n      copies[i]();\n    }\n  }\n\n  // the nextTick behavior leverages the microtask queue, which can be accessed\n  // via either native Promise.then or MutationObserver.\n  // MutationObserver has wider support, however it is seriously bugged in\n  // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n  // completely stops working after triggering a few times... so, if native\n  // Promise is available, we will use it:\n  /* istanbul ignore if */\n  if (typeof Promise !== 'undefined' && isNative(Promise)) {\n    var p = Promise.resolve();\n    var logError = function (err) { console.error(err); };\n    timerFunc = function () {\n      p.then(nextTickHandler).catch(logError);\n      // in problematic UIWebViews, Promise.then doesn't completely break, but\n      // it can get stuck in a weird state where callbacks are pushed into the\n      // microtask queue but the queue isn't being flushed, until the browser\n      // needs to do some other work, e.g. handle a timer. Therefore we can\n      // \"force\" the microtask queue to be flushed by adding an empty timer.\n      if (isIOS) { setTimeout(noop); }\n    };\n  } else if (!isIE && typeof MutationObserver !== 'undefined' && (\n    isNative(MutationObserver) ||\n    // PhantomJS and iOS 7.x\n    MutationObserver.toString() === '[object MutationObserverConstructor]'\n  )) {\n    // use MutationObserver where native Promise is not available,\n    // e.g. PhantomJS, iOS7, Android 4.4\n    var counter = 1;\n    var observer = new MutationObserver(nextTickHandler);\n    var textNode = document.createTextNode(String(counter));\n    observer.observe(textNode, {\n      characterData: true\n    });\n    timerFunc = function () {\n      counter = (counter + 1) % 2;\n      textNode.data = String(counter);\n    };\n  } else {\n    // fallback to setTimeout\n    /* istanbul ignore next */\n    timerFunc = function () {\n      setTimeout(nextTickHandler, 0);\n    };\n  }\n\n  return function queueNextTick (cb, ctx) {\n    var _resolve;\n    callbacks.push(function () {\n      if (cb) {\n        try {\n          cb.call(ctx);\n        } catch (e) {\n          handleError(e, ctx, 'nextTick');\n        }\n      } else if (_resolve) {\n        _resolve(ctx);\n      }\n    });\n    if (!pending) {\n      pending = true;\n      timerFunc();\n    }\n    if (!cb && typeof Promise !== 'undefined') {\n      return new Promise(function (resolve, reject) {\n        _resolve = resolve;\n      })\n    }\n  }\n})();\n\nvar _Set;\n/* istanbul ignore if */\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = (function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  this.id = uid++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.target) {\n    Dep.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// the current target watcher being evaluated.\n// this is globally unique because there could be only one\n// watcher being evaluated at any time.\nDep.target = null;\nvar targetStack = [];\n\nfunction pushTarget (_target) {\n  if (Dep.target) { targetStack.push(Dep.target); }\n  Dep.target = _target;\n}\n\nfunction popTarget () {\n  Dep.target = targetStack.pop();\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);[\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n]\n.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * By default, when a reactive property is set, the new value is\n * also converted to become reactive. However when passing down props,\n * we don't want to force conversion because the value may be a nested value\n * under a frozen data structure. Converting it would defeat the optimization.\n */\nvar observerState = {\n  shouldConvert: true\n};\n\n/**\n * Observer class that are attached to each observed\n * object. Once attached, the observer converts target\n * object's property keys into getter/setters that\n * collect dependencies and dispatches updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    var augment = hasProto\n      ? protoAugment\n      : copyAugment;\n    augment(value, arrayMethods, arrayKeys);\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through each property and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive$$1(obj, keys[i], obj[keys[i]]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment an target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src, keys) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment an target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value)) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    observerState.shouldConvert &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive$$1 (\n  obj,\n  key,\n  val,\n  customSetter,\n  shallow\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n\n  var childOb = !shallow && observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.target) {\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if (process.env.NODE_ENV !== 'production' && customSetter) {\n        customSetter();\n      }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = !shallow && observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (hasOwn(target, key)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      'Avoid adding reactive properties to a Vue instance or its root $data ' +\n      'at runtime - declare it upfront in the data option.'\n    );\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive$$1(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      'Avoid deleting properties on a Vue instance or its root $data ' +\n      '- just set it to null.'\n    );\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (process.env.NODE_ENV !== 'production') {\n  strats.el = strats.propsData = function (parent, child, vm, key) {\n    if (!vm) {\n      warn(\n        \"option \\\"\" + key + \"\\\" can only be used during instance \" +\n        'creation with the `new` keyword.'\n      );\n    }\n    return defaultStrat(parent, child)\n  };\n}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n  var keys = Object.keys(from);\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (isPlainObject(toVal) && isPlainObject(fromVal)) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nfunction mergeDataOrFn (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        typeof childVal === 'function' ? childVal.call(this) : childVal,\n        typeof parentVal === 'function' ? parentVal.call(this) : parentVal\n      )\n    }\n  } else if (parentVal || childVal) {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm)\n        : parentVal;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n}\n\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    if (childVal && typeof childVal !== 'function') {\n      process.env.NODE_ENV !== 'production' && warn(\n        'The \"data\" option should be a function ' +\n        'that returns a per-instance value in component ' +\n        'definitions.',\n        vm\n      );\n\n      return parentVal\n    }\n    return mergeDataOrFn.call(this, parentVal, childVal)\n  }\n\n  return mergeDataOrFn(parentVal, childVal, vm)\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  return childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (parentVal, childVal) {\n  var res = Object.create(parentVal || null);\n  return childVal\n    ? extend(res, childVal)\n    : res\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (parentVal, childVal) {\n  // work around Firefox's Object.prototype.watch...\n  if (parentVal === nativeWatch) { parentVal = undefined; }\n  if (childVal === nativeWatch) { childVal = undefined; }\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key in childVal) {\n    var parent = ret[key];\n    var child = childVal[key];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key] = parent\n      ? parent.concat(child)\n      : Array.isArray(child) ? child : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.inject =\nstrats.computed = function (parentVal, childVal) {\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  if (childVal) { extend(ret, childVal); }\n  return ret\n};\nstrats.provide = mergeDataOrFn;\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    var lower = key.toLowerCase();\n    if (isBuiltInTag(lower) || config.isReservedTag(lower)) {\n      warn(\n        'Do not use built-in or reserved HTML elements as component ' +\n        'id: ' + key\n      );\n    }\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (process.env.NODE_ENV !== 'production') {\n        warn('props must be strings when using array syntax.');\n      }\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  }\n  options.props = res;\n}\n\n/**\n * Normalize all injections into Object-based format\n */\nfunction normalizeInject (options) {\n  var inject = options.inject;\n  if (Array.isArray(inject)) {\n    var normalized = options.inject = {};\n    for (var i = 0; i < inject.length; i++) {\n      normalized[inject[i]] = inject[i];\n    }\n  }\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def = dirs[key];\n      if (typeof def === 'function') {\n        dirs[key] = { bind: def, update: def };\n      }\n    }\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (process.env.NODE_ENV !== 'production') {\n    checkComponents(child);\n  }\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child);\n  normalizeInject(child);\n  normalizeDirectives(child);\n  var extendsFrom = child.extends;\n  if (extendsFrom) {\n    parent = mergeOptions(parent, extendsFrom, vm);\n  }\n  if (child.mixins) {\n    for (var i = 0, l = child.mixins.length; i < l; i++) {\n      parent = mergeOptions(parent, child.mixins[i], vm);\n    }\n  }\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {\n    warn(\n      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,\n      options\n    );\n  }\n  return res\n}\n\n/*  */\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // handle boolean props\n  if (isType(Boolean, prop.type)) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (!isType(String, prop.type) && (value === '' || value === hyphenate(key))) {\n      value = true;\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldConvert = observerState.shouldConvert;\n    observerState.shouldConvert = true;\n    observe(value);\n    observerState.shouldConvert = prevShouldConvert;\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    assertProp(prop, key, value, vm, absent);\n  }\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if (process.env.NODE_ENV !== 'production' && isObject(def)) {\n    warn(\n      'Invalid default value for prop \"' + key + '\": ' +\n      'Props with type Object/Array must use a factory function ' +\n      'to return the default value.',\n      vm\n    );\n  }\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n  if (!valid) {\n    warn(\n      'Invalid prop: type check failed for prop \"' + name + '\".' +\n      ' Expected ' + expectedTypes.map(capitalize).join(', ') +\n      ', got ' + Object.prototype.toString.call(value).slice(8, -1) + '.',\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    var t = typeof value;\n    valid = t === expectedType.toLowerCase();\n    // for primitive wrapper objects\n    if (!valid && t === 'object') {\n      valid = value instanceof type;\n    }\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isType (type, fn) {\n  if (!Array.isArray(fn)) {\n    return getType(fn) === getType(type)\n  }\n  for (var i = 0, len = fn.length; i < len; i++) {\n    if (getType(fn[i]) === getType(type)) {\n      return true\n    }\n  }\n  /* istanbul ignore next */\n  return false\n}\n\n/*  */\n\nvar mark;\nvar measure;\n\nif (process.env.NODE_ENV !== 'production') {\n  var perf = inBrowser && window.performance;\n  /* istanbul ignore if */\n  if (\n    perf &&\n    perf.mark &&\n    perf.measure &&\n    perf.clearMarks &&\n    perf.clearMeasures\n  ) {\n    mark = function (tag) { return perf.mark(tag); };\n    measure = function (name, startTag, endTag) {\n      perf.measure(name, startTag, endTag);\n      perf.clearMarks(startTag);\n      perf.clearMarks(endTag);\n      perf.clearMeasures(name);\n    };\n  }\n}\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (process.env.NODE_ENV !== 'production') {\n  var allowedGlobals = makeMap(\n    'Infinity,undefined,NaN,isFinite,isNaN,' +\n    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +\n    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +\n    'require' // for Webpack/Browserify\n  );\n\n  var warnNonPresent = function (target, key) {\n    warn(\n      \"Property or method \\\"\" + key + \"\\\" is not defined on the instance but \" +\n      \"referenced during render. Make sure to declare reactive data \" +\n      \"properties in the data option.\",\n      target\n    );\n  };\n\n  var hasProxy =\n    typeof Proxy !== 'undefined' &&\n    Proxy.toString().match(/native code/);\n\n  if (hasProxy) {\n    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta');\n    config.keyCodes = new Proxy(config.keyCodes, {\n      set: function set (target, key, value) {\n        if (isBuiltInModifier(key)) {\n          warn((\"Avoid overwriting built-in modifier in config.keyCodes: .\" + key));\n          return false\n        } else {\n          target[key] = value;\n          return true\n        }\n      }\n    });\n  }\n\n  var hasHandler = {\n    has: function has (target, key) {\n      var has = key in target;\n      var isAllowed = allowedGlobals(key) || key.charAt(0) === '_';\n      if (!has && !isAllowed) {\n        warnNonPresent(target, key);\n      }\n      return has || !isAllowed\n    }\n  };\n\n  var getHandler = {\n    get: function get (target, key) {\n      if (typeof key === 'string' && !(key in target)) {\n        warnNonPresent(target, key);\n      }\n      return target[key]\n    }\n  };\n\n  initProxy = function initProxy (vm) {\n    if (hasProxy) {\n      // determine which proxy handler to use\n      var options = vm.$options;\n      var handlers = options.render && options.render._withStripped\n        ? getHandler\n        : hasHandler;\n      vm._renderProxy = new Proxy(vm, handlers);\n    } else {\n      vm._renderProxy = vm;\n    }\n  };\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions,\n  asyncFactory\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.functionalContext = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n  this.asyncFactory = asyncFactory;\n  this.asyncMeta = undefined;\n  this.isAsyncPlaceholder = false;\n};\n\nvar prototypeAccessors = { child: {} };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function (text) {\n  if ( text === void 0 ) text = '';\n\n  var node = new VNode();\n  node.text = text;\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode, deep) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    vnode.children,\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions,\n    vnode.asyncFactory\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.isCloned = true;\n  if (deep && vnode.children) {\n    cloned.children = cloneVNodes(vnode.children);\n  }\n  return cloned\n}\n\nfunction cloneVNodes (vnodes, deep) {\n  var len = vnodes.length;\n  var res = new Array(len);\n  for (var i = 0; i < len; i++) {\n    res[i] = cloneVNode(vnodes[i], deep);\n  }\n  return res\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  var plain = !(passive || once$$1 || capture);\n  return {\n    name: name,\n    plain: plain,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      var cloned = fns.slice();\n      for (var i = 0; i < cloned.length; i++) {\n        cloned[i].apply(null, arguments$1);\n      }\n    } else {\n      // return handler return value for single handlers\n      return fns.apply(null, arguments)\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\n// #6552\nfunction prioritizePlainEvents (a, b) {\n  return a.plain ? -1 : b.plain ? 1 : 0\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  vm\n) {\n  var name, cur, old, event;\n  var toAdd = [];\n  var hasModifier = false;\n  for (name in on) {\n    cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    if (!event.plain) { hasModifier = true; }\n    if (isUndef(cur)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        \"Invalid handler for event \\\"\" + (event.name) + \"\\\": got \" + String(cur),\n        vm\n      );\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur);\n      }\n      event.handler = cur;\n      toAdd.push(event);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  if (toAdd.length) {\n    if (hasModifier) { toAdd.sort(prioritizePlainEvents); }\n    for (var i = 0; i < toAdd.length; i++) {\n      var event$1 = toAdd[i];\n      add(event$1.name, event$1.handler, event$1.once, event$1.capture, event$1.passive);\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\nfunction mergeVNodeHook (def, hookKey, hook) {\n  var invoker;\n  var oldHook = def[hookKey];\n\n  function wrappedHook () {\n    hook.apply(this, arguments);\n    // important: remove merged hook to ensure it's called only once\n    // and prevent memory leak\n    remove(invoker.fns, wrappedHook);\n  }\n\n  if (isUndef(oldHook)) {\n    // no existing hook\n    invoker = createFnInvoker([wrappedHook]);\n  } else {\n    /* istanbul ignore if */\n    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {\n      // already a merged invoker\n      invoker = oldHook;\n      invoker.fns.push(wrappedHook);\n    } else {\n      // existing plain hook\n      invoker = createFnInvoker([oldHook, wrappedHook]);\n    }\n  }\n\n  invoker.merged = true;\n  def[hookKey] = invoker;\n}\n\n/*  */\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    return\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (process.env.NODE_ENV !== 'production') {\n        var keyInLowerCase = key.toLowerCase();\n        if (\n          key !== keyInLowerCase &&\n          attrs && hasOwn(attrs, keyInLowerCase)\n        ) {\n          tip(\n            \"Prop \\\"\" + keyInLowerCase + \"\\\" is passed to component \" +\n            (formatComponentName(tag || Ctor)) + \", but the declared prop name is\" +\n            \" \\\"\" + key + \"\\\". \" +\n            \"Note that HTML attributes are case-insensitive and camelCased \" +\n            \"props need to use their kebab-case equivalents when using in-DOM \" +\n            \"templates. You should probably use \\\"\" + altKey + \"\\\" instead of \\\"\" + key + \"\\\".\"\n          );\n        }\n      }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  return res\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    last = res[res.length - 1];\n    //  nested\n    if (Array.isArray(c)) {\n      res.push.apply(res, normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i)));\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        (last).text += String(c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[res.length - 1] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  if (comp.__esModule && comp.default) {\n    comp = comp.default;\n  }\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction createAsyncPlaceholder (\n  factory,\n  data,\n  context,\n  children,\n  tag\n) {\n  var node = createEmptyVNode();\n  node.asyncFactory = factory;\n  node.asyncMeta = { data: data, context: context, children: children, tag: tag };\n  return node\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor,\n  context\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (isDef(factory.contexts)) {\n    // already pending\n    factory.contexts.push(context);\n  } else {\n    var contexts = factory.contexts = [context];\n    var sync = true;\n\n    var forceRender = function () {\n      for (var i = 0, l = contexts.length; i < l; i++) {\n        contexts[i].$forceUpdate();\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender();\n      }\n    });\n\n    var reject = once(function (reason) {\n      process.env.NODE_ENV !== 'production' && warn(\n        \"Failed to resolve async component: \" + (String(factory)) +\n        (reason ? (\"\\nReason: \" + reason) : '')\n      );\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender();\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (typeof res.then === 'function') {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isDef(res.component) && typeof res.component.then === 'function') {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            setTimeout(function () {\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender();\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          setTimeout(function () {\n            if (isUndef(factory.resolved)) {\n              reject(\n                process.env.NODE_ENV !== 'production'\n                  ? (\"timeout (\" + (res.timeout) + \"ms)\")\n                  : null\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction isAsyncPlaceholder (node) {\n  return node.isComment && node.asyncFactory\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn, once$$1) {\n  if (once$$1) {\n    target.$once(event, fn);\n  } else {\n    target.$on(event, fn);\n  }\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, vm);\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var this$1 = this;\n\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        this$1.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var this$1 = this;\n\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        this$1.$off(event[i], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (arguments.length === 1) {\n      vm._events[event] = null;\n      return vm\n    }\n    if (fn) {\n      // specific handler\n      var cb;\n      var i$1 = cbs.length;\n      while (i$1--) {\n        cb = cbs[i$1];\n        if (cb === fn || cb.fn === fn) {\n          cbs.splice(i$1, 1);\n          break\n        }\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (process.env.NODE_ENV !== 'production') {\n      var lowerCaseEvent = event.toLowerCase();\n      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {\n        tip(\n          \"Event \\\"\" + lowerCaseEvent + \"\\\" is emitted in component \" +\n          (formatComponentName(vm)) + \" but the handler is registered for \\\"\" + event + \"\\\". \" +\n          \"Note that HTML attributes are case-insensitive and you cannot use \" +\n          \"v-on to listen to camelCase events when using in-DOM templates. \" +\n          \"You should probably use \\\"\" + (hyphenate(event)) + \"\\\" instead of \\\"\" + event + \"\\\".\"\n        );\n      }\n    }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        try {\n          cbs[i].apply(vm, args);\n        } catch (e) {\n          handleError(e, vm, (\"event handler for \\\"\" + event + \"\\\"\"));\n        }\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  var slots = {};\n  if (!children) {\n    return slots\n  }\n  var defaultSlot = [];\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    var data = child.data;\n    // remove slot attribute if the node is resolved as a Vue slot node\n    if (data && data.attrs && data.attrs.slot) {\n      delete data.attrs.slot;\n    }\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.functionalContext === context) &&\n      data && data.slot != null\n    ) {\n      var name = child.data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      defaultSlot.push(child);\n    }\n  }\n  // ignore whitespace\n  if (!defaultSlot.every(isWhitespace)) {\n    slots.default = defaultSlot;\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return node.isComment || node.text === ' '\n}\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res\n) {\n  res = res || {};\n  for (var i = 0; i < fns.length; i++) {\n    if (Array.isArray(fns[i])) {\n      resolveScopedSlots(fns[i], res);\n    } else {\n      res[fns[i].key] = fns[i].fn;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar activeInstance = null;\nvar isUpdatingChildComponent = false;\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    if (vm._isMounted) {\n      callHook(vm, 'beforeUpdate');\n    }\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var prevActiveInstance = activeInstance;\n    activeInstance = vm;\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(\n        vm.$el, vnode, hydrating, false /* removeOnly */,\n        vm.$options._parentElm,\n        vm.$options._refElm\n      );\n      // no need for the ref nodes after initial patch\n      // this prevents keeping a detached DOM tree in memory (#5851)\n      vm.$options._parentElm = vm.$options._refElm = null;\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    activeInstance = prevActiveInstance;\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n  };\n}\n\nfunction mountComponent (\n  vm,\n  el,\n  hydrating\n) {\n  vm.$el = el;\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyVNode;\n    if (process.env.NODE_ENV !== 'production') {\n      /* istanbul ignore if */\n      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||\n        vm.$options.el || el) {\n        warn(\n          'You are using the runtime-only build of Vue where the template ' +\n          'compiler is not available. Either pre-compile the templates into ' +\n          'render functions, or use the compiler-included build.',\n          vm\n        );\n      } else {\n        warn(\n          'Failed to mount component: template or render function not defined.',\n          vm\n        );\n      }\n    }\n  }\n  callHook(vm, 'beforeMount');\n\n  var updateComponent;\n  /* istanbul ignore if */\n  if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n    updateComponent = function () {\n      var name = vm._name;\n      var id = vm._uid;\n      var startTag = \"vue-perf-start:\" + id;\n      var endTag = \"vue-perf-end:\" + id;\n\n      mark(startTag);\n      var vnode = vm._render();\n      mark(endTag);\n      measure((name + \" render\"), startTag, endTag);\n\n      mark(startTag);\n      vm._update(vnode, hydrating);\n      mark(endTag);\n      measure((name + \" patch\"), startTag, endTag);\n    };\n  } else {\n    updateComponent = function () {\n      vm._update(vm._render(), hydrating);\n    };\n  }\n\n  vm._watcher = new Watcher(vm, updateComponent, noop);\n  hydrating = false;\n\n  // manually mounted instance, call mounted on self\n  // mounted is called for render-created child components in its inserted hook\n  if (vm.$vnode == null) {\n    vm._isMounted = true;\n    callHook(vm, 'mounted');\n  }\n  return vm\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  if (process.env.NODE_ENV !== 'production') {\n    isUpdatingChildComponent = true;\n  }\n\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren\n  var hasChildren = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    parentVnode.data.scopedSlots || // has new scoped slots\n    vm.$scopedSlots !== emptyObject // has old scoped slots\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update $attrs and $listeners hash\n  // these are also reactive so they may trigger child update if the child\n  // used them during render\n  vm.$attrs = (parentVnode.data && parentVnode.data.attrs) || emptyObject;\n  vm.$listeners = listeners || emptyObject;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    observerState.shouldConvert = false;\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      props[key] = validateProp(key, vm.$options.props, propsData, vm);\n    }\n    observerState.shouldConvert = true;\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n\n  // update listeners\n  if (listeners) {\n    var oldListeners = vm.$options._parentListeners;\n    vm.$options._parentListeners = listeners;\n    updateComponentListeners(vm, listeners, oldListeners);\n  }\n  // resolve slots + force update if has children\n  if (hasChildren) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    isUpdatingChildComponent = false;\n  }\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  var handlers = vm.$options[hook];\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      try {\n        handlers[i].call(vm);\n      } catch (e) {\n        handleError(e, vm, (hook + \" hook\"));\n      }\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n}\n\n/*  */\n\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (process.env.NODE_ENV !== 'production') {\n    circular = {};\n  }\n  waiting = flushing = false;\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if (process.env.NODE_ENV !== 'production' && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > MAX_UPDATE_COUNT) {\n        warn(\n          'You may have an infinite update loop ' + (\n            watcher.user\n              ? (\"in watcher with expression \\\"\" + (watcher.expression) + \"\\\"\")\n              : \"in a component render function.\"\n          ),\n          watcher.vm\n        );\n        break\n      }\n    }\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdatedHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdatedHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options\n) {\n  this.vm = vm;\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression = process.env.NODE_ENV !== 'production'\n    ? expOrFn.toString()\n    : '';\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = function () {};\n      process.env.NODE_ENV !== 'production' && warn(\n        \"Failed watching path: \\\"\" + expOrFn + \"\\\" \" +\n        'Watcher only accepts simple dot-delimited paths. ' +\n        'For full control, use a function instead.',\n        vm\n      );\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  try {\n    value = this.getter.call(vm, vm);\n  } catch (e) {\n    if (this.user) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    } else {\n      throw e\n    }\n  } finally {\n    // \"touch\" every property so they are all tracked as\n    // dependencies for deep watching\n    if (this.deep) {\n      traverse(value);\n    }\n    popTarget();\n    this.cleanupDeps();\n  }\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this$1.deps[i];\n    if (!this$1.newDepIds.has(dep.id)) {\n      dep.removeSub(this$1);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n    var this$1 = this;\n\n  var i = this.deps.length;\n  while (i--) {\n    this$1.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n    var this$1 = this;\n\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this$1.deps[i].removeSub(this$1);\n    }\n    this.active = false;\n  }\n};\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nvar seenObjects = new _Set();\nfunction traverse (val) {\n  seenObjects.clear();\n  _traverse(val, seenObjects);\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || !Object.isExtensible(val)) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch);\n  }\n}\n\nfunction checkOptionType (vm, name) {\n  var option = vm.$options[name];\n  if (!isPlainObject(option)) {\n    warn(\n      (\"component option \\\"\" + name + \"\\\" should be an object.\"),\n      vm\n    );\n  }\n}\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  observerState.shouldConvert = isRoot;\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      if (isReservedAttribute(key) || config.isReservedAttr(key)) {\n        warn(\n          (\"\\\"\" + key + \"\\\" is a reserved attribute and cannot be used as component prop.\"),\n          vm\n        );\n      }\n      defineReactive$$1(props, key, value, function () {\n        if (vm.$parent && !isUpdatingChildComponent) {\n          warn(\n            \"Avoid mutating a prop directly since the value will be \" +\n            \"overwritten whenever the parent component re-renders. \" +\n            \"Instead, use a data or computed property based on the prop's \" +\n            \"value. Prop being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        }\n      });\n    } else {\n      defineReactive$$1(props, key, value);\n    }\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  observerState.shouldConvert = true;\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n    process.env.NODE_ENV !== 'production' && warn(\n      'data functions should return an object:\\n' +\n      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',\n      vm\n    );\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var methods = vm.$options.methods;\n  var i = keys.length;\n  while (i--) {\n    var key = keys[i];\n    if (process.env.NODE_ENV !== 'production') {\n      if (methods && hasOwn(methods, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a data property.\"),\n          vm\n        );\n      }\n    }\n    if (props && hasOwn(props, key)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        \"The data property \\\"\" + key + \"\\\" is already declared as a prop. \" +\n        \"Use prop default value instead.\",\n        vm\n      );\n    } else if (!isReserved(key)) {\n      proxy(vm, \"_data\", key);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  try {\n    return data.call(vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  process.env.NODE_ENV !== 'production' && checkOptionType(vm, 'computed');\n  var watchers = vm._computedWatchers = Object.create(null);\n  // computed properties are just getters during SSR\n  var isSSR = isServerRendering();\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if (process.env.NODE_ENV !== 'production' && getter == null) {\n      warn(\n        (\"Getter is missing for computed property \\\"\" + key + \"\\\".\"),\n        vm\n      );\n    }\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      );\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (process.env.NODE_ENV !== 'production') {\n      if (key in vm.$data) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined in data.\"), vm);\n      } else if (vm.$options.props && key in vm.$options.props) {\n        warn((\"The computed property \\\"\" + key + \"\\\" is already defined as a prop.\"), vm);\n      }\n    }\n  }\n}\n\nfunction defineComputed (\n  target,\n  key,\n  userDef\n) {\n  var shouldCache = !isServerRendering();\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : userDef;\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : userDef.get\n      : noop;\n    sharedPropertyDefinition.set = userDef.set\n      ? userDef.set\n      : noop;\n  }\n  if (process.env.NODE_ENV !== 'production' &&\n      sharedPropertyDefinition.set === noop) {\n    sharedPropertyDefinition.set = function () {\n      warn(\n        (\"Computed property \\\"\" + key + \"\\\" was assigned to but it has no setter.\"),\n        this\n      );\n    };\n  }\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.target) {\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction initMethods (vm, methods) {\n  process.env.NODE_ENV !== 'production' && checkOptionType(vm, 'methods');\n  var props = vm.$options.props;\n  for (var key in methods) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (methods[key] == null) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" has an undefined value in the component definition. \" +\n          \"Did you reference the function correctly?\",\n          vm\n        );\n      }\n      if (props && hasOwn(props, key)) {\n        warn(\n          (\"Method \\\"\" + key + \"\\\" has already been defined as a prop.\"),\n          vm\n        );\n      }\n      if ((key in vm) && isReserved(key)) {\n        warn(\n          \"Method \\\"\" + key + \"\\\" conflicts with an existing Vue instance method. \" +\n          \"Avoid defining component methods that start with _ or $.\"\n        );\n      }\n    }\n    vm[key] = methods[key] == null ? noop : bind(methods[key], vm);\n  }\n}\n\nfunction initWatch (vm, watch) {\n  process.env.NODE_ENV !== 'production' && checkOptionType(vm, 'watch');\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (\n  vm,\n  keyOrFn,\n  handler,\n  options\n) {\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  return vm.$watch(keyOrFn, handler, options)\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (process.env.NODE_ENV !== 'production') {\n    dataDef.set = function (newData) {\n      warn(\n        'Avoid replacing instance root $data. ' +\n        'Use nested data properties instead.',\n        this\n      );\n    };\n    propsDef.set = function () {\n      warn(\"$props is readonly.\", this);\n    };\n  }\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      cb.call(vm, watcher.value);\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    observerState.shouldConvert = false;\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== 'production') {\n        defineReactive$$1(vm, key, result[key], function () {\n          warn(\n            \"Avoid mutating an injected value directly since the changes will be \" +\n            \"overwritten whenever the provided component re-renders. \" +\n            \"injection being mutated: \\\"\" + key + \"\\\"\",\n            vm\n          );\n        });\n      } else {\n        defineReactive$$1(vm, key, result[key]);\n      }\n    });\n    observerState.shouldConvert = true;\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    var result = Object.create(null);\n    var keys = hasSymbol\n        ? Reflect.ownKeys(inject).filter(function (key) {\n          /* istanbul ignore next */\n          return Object.getOwnPropertyDescriptor(inject, key).enumerable\n        })\n        : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var provideKey = inject[key];\n      var source = vm;\n      while (source) {\n        if (source._provided && provideKey in source._provided) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n      if (process.env.NODE_ENV !== 'production' && !source) {\n        warn((\"Injection \\\"\" + key + \"\\\" not found\"), vm);\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  context,\n  children\n) {\n  var props = {};\n  var propOptions = Ctor.options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || emptyObject);\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var _context = Object.create(context);\n  var h = function (a, b, c, d) { return createElement(_context, a, b, c, d, true); };\n  var vnode = Ctor.options.render.call(null, h, {\n    data: data,\n    props: props,\n    children: children,\n    parent: context,\n    listeners: data.on || emptyObject,\n    injections: resolveInject(Ctor.options.inject, context),\n    slots: function () { return resolveSlots(children, context); }\n  });\n  if (vnode instanceof VNode) {\n    vnode.functionalContext = context;\n    vnode.functionalOptions = Ctor.options;\n    if (data.slot) {\n      (vnode.data || (vnode.data = {})).slot = data.slot;\n    }\n  }\n  return vnode\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n// hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (\n    vnode,\n    hydrating,\n    parentElm,\n    refElm\n  ) {\n    if (!vnode.componentInstance || vnode.componentInstance._isDestroyed) {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance,\n        parentElm,\n        refElm\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    } else if (vnode.data.keepAlive) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      warn((\"Invalid Component definition: \" + (String(Ctor))), context);\n    }\n    return\n  }\n\n  // async component\n  var asyncFactory;\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor;\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor, context);\n    if (Ctor === undefined) {\n      // return a placeholder node for async component, which is rendered\n      // as a comment node but preserves all the raw information for the node.\n      // the information will be used for async server-rendering and hydration.\n      return createAsyncPlaceholder(\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n\n  data = data || {};\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag);\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  // so it gets processed during parent component patch.\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners & slot\n\n    // work around flow\n    var slot = data.slot;\n    data = {};\n    if (slot) {\n      data.slot = slot;\n    }\n  }\n\n  // merge component management hooks onto the placeholder node\n  mergeHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\n    asyncFactory\n  );\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent, // activeInstance in lifecycle state\n  parentElm,\n  refElm\n) {\n  var vnodeComponentOptions = vnode.componentOptions;\n  var options = {\n    _isComponent: true,\n    parent: parent,\n    propsData: vnodeComponentOptions.propsData,\n    _componentTag: vnodeComponentOptions.tag,\n    _parentVnode: vnode,\n    _parentListeners: vnodeComponentOptions.listeners,\n    _renderChildren: vnodeComponentOptions.children,\n    _parentElm: parentElm || null,\n    _refElm: refElm || null\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnodeComponentOptions.Ctor(options)\n}\n\nfunction mergeHooks (data) {\n  if (!data.hook) {\n    data.hook = {};\n  }\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    var fromParent = data.hook[key];\n    var ours = componentVNodeHooks[key];\n    data.hook[key] = fromParent ? mergeHook$1(ours, fromParent) : ours;\n  }\n}\n\nfunction mergeHook$1 (one, two) {\n  return function (a, b, c, d) {\n    one(a, b, c, d);\n    two(a, b, c, d);\n  }\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input';(data.props || (data.props = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  if (isDef(on[event])) {\n    on[event] = [data.model.callback].concat(on[event]);\n  } else {\n    on[event] = data.model.callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      \"Avoid using observed data object as vnode data: \" + (JSON.stringify(data)) + \"\\n\" +\n      'Always create fresh vnode data objects in each render!',\n      context\n    );\n    return createEmptyVNode()\n  }\n  // object syntax in v-bind\n  if (isDef(data) && isDef(data.is)) {\n    tag = data.is;\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // warn against non-primitive key\n  if (process.env.NODE_ENV !== 'production' &&\n    isDef(data) && isDef(data.key) && !isPrimitive(data.key)\n  ) {\n    warn(\n      'Avoid using non-primitive value as key, ' +\n      'use string/number value instead.',\n      context\n    );\n  }\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if (isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (isDef(vnode)) {\n    if (ns) { applyNS(vnode, ns); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    return\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && isUndef(child.ns)) {\n        applyNS(child, ns);\n      }\n    }\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i);\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i);\n    }\n  } else if (isObject(val)) {\n    keys = Object.keys(val);\n    ret = new Array(keys.length);\n    for (i = 0, l = keys.length; i < l; i++) {\n      key = keys[i];\n      ret[i] = render(val[key], key, i);\n    }\n  }\n  if (isDef(ret)) {\n    (ret)._isVList = true;\n  }\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      props = extend(extend({}, bindObject), props);\n    }\n    return scopedSlotFn(props) || fallback\n  } else {\n    var slotNodes = this.$slots[name];\n    // warn duplicate slot usage\n    if (slotNodes && process.env.NODE_ENV !== 'production') {\n      slotNodes._rendered && warn(\n        \"Duplicate presence of slot \\\"\" + name + \"\\\" found in the same render tree \" +\n        \"- this will likely cause render errors.\",\n        this\n      );\n      slotNodes._rendered = true;\n    }\n    return slotNodes || fallback\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\n/**\n * Runtime helper for checking keyCodes from config.\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInAlias\n) {\n  var keyCodes = config.keyCodes[key] || builtInAlias;\n  if (Array.isArray(keyCodes)) {\n    return keyCodes.indexOf(eventKeyCode) === -1\n  } else {\n    return keyCodes !== eventKeyCode\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp,\n  isSync\n) {\n  if (value) {\n    if (!isObject(value)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        'v-bind without argument expects an Object or Array value',\n        this\n      );\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      var loop = function ( key ) {\n        if (\n          key === 'class' ||\n          key === 'style' ||\n          isReservedAttribute(key)\n        ) {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        if (!(key in hash)) {\n          hash[key] = value[key];\n\n          if (isSync) {\n            var on = data.on || (data.on = {});\n            on[(\"update:\" + key)] = function ($event) {\n              value[key] = $event;\n            };\n          }\n        }\n      };\n\n      for (var key in value) loop( key );\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var tree = this._staticTrees[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree by doing a shallow clone.\n  if (tree && !isInFor) {\n    return Array.isArray(tree)\n      ? cloneVNodes(tree)\n      : cloneVNode(tree)\n  }\n  // otherwise, render a fresh tree.\n  tree = this._staticTrees[index] =\n    this.$options.staticRenderFns[index].call(this._renderProxy);\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction bindObjectListeners (data, value) {\n  if (value) {\n    if (!isPlainObject(value)) {\n      process.env.NODE_ENV !== 'production' && warn(\n        'v-on without argument expects an Object value',\n        this\n      );\n    } else {\n      var on = data.on = data.on ? extend({}, data.on) : {};\n      for (var key in value) {\n        var existing = on[key];\n        var ours = value[key];\n        on[key] = existing ? [].concat(ours, existing) : ours;\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null;\n  var parentVnode = vm.$vnode = vm.$options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(vm.$options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  var parentData = parentVnode && parentVnode.data;\n\n  /* istanbul ignore else */\n  if (process.env.NODE_ENV !== 'production') {\n    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$attrs is readonly.\", vm);\n    }, true);\n    defineReactive$$1(vm, '$listeners', vm.$options._parentListeners || emptyObject, function () {\n      !isUpdatingChildComponent && warn(\"$listeners is readonly.\", vm);\n    }, true);\n  } else {\n    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true);\n    defineReactive$$1(vm, '$listeners', vm.$options._parentListeners || emptyObject, null, true);\n  }\n}\n\nfunction renderMixin (Vue) {\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var staticRenderFns = ref.staticRenderFns;\n    var _parentVnode = ref._parentVnode;\n\n    if (vm._isMounted) {\n      // if the parent didn't update, the slot nodes will be the ones from\n      // last render. They need to be cloned to ensure \"freshness\" for this render.\n      for (var key in vm.$slots) {\n        var slot = vm.$slots[key];\n        if (slot._rendered) {\n          vm.$slots[key] = cloneVNodes(slot, true /* deep */);\n        }\n      }\n    }\n\n    vm.$scopedSlots = (_parentVnode && _parentVnode.data.scopedSlots) || emptyObject;\n\n    if (staticRenderFns && !vm._staticTrees) {\n      vm._staticTrees = [];\n    }\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render function\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if (process.env.NODE_ENV !== 'production') {\n        vnode = vm.$options.renderError\n          ? vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)\n          : vm._vnode;\n      } else {\n        vnode = vm._vnode;\n      }\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {\n        warn(\n          'Multiple root nodes returned from render function. Render function ' +\n          'should return a single root node.',\n          vm\n        );\n      }\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n\n  // internal render helpers.\n  // these are exposed on the instance prototype to reduce generated render\n  // code size.\n  Vue.prototype._o = markOnce;\n  Vue.prototype._n = toNumber;\n  Vue.prototype._s = toString;\n  Vue.prototype._l = renderList;\n  Vue.prototype._t = renderSlot;\n  Vue.prototype._q = looseEqual;\n  Vue.prototype._i = looseIndexOf;\n  Vue.prototype._m = renderStatic;\n  Vue.prototype._f = resolveFilter;\n  Vue.prototype._k = checkKeyCodes;\n  Vue.prototype._b = bindObjectProps;\n  Vue.prototype._v = createTextVNode;\n  Vue.prototype._e = createEmptyVNode;\n  Vue.prototype._u = resolveScopedSlots;\n  Vue.prototype._g = bindObjectListeners;\n}\n\n/*  */\n\nvar uid$1 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$1++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n      startTag = \"vue-perf-init:\" + (vm._uid);\n      endTag = \"vue-perf-end:\" + (vm._uid);\n      mark(startTag);\n    }\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      initProxy(vm);\n    } else {\n      vm._renderProxy = vm;\n    }\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    initInjections(vm); // resolve injections before data/props\n    initState(vm);\n    initProvide(vm); // resolve provide after data/props\n    callHook(vm, 'created');\n\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n      vm._name = formatComponentName(vm, false);\n      mark(endTag);\n      measure(((vm._name) + \" init\"), startTag, endTag);\n    }\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  opts.parent = options.parent;\n  opts.propsData = options.propsData;\n  opts._parentVnode = options._parentVnode;\n  opts._parentListeners = options._parentListeners;\n  opts._renderChildren = options._renderChildren;\n  opts._componentTag = options._componentTag;\n  opts._parentElm = options._parentElm;\n  opts._refElm = options._refElm;\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var extended = Ctor.extendOptions;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = dedupe(latest[key], extended[key], sealed[key]);\n    }\n  }\n  return modified\n}\n\nfunction dedupe (latest, extended, sealed) {\n  // compare latest and sealed to ensure lifecycle hooks won't be duplicated\n  // between merges\n  if (Array.isArray(latest)) {\n    var res = [];\n    sealed = Array.isArray(sealed) ? sealed : [sealed];\n    extended = Array.isArray(extended) ? extended : [extended];\n    for (var i = 0; i < latest.length; i++) {\n      // push original options and not sealed options to exclude duplicated options\n      if (extended.indexOf(latest[i]) >= 0 || sealed.indexOf(latest[i]) < 0) {\n        res.push(latest[i]);\n      }\n    }\n    return res\n  } else {\n    return latest\n  }\n}\n\nfunction Vue$3 (options) {\n  if (process.env.NODE_ENV !== 'production' &&\n    !(this instanceof Vue$3)\n  ) {\n    warn('Vue is a constructor and should be called with the `new` keyword');\n  }\n  this._init(options);\n}\n\ninitMixin(Vue$3);\nstateMixin(Vue$3);\neventsMixin(Vue$3);\nlifecycleMixin(Vue$3);\nrenderMixin(Vue$3);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    installedPlugins.push(plugin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if (process.env.NODE_ENV !== 'production') {\n      if (!/^[a-zA-Z][\\w-]*$/.test(name)) {\n        warn(\n          'Invalid component name: \"' + name + '\". Component names ' +\n          'can only contain alphanumeric characters and the hyphen, ' +\n          'and must start with a letter.'\n        );\n      }\n    }\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV !== 'production') {\n          if (type === 'component' && config.isReservedTag(id)) {\n            warn(\n              'Do not use built-in or reserved HTML elements as component ' +\n              'id: ' + id\n            );\n          }\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\nvar patternTypes = [String, RegExp, Array];\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (Array.isArray(pattern)) {\n    return pattern.indexOf(name) > -1\n  } else if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (cache, current, filter) {\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        if (cachedNode !== current) {\n          pruneCacheEntry(cachedNode);\n        }\n        cache[key] = null;\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (vnode) {\n  if (vnode) {\n    vnode.componentInstance.$destroy();\n  }\n}\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n  },\n\n  destroyed: function destroyed () {\n    var this$1 = this;\n\n    for (var key in this$1.cache) {\n      pruneCacheEntry(this$1.cache[key]);\n    }\n  },\n\n  watch: {\n    include: function include (val) {\n      pruneCache(this.cache, this._vnode, function (name) { return matches(val, name); });\n    },\n    exclude: function exclude (val) {\n      pruneCache(this.cache, this._vnode, function (name) { return !matches(val, name); });\n    }\n  },\n\n  render: function render () {\n    var vnode = getFirstComponentChild(this.$slots.default);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      if (name && (\n        (this.include && !matches(this.include, name)) ||\n        (this.exclude && matches(this.exclude, name))\n      )) {\n        return vnode\n      }\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (this.cache[key]) {\n        vnode.componentInstance = this.cache[key].componentInstance;\n      } else {\n        this.cache[key] = vnode;\n      }\n      vnode.data.keepAlive = true;\n    }\n    return vnode\n  }\n};\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n};\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (process.env.NODE_ENV !== 'production') {\n    configDef.set = function () {\n      warn(\n        'Do not replace the Vue.config object, set individual fields instead.'\n      );\n    };\n  }\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive$$1\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue$3);\n\nObject.defineProperty(Vue$3.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue$3.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode && this.$vnode.ssrContext\n  }\n});\n\nVue$3.version = '2.4.4';\n\n/*  */\n\n// these are reserved for web because they are directly compiled away\n// during template compilation\nvar isReservedAttr = makeMap('style,class');\n\n// attributes that should be using props for binding\nvar acceptValue = makeMap('input,textarea,option,select,progress');\nvar mustUseProp = function (tag, type, attr) {\n  return (\n    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||\n    (attr === 'selected' && tag === 'option') ||\n    (attr === 'checked' && tag === 'input') ||\n    (attr === 'muted' && tag === 'video')\n  )\n};\n\nvar isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');\n\nvar isBooleanAttr = makeMap(\n  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +\n  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +\n  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +\n  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +\n  'required,reversed,scoped,seamless,selected,sortable,translate,' +\n  'truespeed,typemustmatch,visible'\n);\n\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\n\nvar isXlink = function (name) {\n  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'\n};\n\nvar getXlinkProp = function (name) {\n  return isXlink(name) ? name.slice(6, name.length) : ''\n};\n\nvar isFalsyAttrValue = function (val) {\n  return val == null || val === false\n};\n\n/*  */\n\nfunction genClassForVnode (vnode) {\n  var data = vnode.data;\n  var parentNode = vnode;\n  var childNode = vnode;\n  while (isDef(childNode.componentInstance)) {\n    childNode = childNode.componentInstance._vnode;\n    if (childNode.data) {\n      data = mergeClassData(childNode.data, data);\n    }\n  }\n  while (isDef(parentNode = parentNode.parent)) {\n    if (parentNode.data) {\n      data = mergeClassData(data, parentNode.data);\n    }\n  }\n  return renderClass(data.staticClass, data.class)\n}\n\nfunction mergeClassData (child, parent) {\n  return {\n    staticClass: concat(child.staticClass, parent.staticClass),\n    class: isDef(child.class)\n      ? [child.class, parent.class]\n      : parent.class\n  }\n}\n\nfunction renderClass (\n  staticClass,\n  dynamicClass\n) {\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (Array.isArray(value)) {\n    return stringifyArray(value)\n  }\n  if (isObject(value)) {\n    return stringifyObject(value)\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction stringifyArray (value) {\n  var res = '';\n  var stringified;\n  for (var i = 0, l = value.length; i < l; i++) {\n    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n      if (res) { res += ' '; }\n      res += stringified;\n    }\n  }\n  return res\n}\n\nfunction stringifyObject (value) {\n  var res = '';\n  for (var key in value) {\n    if (value[key]) {\n      if (res) { res += ' '; }\n      res += key;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar namespaceMap = {\n  svg: 'http://www.w3.org/2000/svg',\n  math: 'http://www.w3.org/1998/Math/MathML'\n};\n\nvar isHTMLTag = makeMap(\n  'html,body,base,head,link,meta,style,title,' +\n  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +\n  'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +\n  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +\n  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +\n  'embed,object,param,source,canvas,script,noscript,del,ins,' +\n  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +\n  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +\n  'output,progress,select,textarea,' +\n  'details,dialog,menu,menuitem,summary,' +\n  'content,element,shadow,template,blockquote,iframe,tfoot'\n);\n\n// this map is intentionally selective, only covering SVG elements that may\n// contain child elements.\nvar isSVG = makeMap(\n  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +\n  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +\n  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',\n  true\n);\n\nvar isPreTag = function (tag) { return tag === 'pre'; };\n\nvar isReservedTag = function (tag) {\n  return isHTMLTag(tag) || isSVG(tag)\n};\n\nfunction getTagNamespace (tag) {\n  if (isSVG(tag)) {\n    return 'svg'\n  }\n  // basic support for MathML\n  // note it doesn't support other MathML elements being component roots\n  if (tag === 'math') {\n    return 'math'\n  }\n}\n\nvar unknownElementCache = Object.create(null);\nfunction isUnknownElement (tag) {\n  /* istanbul ignore if */\n  if (!inBrowser) {\n    return true\n  }\n  if (isReservedTag(tag)) {\n    return false\n  }\n  tag = tag.toLowerCase();\n  /* istanbul ignore if */\n  if (unknownElementCache[tag] != null) {\n    return unknownElementCache[tag]\n  }\n  var el = document.createElement(tag);\n  if (tag.indexOf('-') > -1) {\n    // http://stackoverflow.com/a/28210364/1070244\n    return (unknownElementCache[tag] = (\n      el.constructor === window.HTMLUnknownElement ||\n      el.constructor === window.HTMLElement\n    ))\n  } else {\n    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))\n  }\n}\n\nvar isTextInputType = makeMap('text,number,password,search,email,tel,url');\n\n/*  */\n\n/**\n * Query an element selector if it's not an element already.\n */\nfunction query (el) {\n  if (typeof el === 'string') {\n    var selected = document.querySelector(el);\n    if (!selected) {\n      process.env.NODE_ENV !== 'production' && warn(\n        'Cannot find element: ' + el\n      );\n      return document.createElement('div')\n    }\n    return selected\n  } else {\n    return el\n  }\n}\n\n/*  */\n\nfunction createElement$1 (tagName, vnode) {\n  var elm = document.createElement(tagName);\n  if (tagName !== 'select') {\n    return elm\n  }\n  // false or null will remove the attribute but undefined will not\n  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {\n    elm.setAttribute('multiple', 'multiple');\n  }\n  return elm\n}\n\nfunction createElementNS (namespace, tagName) {\n  return document.createElementNS(namespaceMap[namespace], tagName)\n}\n\nfunction createTextNode (text) {\n  return document.createTextNode(text)\n}\n\nfunction createComment (text) {\n  return document.createComment(text)\n}\n\nfunction insertBefore (parentNode, newNode, referenceNode) {\n  parentNode.insertBefore(newNode, referenceNode);\n}\n\nfunction removeChild (node, child) {\n  node.removeChild(child);\n}\n\nfunction appendChild (node, child) {\n  node.appendChild(child);\n}\n\nfunction parentNode (node) {\n  return node.parentNode\n}\n\nfunction nextSibling (node) {\n  return node.nextSibling\n}\n\nfunction tagName (node) {\n  return node.tagName\n}\n\nfunction setTextContent (node, text) {\n  node.textContent = text;\n}\n\nfunction setAttribute (node, key, val) {\n  node.setAttribute(key, val);\n}\n\n\nvar nodeOps = Object.freeze({\n\tcreateElement: createElement$1,\n\tcreateElementNS: createElementNS,\n\tcreateTextNode: createTextNode,\n\tcreateComment: createComment,\n\tinsertBefore: insertBefore,\n\tremoveChild: removeChild,\n\tappendChild: appendChild,\n\tparentNode: parentNode,\n\tnextSibling: nextSibling,\n\ttagName: tagName,\n\tsetTextContent: setTextContent,\n\tsetAttribute: setAttribute\n});\n\n/*  */\n\nvar ref = {\n  create: function create (_, vnode) {\n    registerRef(vnode);\n  },\n  update: function update (oldVnode, vnode) {\n    if (oldVnode.data.ref !== vnode.data.ref) {\n      registerRef(oldVnode, true);\n      registerRef(vnode);\n    }\n  },\n  destroy: function destroy (vnode) {\n    registerRef(vnode, true);\n  }\n};\n\nfunction registerRef (vnode, isRemoval) {\n  var key = vnode.data.ref;\n  if (!key) { return }\n\n  var vm = vnode.context;\n  var ref = vnode.componentInstance || vnode.elm;\n  var refs = vm.$refs;\n  if (isRemoval) {\n    if (Array.isArray(refs[key])) {\n      remove(refs[key], ref);\n    } else if (refs[key] === ref) {\n      refs[key] = undefined;\n    }\n  } else {\n    if (vnode.data.refInFor) {\n      if (!Array.isArray(refs[key])) {\n        refs[key] = [ref];\n      } else if (refs[key].indexOf(ref) < 0) {\n        // $flow-disable-line\n        refs[key].push(ref);\n      }\n    } else {\n      refs[key] = ref;\n    }\n  }\n}\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/paldepind/snabbdom/blob/master/LICENSE\n *\n * modified by Evan You (@yyx990803)\n *\n * Not type-checking this because this file is perf-critical and the cost\n * of making flow understand it is not worth it.\n */\n\nvar emptyNode = new VNode('', {}, []);\n\nvar hooks = ['create', 'activate', 'update', 'remove', 'destroy'];\n\nfunction sameVnode (a, b) {\n  return (\n    a.key === b.key && (\n      (\n        a.tag === b.tag &&\n        a.isComment === b.isComment &&\n        isDef(a.data) === isDef(b.data) &&\n        sameInputType(a, b)\n      ) || (\n        isTrue(a.isAsyncPlaceholder) &&\n        a.asyncFactory === b.asyncFactory &&\n        isUndef(b.asyncFactory.error)\n      )\n    )\n  )\n}\n\nfunction sameInputType (a, b) {\n  if (a.tag !== 'input') { return true }\n  var i;\n  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;\n  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;\n  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)\n}\n\nfunction createKeyToOldIdx (children, beginIdx, endIdx) {\n  var i, key;\n  var map = {};\n  for (i = beginIdx; i <= endIdx; ++i) {\n    key = children[i].key;\n    if (isDef(key)) { map[key] = i; }\n  }\n  return map\n}\n\nfunction createPatchFunction (backend) {\n  var i, j;\n  var cbs = {};\n\n  var modules = backend.modules;\n  var nodeOps = backend.nodeOps;\n\n  for (i = 0; i < hooks.length; ++i) {\n    cbs[hooks[i]] = [];\n    for (j = 0; j < modules.length; ++j) {\n      if (isDef(modules[j][hooks[i]])) {\n        cbs[hooks[i]].push(modules[j][hooks[i]]);\n      }\n    }\n  }\n\n  function emptyNodeAt (elm) {\n    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)\n  }\n\n  function createRmCb (childElm, listeners) {\n    function remove$$1 () {\n      if (--remove$$1.listeners === 0) {\n        removeNode(childElm);\n      }\n    }\n    remove$$1.listeners = listeners;\n    return remove$$1\n  }\n\n  function removeNode (el) {\n    var parent = nodeOps.parentNode(el);\n    // element may have already been removed due to v-html / v-text\n    if (isDef(parent)) {\n      nodeOps.removeChild(parent, el);\n    }\n  }\n\n  var inPre = 0;\n  function createElm (vnode, insertedVnodeQueue, parentElm, refElm, nested) {\n    vnode.isRootInsert = !nested; // for transition enter check\n    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {\n      return\n    }\n\n    var data = vnode.data;\n    var children = vnode.children;\n    var tag = vnode.tag;\n    if (isDef(tag)) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (data && data.pre) {\n          inPre++;\n        }\n        if (\n          !inPre &&\n          !vnode.ns &&\n          !(config.ignoredElements.length && config.ignoredElements.indexOf(tag) > -1) &&\n          config.isUnknownElement(tag)\n        ) {\n          warn(\n            'Unknown custom element: <' + tag + '> - did you ' +\n            'register the component correctly? For recursive components, ' +\n            'make sure to provide the \"name\" option.',\n            vnode.context\n          );\n        }\n      }\n      vnode.elm = vnode.ns\n        ? nodeOps.createElementNS(vnode.ns, tag)\n        : nodeOps.createElement(tag, vnode);\n      setScope(vnode);\n\n      /* istanbul ignore if */\n      {\n        createChildren(vnode, children, insertedVnodeQueue);\n        if (isDef(data)) {\n          invokeCreateHooks(vnode, insertedVnodeQueue);\n        }\n        insert(parentElm, vnode.elm, refElm);\n      }\n\n      if (process.env.NODE_ENV !== 'production' && data && data.pre) {\n        inPre--;\n      }\n    } else if (isTrue(vnode.isComment)) {\n      vnode.elm = nodeOps.createComment(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    } else {\n      vnode.elm = nodeOps.createTextNode(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    }\n  }\n\n  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i = vnode.data;\n    if (isDef(i)) {\n      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;\n      if (isDef(i = i.hook) && isDef(i = i.init)) {\n        i(vnode, false /* hydrating */, parentElm, refElm);\n      }\n      // after calling the init hook, if the vnode is a child component\n      // it should've created a child instance and mounted it. the child\n      // component also has set the placeholder vnode's elm.\n      // in that case we can just return the element and be done.\n      if (isDef(vnode.componentInstance)) {\n        initComponent(vnode, insertedVnodeQueue);\n        if (isTrue(isReactivated)) {\n          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);\n        }\n        return true\n      }\n    }\n  }\n\n  function initComponent (vnode, insertedVnodeQueue) {\n    if (isDef(vnode.data.pendingInsert)) {\n      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);\n      vnode.data.pendingInsert = null;\n    }\n    vnode.elm = vnode.componentInstance.$el;\n    if (isPatchable(vnode)) {\n      invokeCreateHooks(vnode, insertedVnodeQueue);\n      setScope(vnode);\n    } else {\n      // empty component root.\n      // skip all element-related modules except for ref (#3455)\n      registerRef(vnode);\n      // make sure to invoke the insert hook\n      insertedVnodeQueue.push(vnode);\n    }\n  }\n\n  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i;\n    // hack for #4339: a reactivated component with inner transition\n    // does not trigger because the inner node's created hooks are not called\n    // again. It's not ideal to involve module-specific logic in here but\n    // there doesn't seem to be a better way to do it.\n    var innerNode = vnode;\n    while (innerNode.componentInstance) {\n      innerNode = innerNode.componentInstance._vnode;\n      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {\n        for (i = 0; i < cbs.activate.length; ++i) {\n          cbs.activate[i](emptyNode, innerNode);\n        }\n        insertedVnodeQueue.push(innerNode);\n        break\n      }\n    }\n    // unlike a newly created component,\n    // a reactivated keep-alive component doesn't insert itself\n    insert(parentElm, vnode.elm, refElm);\n  }\n\n  function insert (parent, elm, ref$$1) {\n    if (isDef(parent)) {\n      if (isDef(ref$$1)) {\n        if (ref$$1.parentNode === parent) {\n          nodeOps.insertBefore(parent, elm, ref$$1);\n        }\n      } else {\n        nodeOps.appendChild(parent, elm);\n      }\n    }\n  }\n\n  function createChildren (vnode, children, insertedVnodeQueue) {\n    if (Array.isArray(children)) {\n      for (var i = 0; i < children.length; ++i) {\n        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true);\n      }\n    } else if (isPrimitive(vnode.text)) {\n      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(vnode.text));\n    }\n  }\n\n  function isPatchable (vnode) {\n    while (vnode.componentInstance) {\n      vnode = vnode.componentInstance._vnode;\n    }\n    return isDef(vnode.tag)\n  }\n\n  function invokeCreateHooks (vnode, insertedVnodeQueue) {\n    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n      cbs.create[i$1](emptyNode, vnode);\n    }\n    i = vnode.data.hook; // Reuse variable\n    if (isDef(i)) {\n      if (isDef(i.create)) { i.create(emptyNode, vnode); }\n      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }\n    }\n  }\n\n  // set scope id attribute for scoped CSS.\n  // this is implemented as a special case to avoid the overhead\n  // of going through the normal attribute patching process.\n  function setScope (vnode) {\n    var i;\n    var ancestor = vnode;\n    while (ancestor) {\n      if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {\n        nodeOps.setAttribute(vnode.elm, i, '');\n      }\n      ancestor = ancestor.parent;\n    }\n    // for slot content they should also get the scopeId from the host instance.\n    if (isDef(i = activeInstance) &&\n      i !== vnode.context &&\n      isDef(i = i.$options._scopeId)\n    ) {\n      nodeOps.setAttribute(vnode.elm, i, '');\n    }\n  }\n\n  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm);\n    }\n  }\n\n  function invokeDestroyHook (vnode) {\n    var i, j;\n    var data = vnode.data;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }\n      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }\n    }\n    if (isDef(i = vnode.children)) {\n      for (j = 0; j < vnode.children.length; ++j) {\n        invokeDestroyHook(vnode.children[j]);\n      }\n    }\n  }\n\n  function removeVnodes (parentElm, vnodes, startIdx, endIdx) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      var ch = vnodes[startIdx];\n      if (isDef(ch)) {\n        if (isDef(ch.tag)) {\n          removeAndInvokeRemoveHook(ch);\n          invokeDestroyHook(ch);\n        } else { // Text node\n          removeNode(ch.elm);\n        }\n      }\n    }\n  }\n\n  function removeAndInvokeRemoveHook (vnode, rm) {\n    if (isDef(rm) || isDef(vnode.data)) {\n      var i;\n      var listeners = cbs.remove.length + 1;\n      if (isDef(rm)) {\n        // we have a recursively passed down rm callback\n        // increase the listeners count\n        rm.listeners += listeners;\n      } else {\n        // directly removing\n        rm = createRmCb(vnode.elm, listeners);\n      }\n      // recursively invoke hooks on child component root node\n      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {\n        removeAndInvokeRemoveHook(i, rm);\n      }\n      for (i = 0; i < cbs.remove.length; ++i) {\n        cbs.remove[i](vnode, rm);\n      }\n      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {\n        i(vnode, rm);\n      } else {\n        rm();\n      }\n    } else {\n      removeNode(vnode.elm);\n    }\n  }\n\n  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n    var oldStartIdx = 0;\n    var newStartIdx = 0;\n    var oldEndIdx = oldCh.length - 1;\n    var oldStartVnode = oldCh[0];\n    var oldEndVnode = oldCh[oldEndIdx];\n    var newEndIdx = newCh.length - 1;\n    var newStartVnode = newCh[0];\n    var newEndVnode = newCh[newEndIdx];\n    var oldKeyToIdx, idxInOld, elmToMove, refElm;\n\n    // removeOnly is a special flag used only by <transition-group>\n    // to ensure removed elements stay in correct relative positions\n    // during leaving transitions\n    var canMove = !removeOnly;\n\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n      if (isUndef(oldStartVnode)) {\n        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\n      } else if (isUndef(oldEndVnode)) {\n        oldEndVnode = oldCh[--oldEndIdx];\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);\n        oldStartVnode = oldCh[++oldStartIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n        oldStartVnode = oldCh[++oldStartIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);\n        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }\n        idxInOld = isDef(newStartVnode.key)\n          ? oldKeyToIdx[newStartVnode.key]\n          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);\n        if (isUndef(idxInOld)) { // New element\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);\n        } else {\n          elmToMove = oldCh[idxInOld];\n          /* istanbul ignore if */\n          if (process.env.NODE_ENV !== 'production' && !elmToMove) {\n            warn(\n              'It seems there are duplicate keys that is causing an update error. ' +\n              'Make sure each v-for item has a unique key.'\n            );\n          }\n          if (sameVnode(elmToMove, newStartVnode)) {\n            patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);\n            oldCh[idxInOld] = undefined;\n            canMove && nodeOps.insertBefore(parentElm, elmToMove.elm, oldStartVnode.elm);\n          } else {\n            // same key but different element. treat as new element\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm);\n          }\n        }\n        newStartVnode = newCh[++newStartIdx];\n      }\n    }\n    if (oldStartIdx > oldEndIdx) {\n      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;\n      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n    } else if (newStartIdx > newEndIdx) {\n      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n    }\n  }\n\n  function findIdxInOld (node, oldCh, start, end) {\n    for (var i = start; i < end; i++) {\n      var c = oldCh[i];\n      if (isDef(c) && sameVnode(node, c)) { return i }\n    }\n  }\n\n  function patchVnode (oldVnode, vnode, insertedVnodeQueue, removeOnly) {\n    if (oldVnode === vnode) {\n      return\n    }\n\n    var elm = vnode.elm = oldVnode.elm;\n\n    if (isTrue(oldVnode.isAsyncPlaceholder)) {\n      if (isDef(vnode.asyncFactory.resolved)) {\n        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);\n      } else {\n        vnode.isAsyncPlaceholder = true;\n      }\n      return\n    }\n\n    // reuse element for static trees.\n    // note we only do this if the vnode is cloned -\n    // if the new node is not cloned it means the render functions have been\n    // reset by the hot-reload-api and we need to do a proper re-render.\n    if (isTrue(vnode.isStatic) &&\n      isTrue(oldVnode.isStatic) &&\n      vnode.key === oldVnode.key &&\n      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))\n    ) {\n      vnode.componentInstance = oldVnode.componentInstance;\n      return\n    }\n\n    var i;\n    var data = vnode.data;\n    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {\n      i(oldVnode, vnode);\n    }\n\n    var oldCh = oldVnode.children;\n    var ch = vnode.children;\n    if (isDef(data) && isPatchable(vnode)) {\n      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }\n      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }\n    }\n    if (isUndef(vnode.text)) {\n      if (isDef(oldCh) && isDef(ch)) {\n        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }\n      } else if (isDef(ch)) {\n        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }\n        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n      } else if (isDef(oldCh)) {\n        removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n      } else if (isDef(oldVnode.text)) {\n        nodeOps.setTextContent(elm, '');\n      }\n    } else if (oldVnode.text !== vnode.text) {\n      nodeOps.setTextContent(elm, vnode.text);\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }\n    }\n  }\n\n  function invokeInsertHook (vnode, queue, initial) {\n    // delay insert hooks for component root nodes, invoke them after the\n    // element is really inserted\n    if (isTrue(initial) && isDef(vnode.parent)) {\n      vnode.parent.data.pendingInsert = queue;\n    } else {\n      for (var i = 0; i < queue.length; ++i) {\n        queue[i].data.hook.insert(queue[i]);\n      }\n    }\n  }\n\n  var bailed = false;\n  // list of modules that can skip create hook during hydration because they\n  // are already rendered on the client or has no need for initialization\n  var isRenderedModule = makeMap('attrs,style,class,staticClass,staticStyle,key');\n\n  // Note: this is a browser-only function so we can assume elms are DOM nodes.\n  function hydrate (elm, vnode, insertedVnodeQueue) {\n    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {\n      vnode.elm = elm;\n      vnode.isAsyncPlaceholder = true;\n      return true\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      if (!assertNodeMatch(elm, vnode)) {\n        return false\n      }\n    }\n    vnode.elm = elm;\n    var tag = vnode.tag;\n    var data = vnode.data;\n    var children = vnode.children;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }\n      if (isDef(i = vnode.componentInstance)) {\n        // child component. it should have hydrated its own tree.\n        initComponent(vnode, insertedVnodeQueue);\n        return true\n      }\n    }\n    if (isDef(tag)) {\n      if (isDef(children)) {\n        // empty element, allow client to pick up and populate children\n        if (!elm.hasChildNodes()) {\n          createChildren(vnode, children, insertedVnodeQueue);\n        } else {\n          // v-html and domProps: innerHTML\n          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {\n            if (i !== elm.innerHTML) {\n              /* istanbul ignore if */\n              if (process.env.NODE_ENV !== 'production' &&\n                typeof console !== 'undefined' &&\n                !bailed\n              ) {\n                bailed = true;\n                console.warn('Parent: ', elm);\n                console.warn('server innerHTML: ', i);\n                console.warn('client innerHTML: ', elm.innerHTML);\n              }\n              return false\n            }\n          } else {\n            // iterate and compare children lists\n            var childrenMatch = true;\n            var childNode = elm.firstChild;\n            for (var i$1 = 0; i$1 < children.length; i$1++) {\n              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue)) {\n                childrenMatch = false;\n                break\n              }\n              childNode = childNode.nextSibling;\n            }\n            // if childNode is not null, it means the actual childNodes list is\n            // longer than the virtual children list.\n            if (!childrenMatch || childNode) {\n              /* istanbul ignore if */\n              if (process.env.NODE_ENV !== 'production' &&\n                typeof console !== 'undefined' &&\n                !bailed\n              ) {\n                bailed = true;\n                console.warn('Parent: ', elm);\n                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);\n              }\n              return false\n            }\n          }\n        }\n      }\n      if (isDef(data)) {\n        for (var key in data) {\n          if (!isRenderedModule(key)) {\n            invokeCreateHooks(vnode, insertedVnodeQueue);\n            break\n          }\n        }\n      }\n    } else if (elm.data !== vnode.text) {\n      elm.data = vnode.text;\n    }\n    return true\n  }\n\n  function assertNodeMatch (node, vnode) {\n    if (isDef(vnode.tag)) {\n      return (\n        vnode.tag.indexOf('vue-component') === 0 ||\n        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())\n      )\n    } else {\n      return node.nodeType === (vnode.isComment ? 8 : 3)\n    }\n  }\n\n  return function patch (oldVnode, vnode, hydrating, removeOnly, parentElm, refElm) {\n    if (isUndef(vnode)) {\n      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }\n      return\n    }\n\n    var isInitialPatch = false;\n    var insertedVnodeQueue = [];\n\n    if (isUndef(oldVnode)) {\n      // empty mount (likely as component), create new root element\n      isInitialPatch = true;\n      createElm(vnode, insertedVnodeQueue, parentElm, refElm);\n    } else {\n      var isRealElement = isDef(oldVnode.nodeType);\n      if (!isRealElement && sameVnode(oldVnode, vnode)) {\n        // patch existing root node\n        patchVnode(oldVnode, vnode, insertedVnodeQueue, removeOnly);\n      } else {\n        if (isRealElement) {\n          // mounting to a real element\n          // check if this is server-rendered content and if we can perform\n          // a successful hydration.\n          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {\n            oldVnode.removeAttribute(SSR_ATTR);\n            hydrating = true;\n          }\n          if (isTrue(hydrating)) {\n            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\n              invokeInsertHook(vnode, insertedVnodeQueue, true);\n              return oldVnode\n            } else if (process.env.NODE_ENV !== 'production') {\n              warn(\n                'The client-side rendered virtual DOM tree is not matching ' +\n                'server-rendered content. This is likely caused by incorrect ' +\n                'HTML markup, for example nesting block-level elements inside ' +\n                '<p>, or missing <tbody>. Bailing hydration and performing ' +\n                'full client-side render.'\n              );\n            }\n          }\n          // either not server-rendered, or hydration failed.\n          // create an empty node and replace it\n          oldVnode = emptyNodeAt(oldVnode);\n        }\n        // replacing existing element\n        var oldElm = oldVnode.elm;\n        var parentElm$1 = nodeOps.parentNode(oldElm);\n        createElm(\n          vnode,\n          insertedVnodeQueue,\n          // extremely rare edge case: do not insert if old element is in a\n          // leaving transition. Only happens when combining transition +\n          // keep-alive + HOCs. (#4590)\n          oldElm._leaveCb ? null : parentElm$1,\n          nodeOps.nextSibling(oldElm)\n        );\n\n        if (isDef(vnode.parent)) {\n          // component root element replaced.\n          // update parent placeholder node element, recursively\n          var ancestor = vnode.parent;\n          var patchable = isPatchable(vnode);\n          while (ancestor) {\n            for (var i = 0; i < cbs.destroy.length; ++i) {\n              cbs.destroy[i](ancestor);\n            }\n            ancestor.elm = vnode.elm;\n            if (patchable) {\n              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n                cbs.create[i$1](emptyNode, ancestor);\n              }\n              // #6513\n              // invoke insert hooks that may have been merged by create hooks.\n              // e.g. for directives that uses the \"inserted\" hook.\n              var insert = ancestor.data.hook.insert;\n              if (insert.merged) {\n                // start at index 1 to avoid re-invoking component mounted hook\n                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {\n                  insert.fns[i$2]();\n                }\n              }\n            }\n            ancestor = ancestor.parent;\n          }\n        }\n\n        if (isDef(parentElm$1)) {\n          removeVnodes(parentElm$1, [oldVnode], 0, 0);\n        } else if (isDef(oldVnode.tag)) {\n          invokeDestroyHook(oldVnode);\n        }\n      }\n    }\n\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\n    return vnode.elm\n  }\n}\n\n/*  */\n\nvar directives = {\n  create: updateDirectives,\n  update: updateDirectives,\n  destroy: function unbindDirectives (vnode) {\n    updateDirectives(vnode, emptyNode);\n  }\n};\n\nfunction updateDirectives (oldVnode, vnode) {\n  if (oldVnode.data.directives || vnode.data.directives) {\n    _update(oldVnode, vnode);\n  }\n}\n\nfunction _update (oldVnode, vnode) {\n  var isCreate = oldVnode === emptyNode;\n  var isDestroy = vnode === emptyNode;\n  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);\n  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);\n\n  var dirsWithInsert = [];\n  var dirsWithPostpatch = [];\n\n  var key, oldDir, dir;\n  for (key in newDirs) {\n    oldDir = oldDirs[key];\n    dir = newDirs[key];\n    if (!oldDir) {\n      // new directive, bind\n      callHook$1(dir, 'bind', vnode, oldVnode);\n      if (dir.def && dir.def.inserted) {\n        dirsWithInsert.push(dir);\n      }\n    } else {\n      // existing directive, update\n      dir.oldValue = oldDir.value;\n      callHook$1(dir, 'update', vnode, oldVnode);\n      if (dir.def && dir.def.componentUpdated) {\n        dirsWithPostpatch.push(dir);\n      }\n    }\n  }\n\n  if (dirsWithInsert.length) {\n    var callInsert = function () {\n      for (var i = 0; i < dirsWithInsert.length; i++) {\n        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);\n      }\n    };\n    if (isCreate) {\n      mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', callInsert);\n    } else {\n      callInsert();\n    }\n  }\n\n  if (dirsWithPostpatch.length) {\n    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'postpatch', function () {\n      for (var i = 0; i < dirsWithPostpatch.length; i++) {\n        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);\n      }\n    });\n  }\n\n  if (!isCreate) {\n    for (key in oldDirs) {\n      if (!newDirs[key]) {\n        // no longer present, unbind\n        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);\n      }\n    }\n  }\n}\n\nvar emptyModifiers = Object.create(null);\n\nfunction normalizeDirectives$1 (\n  dirs,\n  vm\n) {\n  var res = Object.create(null);\n  if (!dirs) {\n    return res\n  }\n  var i, dir;\n  for (i = 0; i < dirs.length; i++) {\n    dir = dirs[i];\n    if (!dir.modifiers) {\n      dir.modifiers = emptyModifiers;\n    }\n    res[getRawDirName(dir)] = dir;\n    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);\n  }\n  return res\n}\n\nfunction getRawDirName (dir) {\n  return dir.rawName || ((dir.name) + \".\" + (Object.keys(dir.modifiers || {}).join('.')))\n}\n\nfunction callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {\n  var fn = dir.def && dir.def[hook];\n  if (fn) {\n    try {\n      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);\n    } catch (e) {\n      handleError(e, vnode.context, (\"directive \" + (dir.name) + \" \" + hook + \" hook\"));\n    }\n  }\n}\n\nvar baseModules = [\n  ref,\n  directives\n];\n\n/*  */\n\nfunction updateAttrs (oldVnode, vnode) {\n  var opts = vnode.componentOptions;\n  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {\n    return\n  }\n  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {\n    return\n  }\n  var key, cur, old;\n  var elm = vnode.elm;\n  var oldAttrs = oldVnode.data.attrs || {};\n  var attrs = vnode.data.attrs || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(attrs.__ob__)) {\n    attrs = vnode.data.attrs = extend({}, attrs);\n  }\n\n  for (key in attrs) {\n    cur = attrs[key];\n    old = oldAttrs[key];\n    if (old !== cur) {\n      setAttr(elm, key, cur);\n    }\n  }\n  // #4391: in IE9, setting type can reset value for input[type=radio]\n  /* istanbul ignore if */\n  if (isIE9 && attrs.value !== oldAttrs.value) {\n    setAttr(elm, 'value', attrs.value);\n  }\n  for (key in oldAttrs) {\n    if (isUndef(attrs[key])) {\n      if (isXlink(key)) {\n        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));\n      } else if (!isEnumeratedAttr(key)) {\n        elm.removeAttribute(key);\n      }\n    }\n  }\n}\n\nfunction setAttr (el, key, value) {\n  if (isBooleanAttr(key)) {\n    // set attribute for blank value\n    // e.g. <option disabled>Select one</option>\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      // technically allowfullscreen is a boolean attribute for <iframe>,\n      // but Flash expects a value of \"true\" when used on <embed> tag\n      value = key === 'allowfullscreen' && el.tagName === 'EMBED'\n        ? 'true'\n        : key;\n      el.setAttribute(key, value);\n    }\n  } else if (isEnumeratedAttr(key)) {\n    el.setAttribute(key, isFalsyAttrValue(value) || value === 'false' ? 'false' : 'true');\n  } else if (isXlink(key)) {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttributeNS(xlinkNS, getXlinkProp(key));\n    } else {\n      el.setAttributeNS(xlinkNS, key, value);\n    }\n  } else {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      el.setAttribute(key, value);\n    }\n  }\n}\n\nvar attrs = {\n  create: updateAttrs,\n  update: updateAttrs\n};\n\n/*  */\n\nfunction updateClass (oldVnode, vnode) {\n  var el = vnode.elm;\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n  if (\n    isUndef(data.staticClass) &&\n    isUndef(data.class) && (\n      isUndef(oldData) || (\n        isUndef(oldData.staticClass) &&\n        isUndef(oldData.class)\n      )\n    )\n  ) {\n    return\n  }\n\n  var cls = genClassForVnode(vnode);\n\n  // handle transition classes\n  var transitionClass = el._transitionClasses;\n  if (isDef(transitionClass)) {\n    cls = concat(cls, stringifyClass(transitionClass));\n  }\n\n  // set the class\n  if (cls !== el._prevClass) {\n    el.setAttribute('class', cls);\n    el._prevClass = cls;\n  }\n}\n\nvar klass = {\n  create: updateClass,\n  update: updateClass\n};\n\n/*  */\n\nvar validDivisionCharRE = /[\\w).+\\-_$\\]]/;\n\nfunction parseFilters (exp) {\n  var inSingle = false;\n  var inDouble = false;\n  var inTemplateString = false;\n  var inRegex = false;\n  var curly = 0;\n  var square = 0;\n  var paren = 0;\n  var lastFilterIndex = 0;\n  var c, prev, i, expression, filters;\n\n  for (i = 0; i < exp.length; i++) {\n    prev = c;\n    c = exp.charCodeAt(i);\n    if (inSingle) {\n      if (c === 0x27 && prev !== 0x5C) { inSingle = false; }\n    } else if (inDouble) {\n      if (c === 0x22 && prev !== 0x5C) { inDouble = false; }\n    } else if (inTemplateString) {\n      if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }\n    } else if (inRegex) {\n      if (c === 0x2f && prev !== 0x5C) { inRegex = false; }\n    } else if (\n      c === 0x7C && // pipe\n      exp.charCodeAt(i + 1) !== 0x7C &&\n      exp.charCodeAt(i - 1) !== 0x7C &&\n      !curly && !square && !paren\n    ) {\n      if (expression === undefined) {\n        // first filter, end of expression\n        lastFilterIndex = i + 1;\n        expression = exp.slice(0, i).trim();\n      } else {\n        pushFilter();\n      }\n    } else {\n      switch (c) {\n        case 0x22: inDouble = true; break         // \"\n        case 0x27: inSingle = true; break         // '\n        case 0x60: inTemplateString = true; break // `\n        case 0x28: paren++; break                 // (\n        case 0x29: paren--; break                 // )\n        case 0x5B: square++; break                // [\n        case 0x5D: square--; break                // ]\n        case 0x7B: curly++; break                 // {\n        case 0x7D: curly--; break                 // }\n      }\n      if (c === 0x2f) { // /\n        var j = i - 1;\n        var p = (void 0);\n        // find first non-whitespace prev char\n        for (; j >= 0; j--) {\n          p = exp.charAt(j);\n          if (p !== ' ') { break }\n        }\n        if (!p || !validDivisionCharRE.test(p)) {\n          inRegex = true;\n        }\n      }\n    }\n  }\n\n  if (expression === undefined) {\n    expression = exp.slice(0, i).trim();\n  } else if (lastFilterIndex !== 0) {\n    pushFilter();\n  }\n\n  function pushFilter () {\n    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());\n    lastFilterIndex = i + 1;\n  }\n\n  if (filters) {\n    for (i = 0; i < filters.length; i++) {\n      expression = wrapFilter(expression, filters[i]);\n    }\n  }\n\n  return expression\n}\n\nfunction wrapFilter (exp, filter) {\n  var i = filter.indexOf('(');\n  if (i < 0) {\n    // _f: resolveFilter\n    return (\"_f(\\\"\" + filter + \"\\\")(\" + exp + \")\")\n  } else {\n    var name = filter.slice(0, i);\n    var args = filter.slice(i + 1);\n    return (\"_f(\\\"\" + name + \"\\\")(\" + exp + \",\" + args)\n  }\n}\n\n/*  */\n\nfunction baseWarn (msg) {\n  console.error((\"[Vue compiler]: \" + msg));\n}\n\nfunction pluckModuleFunction (\n  modules,\n  key\n) {\n  return modules\n    ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })\n    : []\n}\n\nfunction addProp (el, name, value) {\n  (el.props || (el.props = [])).push({ name: name, value: value });\n}\n\nfunction addAttr (el, name, value) {\n  (el.attrs || (el.attrs = [])).push({ name: name, value: value });\n}\n\nfunction addDirective (\n  el,\n  name,\n  rawName,\n  value,\n  arg,\n  modifiers\n) {\n  (el.directives || (el.directives = [])).push({ name: name, rawName: rawName, value: value, arg: arg, modifiers: modifiers });\n}\n\nfunction addHandler (\n  el,\n  name,\n  value,\n  modifiers,\n  important,\n  warn\n) {\n  // warn prevent and passive modifier\n  /* istanbul ignore if */\n  if (\n    process.env.NODE_ENV !== 'production' && warn &&\n    modifiers && modifiers.prevent && modifiers.passive\n  ) {\n    warn(\n      'passive and prevent can\\'t be used together. ' +\n      'Passive handler can\\'t prevent default event.'\n    );\n  }\n  // check capture modifier\n  if (modifiers && modifiers.capture) {\n    delete modifiers.capture;\n    name = '!' + name; // mark the event as captured\n  }\n  if (modifiers && modifiers.once) {\n    delete modifiers.once;\n    name = '~' + name; // mark the event as once\n  }\n  /* istanbul ignore if */\n  if (modifiers && modifiers.passive) {\n    delete modifiers.passive;\n    name = '&' + name; // mark the event as passive\n  }\n  var events;\n  if (modifiers && modifiers.native) {\n    delete modifiers.native;\n    events = el.nativeEvents || (el.nativeEvents = {});\n  } else {\n    events = el.events || (el.events = {});\n  }\n  var newHandler = { value: value, modifiers: modifiers };\n  var handlers = events[name];\n  /* istanbul ignore if */\n  if (Array.isArray(handlers)) {\n    important ? handlers.unshift(newHandler) : handlers.push(newHandler);\n  } else if (handlers) {\n    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];\n  } else {\n    events[name] = newHandler;\n  }\n}\n\nfunction getBindingAttr (\n  el,\n  name,\n  getStatic\n) {\n  var dynamicValue =\n    getAndRemoveAttr(el, ':' + name) ||\n    getAndRemoveAttr(el, 'v-bind:' + name);\n  if (dynamicValue != null) {\n    return parseFilters(dynamicValue)\n  } else if (getStatic !== false) {\n    var staticValue = getAndRemoveAttr(el, name);\n    if (staticValue != null) {\n      return JSON.stringify(staticValue)\n    }\n  }\n}\n\nfunction getAndRemoveAttr (el, name) {\n  var val;\n  if ((val = el.attrsMap[name]) != null) {\n    var list = el.attrsList;\n    for (var i = 0, l = list.length; i < l; i++) {\n      if (list[i].name === name) {\n        list.splice(i, 1);\n        break\n      }\n    }\n  }\n  return val\n}\n\n/*  */\n\n/**\n * Cross-platform code generation for component v-model\n */\nfunction genComponentModel (\n  el,\n  value,\n  modifiers\n) {\n  var ref = modifiers || {};\n  var number = ref.number;\n  var trim = ref.trim;\n\n  var baseValueExpression = '$$v';\n  var valueExpression = baseValueExpression;\n  if (trim) {\n    valueExpression =\n      \"(typeof \" + baseValueExpression + \" === 'string'\" +\n        \"? \" + baseValueExpression + \".trim()\" +\n        \": \" + baseValueExpression + \")\";\n  }\n  if (number) {\n    valueExpression = \"_n(\" + valueExpression + \")\";\n  }\n  var assignment = genAssignmentCode(value, valueExpression);\n\n  el.model = {\n    value: (\"(\" + value + \")\"),\n    expression: (\"\\\"\" + value + \"\\\"\"),\n    callback: (\"function (\" + baseValueExpression + \") {\" + assignment + \"}\")\n  };\n}\n\n/**\n * Cross-platform codegen helper for generating v-model value assignment code.\n */\nfunction genAssignmentCode (\n  value,\n  assignment\n) {\n  var modelRs = parseModel(value);\n  if (modelRs.idx === null) {\n    return (value + \"=\" + assignment)\n  } else {\n    return (\"$set(\" + (modelRs.exp) + \", \" + (modelRs.idx) + \", \" + assignment + \")\")\n  }\n}\n\n/**\n * parse directive model to do the array update transform. a[idx] = val => $$a.splice($$idx, 1, val)\n *\n * for loop possible cases:\n *\n * - test\n * - test[idx]\n * - test[test1[idx]]\n * - test[\"a\"][idx]\n * - xxx.test[a[a].test1[idx]]\n * - test.xxx.a[\"asa\"][test1[idx]]\n *\n */\n\nvar len;\nvar str;\nvar chr;\nvar index$1;\nvar expressionPos;\nvar expressionEndPos;\n\nfunction parseModel (val) {\n  str = val;\n  len = str.length;\n  index$1 = expressionPos = expressionEndPos = 0;\n\n  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {\n    return {\n      exp: val,\n      idx: null\n    }\n  }\n\n  while (!eof()) {\n    chr = next();\n    /* istanbul ignore if */\n    if (isStringStart(chr)) {\n      parseString(chr);\n    } else if (chr === 0x5B) {\n      parseBracket(chr);\n    }\n  }\n\n  return {\n    exp: val.substring(0, expressionPos),\n    idx: val.substring(expressionPos + 1, expressionEndPos)\n  }\n}\n\nfunction next () {\n  return str.charCodeAt(++index$1)\n}\n\nfunction eof () {\n  return index$1 >= len\n}\n\nfunction isStringStart (chr) {\n  return chr === 0x22 || chr === 0x27\n}\n\nfunction parseBracket (chr) {\n  var inBracket = 1;\n  expressionPos = index$1;\n  while (!eof()) {\n    chr = next();\n    if (isStringStart(chr)) {\n      parseString(chr);\n      continue\n    }\n    if (chr === 0x5B) { inBracket++; }\n    if (chr === 0x5D) { inBracket--; }\n    if (inBracket === 0) {\n      expressionEndPos = index$1;\n      break\n    }\n  }\n}\n\nfunction parseString (chr) {\n  var stringQuote = chr;\n  while (!eof()) {\n    chr = next();\n    if (chr === stringQuote) {\n      break\n    }\n  }\n}\n\n/*  */\n\nvar warn$1;\n\n// in some cases, the event used has to be determined at runtime\n// so we used some reserved tokens during compile.\nvar RANGE_TOKEN = '__r';\nvar CHECKBOX_RADIO_TOKEN = '__c';\n\nfunction model (\n  el,\n  dir,\n  _warn\n) {\n  warn$1 = _warn;\n  var value = dir.value;\n  var modifiers = dir.modifiers;\n  var tag = el.tag;\n  var type = el.attrsMap.type;\n\n  if (process.env.NODE_ENV !== 'production') {\n    var dynamicType = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];\n    if (tag === 'input' && dynamicType) {\n      warn$1(\n        \"<input :type=\\\"\" + dynamicType + \"\\\" v-model=\\\"\" + value + \"\\\">:\\n\" +\n        \"v-model does not support dynamic input types. Use v-if branches instead.\"\n      );\n    }\n    // inputs with type=\"file\" are read only and setting the input's\n    // value will throw an error.\n    if (tag === 'input' && type === 'file') {\n      warn$1(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\" type=\\\"file\\\">:\\n\" +\n        \"File inputs are read only. Use a v-on:change listener instead.\"\n      );\n    }\n  }\n\n  if (el.component) {\n    genComponentModel(el, value, modifiers);\n    // component v-model doesn't need extra runtime\n    return false\n  } else if (tag === 'select') {\n    genSelect(el, value, modifiers);\n  } else if (tag === 'input' && type === 'checkbox') {\n    genCheckboxModel(el, value, modifiers);\n  } else if (tag === 'input' && type === 'radio') {\n    genRadioModel(el, value, modifiers);\n  } else if (tag === 'input' || tag === 'textarea') {\n    genDefaultModel(el, value, modifiers);\n  } else if (!config.isReservedTag(tag)) {\n    genComponentModel(el, value, modifiers);\n    // component v-model doesn't need extra runtime\n    return false\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn$1(\n      \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n      \"v-model is not supported on this element type. \" +\n      'If you are working with contenteditable, it\\'s recommended to ' +\n      'wrap a library dedicated for that purpose inside a custom component.'\n    );\n  }\n\n  // ensure runtime directive metadata\n  return true\n}\n\nfunction genCheckboxModel (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';\n  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';\n  addProp(el, 'checked',\n    \"Array.isArray(\" + value + \")\" +\n      \"?_i(\" + value + \",\" + valueBinding + \")>-1\" + (\n        trueValueBinding === 'true'\n          ? (\":(\" + value + \")\")\n          : (\":_q(\" + value + \",\" + trueValueBinding + \")\")\n      )\n  );\n  addHandler(el, CHECKBOX_RADIO_TOKEN,\n    \"var $$a=\" + value + \",\" +\n        '$$el=$event.target,' +\n        \"$$c=$$el.checked?(\" + trueValueBinding + \"):(\" + falseValueBinding + \");\" +\n    'if(Array.isArray($$a)){' +\n      \"var $$v=\" + (number ? '_n(' + valueBinding + ')' : valueBinding) + \",\" +\n          '$$i=_i($$a,$$v);' +\n      \"if($$el.checked){$$i<0&&(\" + value + \"=$$a.concat([$$v]))}\" +\n      \"else{$$i>-1&&(\" + value + \"=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}\" +\n    \"}else{\" + (genAssignmentCode(value, '$$c')) + \"}\",\n    null, true\n  );\n}\n\nfunction genRadioModel (\n    el,\n    value,\n    modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  valueBinding = number ? (\"_n(\" + valueBinding + \")\") : valueBinding;\n  addProp(el, 'checked', (\"_q(\" + value + \",\" + valueBinding + \")\"));\n  addHandler(el, CHECKBOX_RADIO_TOKEN, genAssignmentCode(value, valueBinding), null, true);\n}\n\nfunction genSelect (\n    el,\n    value,\n    modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var selectedVal = \"Array.prototype.filter\" +\n    \".call($event.target.options,function(o){return o.selected})\" +\n    \".map(function(o){var val = \\\"_value\\\" in o ? o._value : o.value;\" +\n    \"return \" + (number ? '_n(val)' : 'val') + \"})\";\n\n  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';\n  var code = \"var $$selectedVal = \" + selectedVal + \";\";\n  code = code + \" \" + (genAssignmentCode(value, assignment));\n  addHandler(el, 'change', code, null, true);\n}\n\nfunction genDefaultModel (\n  el,\n  value,\n  modifiers\n) {\n  var type = el.attrsMap.type;\n  var ref = modifiers || {};\n  var lazy = ref.lazy;\n  var number = ref.number;\n  var trim = ref.trim;\n  var needCompositionGuard = !lazy && type !== 'range';\n  var event = lazy\n    ? 'change'\n    : type === 'range'\n      ? RANGE_TOKEN\n      : 'input';\n\n  var valueExpression = '$event.target.value';\n  if (trim) {\n    valueExpression = \"$event.target.value.trim()\";\n  }\n  if (number) {\n    valueExpression = \"_n(\" + valueExpression + \")\";\n  }\n\n  var code = genAssignmentCode(value, valueExpression);\n  if (needCompositionGuard) {\n    code = \"if($event.target.composing)return;\" + code;\n  }\n\n  addProp(el, 'value', (\"(\" + value + \")\"));\n  addHandler(el, event, code, null, true);\n  if (trim || number) {\n    addHandler(el, 'blur', '$forceUpdate()');\n  }\n}\n\n/*  */\n\n// normalize v-model event tokens that can only be determined at runtime.\n// it's important to place the event as the first in the array because\n// the whole point is ensuring the v-model callback gets called before\n// user-attached handlers.\nfunction normalizeEvents (on) {\n  var event;\n  /* istanbul ignore if */\n  if (isDef(on[RANGE_TOKEN])) {\n    // IE input[type=range] only supports `change` event\n    event = isIE ? 'change' : 'input';\n    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);\n    delete on[RANGE_TOKEN];\n  }\n  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {\n    // Chrome fires microtasks in between click/change, leads to #4521\n    event = isChrome ? 'click' : 'change';\n    on[event] = [].concat(on[CHECKBOX_RADIO_TOKEN], on[event] || []);\n    delete on[CHECKBOX_RADIO_TOKEN];\n  }\n}\n\nvar target$1;\n\nfunction add$1 (\n  event,\n  handler,\n  once$$1,\n  capture,\n  passive\n) {\n  if (once$$1) {\n    var oldHandler = handler;\n    var _target = target$1; // save current target element in closure\n    handler = function (ev) {\n      var res = arguments.length === 1\n        ? oldHandler(ev)\n        : oldHandler.apply(null, arguments);\n      if (res !== null) {\n        remove$2(event, handler, capture, _target);\n      }\n    };\n  }\n  target$1.addEventListener(\n    event,\n    handler,\n    supportsPassive\n      ? { capture: capture, passive: passive }\n      : capture\n  );\n}\n\nfunction remove$2 (\n  event,\n  handler,\n  capture,\n  _target\n) {\n  (_target || target$1).removeEventListener(event, handler, capture);\n}\n\nfunction updateDOMListeners (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {\n    return\n  }\n  var on = vnode.data.on || {};\n  var oldOn = oldVnode.data.on || {};\n  target$1 = vnode.elm;\n  normalizeEvents(on);\n  updateListeners(on, oldOn, add$1, remove$2, vnode.context);\n}\n\nvar events = {\n  create: updateDOMListeners,\n  update: updateDOMListeners\n};\n\n/*  */\n\nfunction updateDOMProps (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {\n    return\n  }\n  var key, cur;\n  var elm = vnode.elm;\n  var oldProps = oldVnode.data.domProps || {};\n  var props = vnode.data.domProps || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(props.__ob__)) {\n    props = vnode.data.domProps = extend({}, props);\n  }\n\n  for (key in oldProps) {\n    if (isUndef(props[key])) {\n      elm[key] = '';\n    }\n  }\n  for (key in props) {\n    cur = props[key];\n    // ignore children if the node has textContent or innerHTML,\n    // as these will throw away existing DOM nodes and cause removal errors\n    // on subsequent patches (#3360)\n    if (key === 'textContent' || key === 'innerHTML') {\n      if (vnode.children) { vnode.children.length = 0; }\n      if (cur === oldProps[key]) { continue }\n    }\n\n    if (key === 'value') {\n      // store value as _value as well since\n      // non-string values will be stringified\n      elm._value = cur;\n      // avoid resetting cursor position when value is the same\n      var strCur = isUndef(cur) ? '' : String(cur);\n      if (shouldUpdateValue(elm, vnode, strCur)) {\n        elm.value = strCur;\n      }\n    } else {\n      elm[key] = cur;\n    }\n  }\n}\n\n// check platforms/web/util/attrs.js acceptValue\n\n\nfunction shouldUpdateValue (\n  elm,\n  vnode,\n  checkVal\n) {\n  return (!elm.composing && (\n    vnode.tag === 'option' ||\n    isDirty(elm, checkVal) ||\n    isInputChanged(elm, checkVal)\n  ))\n}\n\nfunction isDirty (elm, checkVal) {\n  // return true when textbox (.number and .trim) loses focus and its value is\n  // not equal to the updated value\n  var notInFocus = true;\n  // #6157\n  // work around IE bug when accessing document.activeElement in an iframe\n  try { notInFocus = document.activeElement !== elm; } catch (e) {}\n  return notInFocus && elm.value !== checkVal\n}\n\nfunction isInputChanged (elm, newVal) {\n  var value = elm.value;\n  var modifiers = elm._vModifiers; // injected by v-model runtime\n  if (isDef(modifiers) && modifiers.number) {\n    return toNumber(value) !== toNumber(newVal)\n  }\n  if (isDef(modifiers) && modifiers.trim) {\n    return value.trim() !== newVal.trim()\n  }\n  return value !== newVal\n}\n\nvar domProps = {\n  create: updateDOMProps,\n  update: updateDOMProps\n};\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// merge static and dynamic style data on the same vnode\nfunction normalizeStyleData (data) {\n  var style = normalizeStyleBinding(data.style);\n  // static style is pre-processed into an object during compilation\n  // and is always a fresh object, so it's safe to merge into it\n  return data.staticStyle\n    ? extend(data.staticStyle, style)\n    : style\n}\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/**\n * parent component style should be after child's\n * so that parent component's style could override it\n */\nfunction getStyle (vnode, checkChild) {\n  var res = {};\n  var styleData;\n\n  if (checkChild) {\n    var childNode = vnode;\n    while (childNode.componentInstance) {\n      childNode = childNode.componentInstance._vnode;\n      if (childNode.data && (styleData = normalizeStyleData(childNode.data))) {\n        extend(res, styleData);\n      }\n    }\n  }\n\n  if ((styleData = normalizeStyleData(vnode.data))) {\n    extend(res, styleData);\n  }\n\n  var parentNode = vnode;\n  while ((parentNode = parentNode.parent)) {\n    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {\n      extend(res, styleData);\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar cssVarRE = /^--/;\nvar importantRE = /\\s*!important$/;\nvar setProp = function (el, name, val) {\n  /* istanbul ignore if */\n  if (cssVarRE.test(name)) {\n    el.style.setProperty(name, val);\n  } else if (importantRE.test(val)) {\n    el.style.setProperty(name, val.replace(importantRE, ''), 'important');\n  } else {\n    var normalizedName = normalize(name);\n    if (Array.isArray(val)) {\n      // Support values array created by autoprefixer, e.g.\n      // {display: [\"-webkit-box\", \"-ms-flexbox\", \"flex\"]}\n      // Set them one by one, and the browser will only set those it can recognize\n      for (var i = 0, len = val.length; i < len; i++) {\n        el.style[normalizedName] = val[i];\n      }\n    } else {\n      el.style[normalizedName] = val;\n    }\n  }\n};\n\nvar vendorNames = ['Webkit', 'Moz', 'ms'];\n\nvar emptyStyle;\nvar normalize = cached(function (prop) {\n  emptyStyle = emptyStyle || document.createElement('div').style;\n  prop = camelize(prop);\n  if (prop !== 'filter' && (prop in emptyStyle)) {\n    return prop\n  }\n  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);\n  for (var i = 0; i < vendorNames.length; i++) {\n    var name = vendorNames[i] + capName;\n    if (name in emptyStyle) {\n      return name\n    }\n  }\n});\n\nfunction updateStyle (oldVnode, vnode) {\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n\n  if (isUndef(data.staticStyle) && isUndef(data.style) &&\n    isUndef(oldData.staticStyle) && isUndef(oldData.style)\n  ) {\n    return\n  }\n\n  var cur, name;\n  var el = vnode.elm;\n  var oldStaticStyle = oldData.staticStyle;\n  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};\n\n  // if static style exists, stylebinding already merged into it when doing normalizeStyleData\n  var oldStyle = oldStaticStyle || oldStyleBinding;\n\n  var style = normalizeStyleBinding(vnode.data.style) || {};\n\n  // store normalized style under a different key for next diff\n  // make sure to clone it if it's reactive, since the user likely wants\n  // to mutate it.\n  vnode.data.normalizedStyle = isDef(style.__ob__)\n    ? extend({}, style)\n    : style;\n\n  var newStyle = getStyle(vnode, true);\n\n  for (name in oldStyle) {\n    if (isUndef(newStyle[name])) {\n      setProp(el, name, '');\n    }\n  }\n  for (name in newStyle) {\n    cur = newStyle[name];\n    if (cur !== oldStyle[name]) {\n      // ie9 setting to null has no effect, must use empty string\n      setProp(el, name, cur == null ? '' : cur);\n    }\n  }\n}\n\nvar style = {\n  create: updateStyle,\n  update: updateStyle\n};\n\n/*  */\n\n/**\n * Add class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction addClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.add(c); });\n    } else {\n      el.classList.add(cls);\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\n      el.setAttribute('class', (cur + cls).trim());\n    }\n  }\n}\n\n/**\n * Remove class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction removeClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(/\\s+/).forEach(function (c) { return el.classList.remove(c); });\n    } else {\n      el.classList.remove(cls);\n    }\n    if (!el.classList.length) {\n      el.removeAttribute('class');\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    var tar = ' ' + cls + ' ';\n    while (cur.indexOf(tar) >= 0) {\n      cur = cur.replace(tar, ' ');\n    }\n    cur = cur.trim();\n    if (cur) {\n      el.setAttribute('class', cur);\n    } else {\n      el.removeAttribute('class');\n    }\n  }\n}\n\n/*  */\n\nfunction resolveTransition (def$$1) {\n  if (!def$$1) {\n    return\n  }\n  /* istanbul ignore else */\n  if (typeof def$$1 === 'object') {\n    var res = {};\n    if (def$$1.css !== false) {\n      extend(res, autoCssTransition(def$$1.name || 'v'));\n    }\n    extend(res, def$$1);\n    return res\n  } else if (typeof def$$1 === 'string') {\n    return autoCssTransition(def$$1)\n  }\n}\n\nvar autoCssTransition = cached(function (name) {\n  return {\n    enterClass: (name + \"-enter\"),\n    enterToClass: (name + \"-enter-to\"),\n    enterActiveClass: (name + \"-enter-active\"),\n    leaveClass: (name + \"-leave\"),\n    leaveToClass: (name + \"-leave-to\"),\n    leaveActiveClass: (name + \"-leave-active\")\n  }\n});\n\nvar hasTransition = inBrowser && !isIE9;\nvar TRANSITION = 'transition';\nvar ANIMATION = 'animation';\n\n// Transition property/event sniffing\nvar transitionProp = 'transition';\nvar transitionEndEvent = 'transitionend';\nvar animationProp = 'animation';\nvar animationEndEvent = 'animationend';\nif (hasTransition) {\n  /* istanbul ignore if */\n  if (window.ontransitionend === undefined &&\n    window.onwebkittransitionend !== undefined\n  ) {\n    transitionProp = 'WebkitTransition';\n    transitionEndEvent = 'webkitTransitionEnd';\n  }\n  if (window.onanimationend === undefined &&\n    window.onwebkitanimationend !== undefined\n  ) {\n    animationProp = 'WebkitAnimation';\n    animationEndEvent = 'webkitAnimationEnd';\n  }\n}\n\n// binding to window is necessary to make hot reload work in IE in strict mode\nvar raf = inBrowser && window.requestAnimationFrame\n  ? window.requestAnimationFrame.bind(window)\n  : setTimeout;\n\nfunction nextFrame (fn) {\n  raf(function () {\n    raf(fn);\n  });\n}\n\nfunction addTransitionClass (el, cls) {\n  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);\n  if (transitionClasses.indexOf(cls) < 0) {\n    transitionClasses.push(cls);\n    addClass(el, cls);\n  }\n}\n\nfunction removeTransitionClass (el, cls) {\n  if (el._transitionClasses) {\n    remove(el._transitionClasses, cls);\n  }\n  removeClass(el, cls);\n}\n\nfunction whenTransitionEnds (\n  el,\n  expectedType,\n  cb\n) {\n  var ref = getTransitionInfo(el, expectedType);\n  var type = ref.type;\n  var timeout = ref.timeout;\n  var propCount = ref.propCount;\n  if (!type) { return cb() }\n  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;\n  var ended = 0;\n  var end = function () {\n    el.removeEventListener(event, onEnd);\n    cb();\n  };\n  var onEnd = function (e) {\n    if (e.target === el) {\n      if (++ended >= propCount) {\n        end();\n      }\n    }\n  };\n  setTimeout(function () {\n    if (ended < propCount) {\n      end();\n    }\n  }, timeout + 1);\n  el.addEventListener(event, onEnd);\n}\n\nvar transformRE = /\\b(transform|all)(,|$)/;\n\nfunction getTransitionInfo (el, expectedType) {\n  var styles = window.getComputedStyle(el);\n  var transitionDelays = styles[transitionProp + 'Delay'].split(', ');\n  var transitionDurations = styles[transitionProp + 'Duration'].split(', ');\n  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);\n  var animationDelays = styles[animationProp + 'Delay'].split(', ');\n  var animationDurations = styles[animationProp + 'Duration'].split(', ');\n  var animationTimeout = getTimeout(animationDelays, animationDurations);\n\n  var type;\n  var timeout = 0;\n  var propCount = 0;\n  /* istanbul ignore if */\n  if (expectedType === TRANSITION) {\n    if (transitionTimeout > 0) {\n      type = TRANSITION;\n      timeout = transitionTimeout;\n      propCount = transitionDurations.length;\n    }\n  } else if (expectedType === ANIMATION) {\n    if (animationTimeout > 0) {\n      type = ANIMATION;\n      timeout = animationTimeout;\n      propCount = animationDurations.length;\n    }\n  } else {\n    timeout = Math.max(transitionTimeout, animationTimeout);\n    type = timeout > 0\n      ? transitionTimeout > animationTimeout\n        ? TRANSITION\n        : ANIMATION\n      : null;\n    propCount = type\n      ? type === TRANSITION\n        ? transitionDurations.length\n        : animationDurations.length\n      : 0;\n  }\n  var hasTransform =\n    type === TRANSITION &&\n    transformRE.test(styles[transitionProp + 'Property']);\n  return {\n    type: type,\n    timeout: timeout,\n    propCount: propCount,\n    hasTransform: hasTransform\n  }\n}\n\nfunction getTimeout (delays, durations) {\n  /* istanbul ignore next */\n  while (delays.length < durations.length) {\n    delays = delays.concat(delays);\n  }\n\n  return Math.max.apply(null, durations.map(function (d, i) {\n    return toMs(d) + toMs(delays[i])\n  }))\n}\n\nfunction toMs (s) {\n  return Number(s.slice(0, -1)) * 1000\n}\n\n/*  */\n\nfunction enter (vnode, toggleDisplay) {\n  var el = vnode.elm;\n\n  // call leave callback now\n  if (isDef(el._leaveCb)) {\n    el._leaveCb.cancelled = true;\n    el._leaveCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data)) {\n    return\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._enterCb) || el.nodeType !== 1) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var enterClass = data.enterClass;\n  var enterToClass = data.enterToClass;\n  var enterActiveClass = data.enterActiveClass;\n  var appearClass = data.appearClass;\n  var appearToClass = data.appearToClass;\n  var appearActiveClass = data.appearActiveClass;\n  var beforeEnter = data.beforeEnter;\n  var enter = data.enter;\n  var afterEnter = data.afterEnter;\n  var enterCancelled = data.enterCancelled;\n  var beforeAppear = data.beforeAppear;\n  var appear = data.appear;\n  var afterAppear = data.afterAppear;\n  var appearCancelled = data.appearCancelled;\n  var duration = data.duration;\n\n  // activeInstance will always be the <transition> component managing this\n  // transition. One edge case to check is when the <transition> is placed\n  // as the root node of a child component. In that case we need to check\n  // <transition>'s parent for appear check.\n  var context = activeInstance;\n  var transitionNode = activeInstance.$vnode;\n  while (transitionNode && transitionNode.parent) {\n    transitionNode = transitionNode.parent;\n    context = transitionNode.context;\n  }\n\n  var isAppear = !context._isMounted || !vnode.isRootInsert;\n\n  if (isAppear && !appear && appear !== '') {\n    return\n  }\n\n  var startClass = isAppear && appearClass\n    ? appearClass\n    : enterClass;\n  var activeClass = isAppear && appearActiveClass\n    ? appearActiveClass\n    : enterActiveClass;\n  var toClass = isAppear && appearToClass\n    ? appearToClass\n    : enterToClass;\n\n  var beforeEnterHook = isAppear\n    ? (beforeAppear || beforeEnter)\n    : beforeEnter;\n  var enterHook = isAppear\n    ? (typeof appear === 'function' ? appear : enter)\n    : enter;\n  var afterEnterHook = isAppear\n    ? (afterAppear || afterEnter)\n    : afterEnter;\n  var enterCancelledHook = isAppear\n    ? (appearCancelled || enterCancelled)\n    : enterCancelled;\n\n  var explicitEnterDuration = toNumber(\n    isObject(duration)\n      ? duration.enter\n      : duration\n  );\n\n  if (process.env.NODE_ENV !== 'production' && explicitEnterDuration != null) {\n    checkDuration(explicitEnterDuration, 'enter', vnode);\n  }\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(enterHook);\n\n  var cb = el._enterCb = once(function () {\n    if (expectsCSS) {\n      removeTransitionClass(el, toClass);\n      removeTransitionClass(el, activeClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, startClass);\n      }\n      enterCancelledHook && enterCancelledHook(el);\n    } else {\n      afterEnterHook && afterEnterHook(el);\n    }\n    el._enterCb = null;\n  });\n\n  if (!vnode.data.show) {\n    // remove pending leave element on enter by injecting an insert hook\n    mergeVNodeHook(vnode.data.hook || (vnode.data.hook = {}), 'insert', function () {\n      var parent = el.parentNode;\n      var pendingNode = parent && parent._pending && parent._pending[vnode.key];\n      if (pendingNode &&\n        pendingNode.tag === vnode.tag &&\n        pendingNode.elm._leaveCb\n      ) {\n        pendingNode.elm._leaveCb();\n      }\n      enterHook && enterHook(el, cb);\n    });\n  }\n\n  // start enter transition\n  beforeEnterHook && beforeEnterHook(el);\n  if (expectsCSS) {\n    addTransitionClass(el, startClass);\n    addTransitionClass(el, activeClass);\n    nextFrame(function () {\n      addTransitionClass(el, toClass);\n      removeTransitionClass(el, startClass);\n      if (!cb.cancelled && !userWantsControl) {\n        if (isValidDuration(explicitEnterDuration)) {\n          setTimeout(cb, explicitEnterDuration);\n        } else {\n          whenTransitionEnds(el, type, cb);\n        }\n      }\n    });\n  }\n\n  if (vnode.data.show) {\n    toggleDisplay && toggleDisplay();\n    enterHook && enterHook(el, cb);\n  }\n\n  if (!expectsCSS && !userWantsControl) {\n    cb();\n  }\n}\n\nfunction leave (vnode, rm) {\n  var el = vnode.elm;\n\n  // call enter callback now\n  if (isDef(el._enterCb)) {\n    el._enterCb.cancelled = true;\n    el._enterCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data)) {\n    return rm()\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._leaveCb) || el.nodeType !== 1) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var leaveClass = data.leaveClass;\n  var leaveToClass = data.leaveToClass;\n  var leaveActiveClass = data.leaveActiveClass;\n  var beforeLeave = data.beforeLeave;\n  var leave = data.leave;\n  var afterLeave = data.afterLeave;\n  var leaveCancelled = data.leaveCancelled;\n  var delayLeave = data.delayLeave;\n  var duration = data.duration;\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(leave);\n\n  var explicitLeaveDuration = toNumber(\n    isObject(duration)\n      ? duration.leave\n      : duration\n  );\n\n  if (process.env.NODE_ENV !== 'production' && isDef(explicitLeaveDuration)) {\n    checkDuration(explicitLeaveDuration, 'leave', vnode);\n  }\n\n  var cb = el._leaveCb = once(function () {\n    if (el.parentNode && el.parentNode._pending) {\n      el.parentNode._pending[vnode.key] = null;\n    }\n    if (expectsCSS) {\n      removeTransitionClass(el, leaveToClass);\n      removeTransitionClass(el, leaveActiveClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, leaveClass);\n      }\n      leaveCancelled && leaveCancelled(el);\n    } else {\n      rm();\n      afterLeave && afterLeave(el);\n    }\n    el._leaveCb = null;\n  });\n\n  if (delayLeave) {\n    delayLeave(performLeave);\n  } else {\n    performLeave();\n  }\n\n  function performLeave () {\n    // the delayed leave may have already been cancelled\n    if (cb.cancelled) {\n      return\n    }\n    // record leaving element\n    if (!vnode.data.show) {\n      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;\n    }\n    beforeLeave && beforeLeave(el);\n    if (expectsCSS) {\n      addTransitionClass(el, leaveClass);\n      addTransitionClass(el, leaveActiveClass);\n      nextFrame(function () {\n        addTransitionClass(el, leaveToClass);\n        removeTransitionClass(el, leaveClass);\n        if (!cb.cancelled && !userWantsControl) {\n          if (isValidDuration(explicitLeaveDuration)) {\n            setTimeout(cb, explicitLeaveDuration);\n          } else {\n            whenTransitionEnds(el, type, cb);\n          }\n        }\n      });\n    }\n    leave && leave(el, cb);\n    if (!expectsCSS && !userWantsControl) {\n      cb();\n    }\n  }\n}\n\n// only used in dev mode\nfunction checkDuration (val, name, vnode) {\n  if (typeof val !== 'number') {\n    warn(\n      \"<transition> explicit \" + name + \" duration is not a valid number - \" +\n      \"got \" + (JSON.stringify(val)) + \".\",\n      vnode.context\n    );\n  } else if (isNaN(val)) {\n    warn(\n      \"<transition> explicit \" + name + \" duration is NaN - \" +\n      'the duration expression might be incorrect.',\n      vnode.context\n    );\n  }\n}\n\nfunction isValidDuration (val) {\n  return typeof val === 'number' && !isNaN(val)\n}\n\n/**\n * Normalize a transition hook's argument length. The hook may be:\n * - a merged hook (invoker) with the original in .fns\n * - a wrapped component method (check ._length)\n * - a plain function (.length)\n */\nfunction getHookArgumentsLength (fn) {\n  if (isUndef(fn)) {\n    return false\n  }\n  var invokerFns = fn.fns;\n  if (isDef(invokerFns)) {\n    // invoker\n    return getHookArgumentsLength(\n      Array.isArray(invokerFns)\n        ? invokerFns[0]\n        : invokerFns\n    )\n  } else {\n    return (fn._length || fn.length) > 1\n  }\n}\n\nfunction _enter (_, vnode) {\n  if (vnode.data.show !== true) {\n    enter(vnode);\n  }\n}\n\nvar transition = inBrowser ? {\n  create: _enter,\n  activate: _enter,\n  remove: function remove$$1 (vnode, rm) {\n    /* istanbul ignore else */\n    if (vnode.data.show !== true) {\n      leave(vnode, rm);\n    } else {\n      rm();\n    }\n  }\n} : {};\n\nvar platformModules = [\n  attrs,\n  klass,\n  events,\n  domProps,\n  style,\n  transition\n];\n\n/*  */\n\n// the directive module should be applied last, after all\n// built-in modules have been applied.\nvar modules = platformModules.concat(baseModules);\n\nvar patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });\n\n/**\n * Not type checking this file because flow doesn't like attaching\n * properties to Elements.\n */\n\n/* istanbul ignore if */\nif (isIE9) {\n  // http://www.matts411.com/post/internet-explorer-9-oninput/\n  document.addEventListener('selectionchange', function () {\n    var el = document.activeElement;\n    if (el && el.vmodel) {\n      trigger(el, 'input');\n    }\n  });\n}\n\nvar model$1 = {\n  inserted: function inserted (el, binding, vnode) {\n    if (vnode.tag === 'select') {\n      setSelected(el, binding, vnode.context);\n      el._vOptions = [].map.call(el.options, getValue);\n    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {\n      el._vModifiers = binding.modifiers;\n      if (!binding.modifiers.lazy) {\n        // Safari < 10.2 & UIWebView doesn't fire compositionend when\n        // switching focus before confirming composition choice\n        // this also fixes the issue where some browsers e.g. iOS Chrome\n        // fires \"change\" instead of \"input\" on autocomplete.\n        el.addEventListener('change', onCompositionEnd);\n        if (!isAndroid) {\n          el.addEventListener('compositionstart', onCompositionStart);\n          el.addEventListener('compositionend', onCompositionEnd);\n        }\n        /* istanbul ignore if */\n        if (isIE9) {\n          el.vmodel = true;\n        }\n      }\n    }\n  },\n  componentUpdated: function componentUpdated (el, binding, vnode) {\n    if (vnode.tag === 'select') {\n      setSelected(el, binding, vnode.context);\n      // in case the options rendered by v-for have changed,\n      // it's possible that the value is out-of-sync with the rendered options.\n      // detect such cases and filter out values that no longer has a matching\n      // option in the DOM.\n      var prevOptions = el._vOptions;\n      var curOptions = el._vOptions = [].map.call(el.options, getValue);\n      if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {\n        // trigger change event if\n        // no matching option found for at least one value\n        var needReset = el.multiple\n          ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })\n          : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);\n        if (needReset) {\n          trigger(el, 'change');\n        }\n      }\n    }\n  }\n};\n\nfunction setSelected (el, binding, vm) {\n  actuallySetSelected(el, binding, vm);\n  /* istanbul ignore if */\n  if (isIE || isEdge) {\n    setTimeout(function () {\n      actuallySetSelected(el, binding, vm);\n    }, 0);\n  }\n}\n\nfunction actuallySetSelected (el, binding, vm) {\n  var value = binding.value;\n  var isMultiple = el.multiple;\n  if (isMultiple && !Array.isArray(value)) {\n    process.env.NODE_ENV !== 'production' && warn(\n      \"<select multiple v-model=\\\"\" + (binding.expression) + \"\\\"> \" +\n      \"expects an Array value for its binding, but got \" + (Object.prototype.toString.call(value).slice(8, -1)),\n      vm\n    );\n    return\n  }\n  var selected, option;\n  for (var i = 0, l = el.options.length; i < l; i++) {\n    option = el.options[i];\n    if (isMultiple) {\n      selected = looseIndexOf(value, getValue(option)) > -1;\n      if (option.selected !== selected) {\n        option.selected = selected;\n      }\n    } else {\n      if (looseEqual(getValue(option), value)) {\n        if (el.selectedIndex !== i) {\n          el.selectedIndex = i;\n        }\n        return\n      }\n    }\n  }\n  if (!isMultiple) {\n    el.selectedIndex = -1;\n  }\n}\n\nfunction hasNoMatchingOption (value, options) {\n  return options.every(function (o) { return !looseEqual(o, value); })\n}\n\nfunction getValue (option) {\n  return '_value' in option\n    ? option._value\n    : option.value\n}\n\nfunction onCompositionStart (e) {\n  e.target.composing = true;\n}\n\nfunction onCompositionEnd (e) {\n  // prevent triggering an input event for no reason\n  if (!e.target.composing) { return }\n  e.target.composing = false;\n  trigger(e.target, 'input');\n}\n\nfunction trigger (el, type) {\n  var e = document.createEvent('HTMLEvents');\n  e.initEvent(type, true, true);\n  el.dispatchEvent(e);\n}\n\n/*  */\n\n// recursively search for possible transition defined inside the component root\nfunction locateNode (vnode) {\n  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)\n    ? locateNode(vnode.componentInstance._vnode)\n    : vnode\n}\n\nvar show = {\n  bind: function bind (el, ref, vnode) {\n    var value = ref.value;\n\n    vnode = locateNode(vnode);\n    var transition$$1 = vnode.data && vnode.data.transition;\n    var originalDisplay = el.__vOriginalDisplay =\n      el.style.display === 'none' ? '' : el.style.display;\n    if (value && transition$$1) {\n      vnode.data.show = true;\n      enter(vnode, function () {\n        el.style.display = originalDisplay;\n      });\n    } else {\n      el.style.display = value ? originalDisplay : 'none';\n    }\n  },\n\n  update: function update (el, ref, vnode) {\n    var value = ref.value;\n    var oldValue = ref.oldValue;\n\n    /* istanbul ignore if */\n    if (value === oldValue) { return }\n    vnode = locateNode(vnode);\n    var transition$$1 = vnode.data && vnode.data.transition;\n    if (transition$$1) {\n      vnode.data.show = true;\n      if (value) {\n        enter(vnode, function () {\n          el.style.display = el.__vOriginalDisplay;\n        });\n      } else {\n        leave(vnode, function () {\n          el.style.display = 'none';\n        });\n      }\n    } else {\n      el.style.display = value ? el.__vOriginalDisplay : 'none';\n    }\n  },\n\n  unbind: function unbind (\n    el,\n    binding,\n    vnode,\n    oldVnode,\n    isDestroy\n  ) {\n    if (!isDestroy) {\n      el.style.display = el.__vOriginalDisplay;\n    }\n  }\n};\n\nvar platformDirectives = {\n  model: model$1,\n  show: show\n};\n\n/*  */\n\n// Provides transition support for a single element/component.\n// supports transition mode (out-in / in-out)\n\nvar transitionProps = {\n  name: String,\n  appear: Boolean,\n  css: Boolean,\n  mode: String,\n  type: String,\n  enterClass: String,\n  leaveClass: String,\n  enterToClass: String,\n  leaveToClass: String,\n  enterActiveClass: String,\n  leaveActiveClass: String,\n  appearClass: String,\n  appearActiveClass: String,\n  appearToClass: String,\n  duration: [Number, String, Object]\n};\n\n// in case the child is also an abstract component, e.g. <keep-alive>\n// we want to recursively retrieve the real component to be rendered\nfunction getRealChild (vnode) {\n  var compOptions = vnode && vnode.componentOptions;\n  if (compOptions && compOptions.Ctor.options.abstract) {\n    return getRealChild(getFirstComponentChild(compOptions.children))\n  } else {\n    return vnode\n  }\n}\n\nfunction extractTransitionData (comp) {\n  var data = {};\n  var options = comp.$options;\n  // props\n  for (var key in options.propsData) {\n    data[key] = comp[key];\n  }\n  // events.\n  // extract listeners and pass them directly to the transition methods\n  var listeners = options._parentListeners;\n  for (var key$1 in listeners) {\n    data[camelize(key$1)] = listeners[key$1];\n  }\n  return data\n}\n\nfunction placeholder (h, rawChild) {\n  if (/\\d-keep-alive$/.test(rawChild.tag)) {\n    return h('keep-alive', {\n      props: rawChild.componentOptions.propsData\n    })\n  }\n}\n\nfunction hasParentTransition (vnode) {\n  while ((vnode = vnode.parent)) {\n    if (vnode.data.transition) {\n      return true\n    }\n  }\n}\n\nfunction isSameChild (child, oldChild) {\n  return oldChild.key === child.key && oldChild.tag === child.tag\n}\n\nvar Transition = {\n  name: 'transition',\n  props: transitionProps,\n  abstract: true,\n\n  render: function render (h) {\n    var this$1 = this;\n\n    var children = this.$options._renderChildren;\n    if (!children) {\n      return\n    }\n\n    // filter out text nodes (possible whitespaces)\n    children = children.filter(function (c) { return c.tag || isAsyncPlaceholder(c); });\n    /* istanbul ignore if */\n    if (!children.length) {\n      return\n    }\n\n    // warn multiple elements\n    if (process.env.NODE_ENV !== 'production' && children.length > 1) {\n      warn(\n        '<transition> can only be used on a single element. Use ' +\n        '<transition-group> for lists.',\n        this.$parent\n      );\n    }\n\n    var mode = this.mode;\n\n    // warn invalid mode\n    if (process.env.NODE_ENV !== 'production' &&\n      mode && mode !== 'in-out' && mode !== 'out-in'\n    ) {\n      warn(\n        'invalid <transition> mode: ' + mode,\n        this.$parent\n      );\n    }\n\n    var rawChild = children[0];\n\n    // if this is a component root node and the component's\n    // parent container node also has transition, skip.\n    if (hasParentTransition(this.$vnode)) {\n      return rawChild\n    }\n\n    // apply transition data to child\n    // use getRealChild() to ignore abstract components e.g. keep-alive\n    var child = getRealChild(rawChild);\n    /* istanbul ignore if */\n    if (!child) {\n      return rawChild\n    }\n\n    if (this._leaving) {\n      return placeholder(h, rawChild)\n    }\n\n    // ensure a key that is unique to the vnode type and to this transition\n    // component instance. This key will be used to remove pending leaving nodes\n    // during entering.\n    var id = \"__transition-\" + (this._uid) + \"-\";\n    child.key = child.key == null\n      ? child.isComment\n        ? id + 'comment'\n        : id + child.tag\n      : isPrimitive(child.key)\n        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)\n        : child.key;\n\n    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);\n    var oldRawChild = this._vnode;\n    var oldChild = getRealChild(oldRawChild);\n\n    // mark v-show\n    // so that the transition module can hand over the control to the directive\n    if (child.data.directives && child.data.directives.some(function (d) { return d.name === 'show'; })) {\n      child.data.show = true;\n    }\n\n    if (\n      oldChild &&\n      oldChild.data &&\n      !isSameChild(child, oldChild) &&\n      !isAsyncPlaceholder(oldChild)\n    ) {\n      // replace old child transition data with fresh one\n      // important for dynamic transitions!\n      var oldData = oldChild && (oldChild.data.transition = extend({}, data));\n      // handle transition mode\n      if (mode === 'out-in') {\n        // return placeholder node and queue update when leave finishes\n        this._leaving = true;\n        mergeVNodeHook(oldData, 'afterLeave', function () {\n          this$1._leaving = false;\n          this$1.$forceUpdate();\n        });\n        return placeholder(h, rawChild)\n      } else if (mode === 'in-out') {\n        if (isAsyncPlaceholder(child)) {\n          return oldRawChild\n        }\n        var delayedLeave;\n        var performLeave = function () { delayedLeave(); };\n        mergeVNodeHook(data, 'afterEnter', performLeave);\n        mergeVNodeHook(data, 'enterCancelled', performLeave);\n        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });\n      }\n    }\n\n    return rawChild\n  }\n};\n\n/*  */\n\n// Provides transition support for list items.\n// supports move transitions using the FLIP technique.\n\n// Because the vdom's children update algorithm is \"unstable\" - i.e.\n// it doesn't guarantee the relative positioning of removed elements,\n// we force transition-group to update its children into two passes:\n// in the first pass, we remove all nodes that need to be removed,\n// triggering their leaving transition; in the second pass, we insert/move\n// into the final desired state. This way in the second pass removed\n// nodes will remain where they should be.\n\nvar props = extend({\n  tag: String,\n  moveClass: String\n}, transitionProps);\n\ndelete props.mode;\n\nvar TransitionGroup = {\n  props: props,\n\n  render: function render (h) {\n    var tag = this.tag || this.$vnode.data.tag || 'span';\n    var map = Object.create(null);\n    var prevChildren = this.prevChildren = this.children;\n    var rawChildren = this.$slots.default || [];\n    var children = this.children = [];\n    var transitionData = extractTransitionData(this);\n\n    for (var i = 0; i < rawChildren.length; i++) {\n      var c = rawChildren[i];\n      if (c.tag) {\n        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {\n          children.push(c);\n          map[c.key] = c\n          ;(c.data || (c.data = {})).transition = transitionData;\n        } else if (process.env.NODE_ENV !== 'production') {\n          var opts = c.componentOptions;\n          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;\n          warn((\"<transition-group> children must be keyed: <\" + name + \">\"));\n        }\n      }\n    }\n\n    if (prevChildren) {\n      var kept = [];\n      var removed = [];\n      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {\n        var c$1 = prevChildren[i$1];\n        c$1.data.transition = transitionData;\n        c$1.data.pos = c$1.elm.getBoundingClientRect();\n        if (map[c$1.key]) {\n          kept.push(c$1);\n        } else {\n          removed.push(c$1);\n        }\n      }\n      this.kept = h(tag, null, kept);\n      this.removed = removed;\n    }\n\n    return h(tag, null, children)\n  },\n\n  beforeUpdate: function beforeUpdate () {\n    // force removing pass\n    this.__patch__(\n      this._vnode,\n      this.kept,\n      false, // hydrating\n      true // removeOnly (!important, avoids unnecessary moves)\n    );\n    this._vnode = this.kept;\n  },\n\n  updated: function updated () {\n    var children = this.prevChildren;\n    var moveClass = this.moveClass || ((this.name || 'v') + '-move');\n    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {\n      return\n    }\n\n    // we divide the work into three loops to avoid mixing DOM reads and writes\n    // in each iteration - which helps prevent layout thrashing.\n    children.forEach(callPendingCbs);\n    children.forEach(recordPosition);\n    children.forEach(applyTranslation);\n\n    // force reflow to put everything in position\n    var body = document.body;\n    var f = body.offsetHeight; // eslint-disable-line\n\n    children.forEach(function (c) {\n      if (c.data.moved) {\n        var el = c.elm;\n        var s = el.style;\n        addTransitionClass(el, moveClass);\n        s.transform = s.WebkitTransform = s.transitionDuration = '';\n        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {\n          if (!e || /transform$/.test(e.propertyName)) {\n            el.removeEventListener(transitionEndEvent, cb);\n            el._moveCb = null;\n            removeTransitionClass(el, moveClass);\n          }\n        });\n      }\n    });\n  },\n\n  methods: {\n    hasMove: function hasMove (el, moveClass) {\n      /* istanbul ignore if */\n      if (!hasTransition) {\n        return false\n      }\n      /* istanbul ignore if */\n      if (this._hasMove) {\n        return this._hasMove\n      }\n      // Detect whether an element with the move class applied has\n      // CSS transitions. Since the element may be inside an entering\n      // transition at this very moment, we make a clone of it and remove\n      // all other transition classes applied to ensure only the move class\n      // is applied.\n      var clone = el.cloneNode();\n      if (el._transitionClasses) {\n        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });\n      }\n      addClass(clone, moveClass);\n      clone.style.display = 'none';\n      this.$el.appendChild(clone);\n      var info = getTransitionInfo(clone);\n      this.$el.removeChild(clone);\n      return (this._hasMove = info.hasTransform)\n    }\n  }\n};\n\nfunction callPendingCbs (c) {\n  /* istanbul ignore if */\n  if (c.elm._moveCb) {\n    c.elm._moveCb();\n  }\n  /* istanbul ignore if */\n  if (c.elm._enterCb) {\n    c.elm._enterCb();\n  }\n}\n\nfunction recordPosition (c) {\n  c.data.newPos = c.elm.getBoundingClientRect();\n}\n\nfunction applyTranslation (c) {\n  var oldPos = c.data.pos;\n  var newPos = c.data.newPos;\n  var dx = oldPos.left - newPos.left;\n  var dy = oldPos.top - newPos.top;\n  if (dx || dy) {\n    c.data.moved = true;\n    var s = c.elm.style;\n    s.transform = s.WebkitTransform = \"translate(\" + dx + \"px,\" + dy + \"px)\";\n    s.transitionDuration = '0s';\n  }\n}\n\nvar platformComponents = {\n  Transition: Transition,\n  TransitionGroup: TransitionGroup\n};\n\n/*  */\n\n// install platform specific utils\nVue$3.config.mustUseProp = mustUseProp;\nVue$3.config.isReservedTag = isReservedTag;\nVue$3.config.isReservedAttr = isReservedAttr;\nVue$3.config.getTagNamespace = getTagNamespace;\nVue$3.config.isUnknownElement = isUnknownElement;\n\n// install platform runtime directives & components\nextend(Vue$3.options.directives, platformDirectives);\nextend(Vue$3.options.components, platformComponents);\n\n// install platform patch function\nVue$3.prototype.__patch__ = inBrowser ? patch : noop;\n\n// public mount method\nVue$3.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && inBrowser ? query(el) : undefined;\n  return mountComponent(this, el, hydrating)\n};\n\n// devtools global hook\n/* istanbul ignore next */\nsetTimeout(function () {\n  if (config.devtools) {\n    if (devtools) {\n      devtools.emit('init', Vue$3);\n    } else if (process.env.NODE_ENV !== 'production' && isChrome) {\n      console[console.info ? 'info' : 'log'](\n        'Download the Vue Devtools extension for a better development experience:\\n' +\n        'https://github.com/vuejs/vue-devtools'\n      );\n    }\n  }\n  if (process.env.NODE_ENV !== 'production' &&\n    config.productionTip !== false &&\n    inBrowser && typeof console !== 'undefined'\n  ) {\n    console[console.info ? 'info' : 'log'](\n      \"You are running Vue in development mode.\\n\" +\n      \"Make sure to turn on production mode when deploying for production.\\n\" +\n      \"See more tips at https://vuejs.org/guide/deployment.html\"\n    );\n  }\n}, 0);\n\n/*  */\n\n// check whether current browser encodes a char inside attribute values\nfunction shouldDecode (content, encoded) {\n  var div = document.createElement('div');\n  div.innerHTML = \"<div a=\\\"\" + content + \"\\\"/>\";\n  return div.innerHTML.indexOf(encoded) > 0\n}\n\n// #3663\n// IE encodes newlines inside attribute values while other browsers don't\nvar shouldDecodeNewlines = inBrowser ? shouldDecode('\\n', '&#10;') : false;\n\n/*  */\n\nvar defaultTagRE = /\\{\\{((?:.|\\n)+?)\\}\\}/g;\nvar regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\n\nvar buildRegex = cached(function (delimiters) {\n  var open = delimiters[0].replace(regexEscapeRE, '\\\\$&');\n  var close = delimiters[1].replace(regexEscapeRE, '\\\\$&');\n  return new RegExp(open + '((?:.|\\\\n)+?)' + close, 'g')\n});\n\nfunction parseText (\n  text,\n  delimiters\n) {\n  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;\n  if (!tagRE.test(text)) {\n    return\n  }\n  var tokens = [];\n  var lastIndex = tagRE.lastIndex = 0;\n  var match, index;\n  while ((match = tagRE.exec(text))) {\n    index = match.index;\n    // push text token\n    if (index > lastIndex) {\n      tokens.push(JSON.stringify(text.slice(lastIndex, index)));\n    }\n    // tag token\n    var exp = parseFilters(match[1].trim());\n    tokens.push((\"_s(\" + exp + \")\"));\n    lastIndex = index + match[0].length;\n  }\n  if (lastIndex < text.length) {\n    tokens.push(JSON.stringify(text.slice(lastIndex)));\n  }\n  return tokens.join('+')\n}\n\n/*  */\n\nfunction transformNode (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticClass = getAndRemoveAttr(el, 'class');\n  if (process.env.NODE_ENV !== 'production' && staticClass) {\n    var expression = parseText(staticClass, options.delimiters);\n    if (expression) {\n      warn(\n        \"class=\\\"\" + staticClass + \"\\\": \" +\n        'Interpolation inside attributes has been removed. ' +\n        'Use v-bind or the colon shorthand instead. For example, ' +\n        'instead of <div class=\"{{ val }}\">, use <div :class=\"val\">.'\n      );\n    }\n  }\n  if (staticClass) {\n    el.staticClass = JSON.stringify(staticClass);\n  }\n  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);\n  if (classBinding) {\n    el.classBinding = classBinding;\n  }\n}\n\nfunction genData (el) {\n  var data = '';\n  if (el.staticClass) {\n    data += \"staticClass:\" + (el.staticClass) + \",\";\n  }\n  if (el.classBinding) {\n    data += \"class:\" + (el.classBinding) + \",\";\n  }\n  return data\n}\n\nvar klass$1 = {\n  staticKeys: ['staticClass'],\n  transformNode: transformNode,\n  genData: genData\n};\n\n/*  */\n\nfunction transformNode$1 (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticStyle = getAndRemoveAttr(el, 'style');\n  if (staticStyle) {\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production') {\n      var expression = parseText(staticStyle, options.delimiters);\n      if (expression) {\n        warn(\n          \"style=\\\"\" + staticStyle + \"\\\": \" +\n          'Interpolation inside attributes has been removed. ' +\n          'Use v-bind or the colon shorthand instead. For example, ' +\n          'instead of <div style=\"{{ val }}\">, use <div :style=\"val\">.'\n        );\n      }\n    }\n    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));\n  }\n\n  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);\n  if (styleBinding) {\n    el.styleBinding = styleBinding;\n  }\n}\n\nfunction genData$1 (el) {\n  var data = '';\n  if (el.staticStyle) {\n    data += \"staticStyle:\" + (el.staticStyle) + \",\";\n  }\n  if (el.styleBinding) {\n    data += \"style:(\" + (el.styleBinding) + \"),\";\n  }\n  return data\n}\n\nvar style$1 = {\n  staticKeys: ['staticStyle'],\n  transformNode: transformNode$1,\n  genData: genData$1\n};\n\nvar modules$1 = [\n  klass$1,\n  style$1\n];\n\n/*  */\n\nfunction text (el, dir) {\n  if (dir.value) {\n    addProp(el, 'textContent', (\"_s(\" + (dir.value) + \")\"));\n  }\n}\n\n/*  */\n\nfunction html (el, dir) {\n  if (dir.value) {\n    addProp(el, 'innerHTML', (\"_s(\" + (dir.value) + \")\"));\n  }\n}\n\nvar directives$1 = {\n  model: model,\n  text: text,\n  html: html\n};\n\n/*  */\n\nvar isUnaryTag = makeMap(\n  'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +\n  'link,meta,param,source,track,wbr'\n);\n\n// Elements that you can, intentionally, leave open\n// (and which close themselves)\nvar canBeLeftOpenTag = makeMap(\n  'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'\n);\n\n// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3\n// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content\nvar isNonPhrasingTag = makeMap(\n  'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +\n  'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +\n  'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +\n  'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +\n  'title,tr,track'\n);\n\n/*  */\n\nvar baseOptions = {\n  expectHTML: true,\n  modules: modules$1,\n  directives: directives$1,\n  isPreTag: isPreTag,\n  isUnaryTag: isUnaryTag,\n  mustUseProp: mustUseProp,\n  canBeLeftOpenTag: canBeLeftOpenTag,\n  isReservedTag: isReservedTag,\n  getTagNamespace: getTagNamespace,\n  staticKeys: genStaticKeys(modules$1)\n};\n\n/*  */\n\nvar decoder;\n\nvar he = {\n  decode: function decode (html) {\n    decoder = decoder || document.createElement('div');\n    decoder.innerHTML = html;\n    return decoder.textContent\n  }\n};\n\n/**\n * Not type-checking this file because it's mostly vendor code.\n */\n\n/*!\n * HTML Parser By John Resig (ejohn.org)\n * Modified by Juriy \"kangax\" Zaytsev\n * Original code by Erik Arvidsson, Mozilla Public License\n * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js\n */\n\n// Regular Expressions for parsing tags and attributes\nvar attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/;\n// could use https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName\n// but for Vue templates we can enforce a simple charset\nvar ncname = '[a-zA-Z_][\\\\w\\\\-\\\\.]*';\nvar qnameCapture = \"((?:\" + ncname + \"\\\\:)?\" + ncname + \")\";\nvar startTagOpen = new RegExp((\"^<\" + qnameCapture));\nvar startTagClose = /^\\s*(\\/?)>/;\nvar endTag = new RegExp((\"^<\\\\/\" + qnameCapture + \"[^>]*>\"));\nvar doctype = /^<!DOCTYPE [^>]+>/i;\nvar comment = /^<!--/;\nvar conditionalComment = /^<!\\[/;\n\nvar IS_REGEX_CAPTURING_BROKEN = false;\n'x'.replace(/x(.)?/g, function (m, g) {\n  IS_REGEX_CAPTURING_BROKEN = g === '';\n});\n\n// Special Elements (can contain anything)\nvar isPlainTextElement = makeMap('script,style,textarea', true);\nvar reCache = {};\n\nvar decodingMap = {\n  '&lt;': '<',\n  '&gt;': '>',\n  '&quot;': '\"',\n  '&amp;': '&',\n  '&#10;': '\\n'\n};\nvar encodedAttr = /&(?:lt|gt|quot|amp);/g;\nvar encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#10);/g;\n\n// #5992\nvar isIgnoreNewlineTag = makeMap('pre,textarea', true);\nvar shouldIgnoreFirstNewline = function (tag, html) { return tag && isIgnoreNewlineTag(tag) && html[0] === '\\n'; };\n\nfunction decodeAttr (value, shouldDecodeNewlines) {\n  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;\n  return value.replace(re, function (match) { return decodingMap[match]; })\n}\n\nfunction parseHTML (html, options) {\n  var stack = [];\n  var expectHTML = options.expectHTML;\n  var isUnaryTag$$1 = options.isUnaryTag || no;\n  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;\n  var index = 0;\n  var last, lastTag;\n  while (html) {\n    last = html;\n    // Make sure we're not in a plaintext content element like script/style\n    if (!lastTag || !isPlainTextElement(lastTag)) {\n      var textEnd = html.indexOf('<');\n      if (textEnd === 0) {\n        // Comment:\n        if (comment.test(html)) {\n          var commentEnd = html.indexOf('-->');\n\n          if (commentEnd >= 0) {\n            if (options.shouldKeepComment) {\n              options.comment(html.substring(4, commentEnd));\n            }\n            advance(commentEnd + 3);\n            continue\n          }\n        }\n\n        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment\n        if (conditionalComment.test(html)) {\n          var conditionalEnd = html.indexOf(']>');\n\n          if (conditionalEnd >= 0) {\n            advance(conditionalEnd + 2);\n            continue\n          }\n        }\n\n        // Doctype:\n        var doctypeMatch = html.match(doctype);\n        if (doctypeMatch) {\n          advance(doctypeMatch[0].length);\n          continue\n        }\n\n        // End tag:\n        var endTagMatch = html.match(endTag);\n        if (endTagMatch) {\n          var curIndex = index;\n          advance(endTagMatch[0].length);\n          parseEndTag(endTagMatch[1], curIndex, index);\n          continue\n        }\n\n        // Start tag:\n        var startTagMatch = parseStartTag();\n        if (startTagMatch) {\n          handleStartTag(startTagMatch);\n          if (shouldIgnoreFirstNewline(lastTag, html)) {\n            advance(1);\n          }\n          continue\n        }\n      }\n\n      var text = (void 0), rest = (void 0), next = (void 0);\n      if (textEnd >= 0) {\n        rest = html.slice(textEnd);\n        while (\n          !endTag.test(rest) &&\n          !startTagOpen.test(rest) &&\n          !comment.test(rest) &&\n          !conditionalComment.test(rest)\n        ) {\n          // < in plain text, be forgiving and treat it as text\n          next = rest.indexOf('<', 1);\n          if (next < 0) { break }\n          textEnd += next;\n          rest = html.slice(textEnd);\n        }\n        text = html.substring(0, textEnd);\n        advance(textEnd);\n      }\n\n      if (textEnd < 0) {\n        text = html;\n        html = '';\n      }\n\n      if (options.chars && text) {\n        options.chars(text);\n      }\n    } else {\n      var endTagLength = 0;\n      var stackedTag = lastTag.toLowerCase();\n      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\\\s\\\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));\n      var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {\n        endTagLength = endTag.length;\n        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {\n          text = text\n            .replace(/<!--([\\s\\S]*?)-->/g, '$1')\n            .replace(/<!\\[CDATA\\[([\\s\\S]*?)]]>/g, '$1');\n        }\n        if (shouldIgnoreFirstNewline(stackedTag, text)) {\n          text = text.slice(1);\n        }\n        if (options.chars) {\n          options.chars(text);\n        }\n        return ''\n      });\n      index += html.length - rest$1.length;\n      html = rest$1;\n      parseEndTag(stackedTag, index - endTagLength, index);\n    }\n\n    if (html === last) {\n      options.chars && options.chars(html);\n      if (process.env.NODE_ENV !== 'production' && !stack.length && options.warn) {\n        options.warn((\"Mal-formatted tag at end of template: \\\"\" + html + \"\\\"\"));\n      }\n      break\n    }\n  }\n\n  // Clean up any remaining tags\n  parseEndTag();\n\n  function advance (n) {\n    index += n;\n    html = html.substring(n);\n  }\n\n  function parseStartTag () {\n    var start = html.match(startTagOpen);\n    if (start) {\n      var match = {\n        tagName: start[1],\n        attrs: [],\n        start: index\n      };\n      advance(start[0].length);\n      var end, attr;\n      while (!(end = html.match(startTagClose)) && (attr = html.match(attribute))) {\n        advance(attr[0].length);\n        match.attrs.push(attr);\n      }\n      if (end) {\n        match.unarySlash = end[1];\n        advance(end[0].length);\n        match.end = index;\n        return match\n      }\n    }\n  }\n\n  function handleStartTag (match) {\n    var tagName = match.tagName;\n    var unarySlash = match.unarySlash;\n\n    if (expectHTML) {\n      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {\n        parseEndTag(lastTag);\n      }\n      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {\n        parseEndTag(tagName);\n      }\n    }\n\n    var unary = isUnaryTag$$1(tagName) || !!unarySlash;\n\n    var l = match.attrs.length;\n    var attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      var args = match.attrs[i];\n      // hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778\n      if (IS_REGEX_CAPTURING_BROKEN && args[0].indexOf('\"\"') === -1) {\n        if (args[3] === '') { delete args[3]; }\n        if (args[4] === '') { delete args[4]; }\n        if (args[5] === '') { delete args[5]; }\n      }\n      var value = args[3] || args[4] || args[5] || '';\n      attrs[i] = {\n        name: args[1],\n        value: decodeAttr(\n          value,\n          options.shouldDecodeNewlines\n        )\n      };\n    }\n\n    if (!unary) {\n      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs });\n      lastTag = tagName;\n    }\n\n    if (options.start) {\n      options.start(tagName, attrs, unary, match.start, match.end);\n    }\n  }\n\n  function parseEndTag (tagName, start, end) {\n    var pos, lowerCasedTagName;\n    if (start == null) { start = index; }\n    if (end == null) { end = index; }\n\n    if (tagName) {\n      lowerCasedTagName = tagName.toLowerCase();\n    }\n\n    // Find the closest opened tag of the same type\n    if (tagName) {\n      for (pos = stack.length - 1; pos >= 0; pos--) {\n        if (stack[pos].lowerCasedTag === lowerCasedTagName) {\n          break\n        }\n      }\n    } else {\n      // If no tag name is provided, clean shop\n      pos = 0;\n    }\n\n    if (pos >= 0) {\n      // Close all the open elements, up the stack\n      for (var i = stack.length - 1; i >= pos; i--) {\n        if (process.env.NODE_ENV !== 'production' &&\n          (i > pos || !tagName) &&\n          options.warn\n        ) {\n          options.warn(\n            (\"tag <\" + (stack[i].tag) + \"> has no matching end tag.\")\n          );\n        }\n        if (options.end) {\n          options.end(stack[i].tag, start, end);\n        }\n      }\n\n      // Remove the open elements from the stack\n      stack.length = pos;\n      lastTag = pos && stack[pos - 1].tag;\n    } else if (lowerCasedTagName === 'br') {\n      if (options.start) {\n        options.start(tagName, [], true, start, end);\n      }\n    } else if (lowerCasedTagName === 'p') {\n      if (options.start) {\n        options.start(tagName, [], false, start, end);\n      }\n      if (options.end) {\n        options.end(tagName, start, end);\n      }\n    }\n  }\n}\n\n/*  */\n\nvar onRE = /^@|^v-on:/;\nvar dirRE = /^v-|^@|^:/;\nvar forAliasRE = /(.*?)\\s+(?:in|of)\\s+(.*)/;\nvar forIteratorRE = /\\((\\{[^}]*\\}|[^,]*),([^,]*)(?:,([^,]*))?\\)/;\n\nvar argRE = /:(.*)$/;\nvar bindRE = /^:|^v-bind:/;\nvar modifierRE = /\\.[^.]+/g;\n\nvar decodeHTMLCached = cached(he.decode);\n\n// configurable state\nvar warn$2;\nvar delimiters;\nvar transforms;\nvar preTransforms;\nvar postTransforms;\nvar platformIsPreTag;\nvar platformMustUseProp;\nvar platformGetTagNamespace;\n\n/**\n * Convert HTML string to AST.\n */\nfunction parse (\n  template,\n  options\n) {\n  warn$2 = options.warn || baseWarn;\n\n  platformIsPreTag = options.isPreTag || no;\n  platformMustUseProp = options.mustUseProp || no;\n  platformGetTagNamespace = options.getTagNamespace || no;\n\n  transforms = pluckModuleFunction(options.modules, 'transformNode');\n  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');\n  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');\n\n  delimiters = options.delimiters;\n\n  var stack = [];\n  var preserveWhitespace = options.preserveWhitespace !== false;\n  var root;\n  var currentParent;\n  var inVPre = false;\n  var inPre = false;\n  var warned = false;\n\n  function warnOnce (msg) {\n    if (!warned) {\n      warned = true;\n      warn$2(msg);\n    }\n  }\n\n  function endPre (element) {\n    // check pre state\n    if (element.pre) {\n      inVPre = false;\n    }\n    if (platformIsPreTag(element.tag)) {\n      inPre = false;\n    }\n  }\n\n  parseHTML(template, {\n    warn: warn$2,\n    expectHTML: options.expectHTML,\n    isUnaryTag: options.isUnaryTag,\n    canBeLeftOpenTag: options.canBeLeftOpenTag,\n    shouldDecodeNewlines: options.shouldDecodeNewlines,\n    shouldKeepComment: options.comments,\n    start: function start (tag, attrs, unary) {\n      // check namespace.\n      // inherit parent ns if there is one\n      var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);\n\n      // handle IE svg bug\n      /* istanbul ignore if */\n      if (isIE && ns === 'svg') {\n        attrs = guardIESVGBug(attrs);\n      }\n\n      var element = {\n        type: 1,\n        tag: tag,\n        attrsList: attrs,\n        attrsMap: makeAttrsMap(attrs),\n        parent: currentParent,\n        children: []\n      };\n      if (ns) {\n        element.ns = ns;\n      }\n\n      if (isForbiddenTag(element) && !isServerRendering()) {\n        element.forbidden = true;\n        process.env.NODE_ENV !== 'production' && warn$2(\n          'Templates should only be responsible for mapping the state to the ' +\n          'UI. Avoid placing tags with side-effects in your templates, such as ' +\n          \"<\" + tag + \">\" + ', as they will not be parsed.'\n        );\n      }\n\n      // apply pre-transforms\n      for (var i = 0; i < preTransforms.length; i++) {\n        preTransforms[i](element, options);\n      }\n\n      if (!inVPre) {\n        processPre(element);\n        if (element.pre) {\n          inVPre = true;\n        }\n      }\n      if (platformIsPreTag(element.tag)) {\n        inPre = true;\n      }\n      if (inVPre) {\n        processRawAttrs(element);\n      } else {\n        processFor(element);\n        processIf(element);\n        processOnce(element);\n        processKey(element);\n\n        // determine whether this is a plain element after\n        // removing structural attributes\n        element.plain = !element.key && !attrs.length;\n\n        processRef(element);\n        processSlot(element);\n        processComponent(element);\n        for (var i$1 = 0; i$1 < transforms.length; i$1++) {\n          transforms[i$1](element, options);\n        }\n        processAttrs(element);\n      }\n\n      function checkRootConstraints (el) {\n        if (process.env.NODE_ENV !== 'production') {\n          if (el.tag === 'slot' || el.tag === 'template') {\n            warnOnce(\n              \"Cannot use <\" + (el.tag) + \"> as component root element because it may \" +\n              'contain multiple nodes.'\n            );\n          }\n          if (el.attrsMap.hasOwnProperty('v-for')) {\n            warnOnce(\n              'Cannot use v-for on stateful component root element because ' +\n              'it renders multiple elements.'\n            );\n          }\n        }\n      }\n\n      // tree management\n      if (!root) {\n        root = element;\n        checkRootConstraints(root);\n      } else if (!stack.length) {\n        // allow root elements with v-if, v-else-if and v-else\n        if (root.if && (element.elseif || element.else)) {\n          checkRootConstraints(element);\n          addIfCondition(root, {\n            exp: element.elseif,\n            block: element\n          });\n        } else if (process.env.NODE_ENV !== 'production') {\n          warnOnce(\n            \"Component template should contain exactly one root element. \" +\n            \"If you are using v-if on multiple elements, \" +\n            \"use v-else-if to chain them instead.\"\n          );\n        }\n      }\n      if (currentParent && !element.forbidden) {\n        if (element.elseif || element.else) {\n          processIfConditions(element, currentParent);\n        } else if (element.slotScope) { // scoped slot\n          currentParent.plain = false;\n          var name = element.slotTarget || '\"default\"';(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;\n        } else {\n          currentParent.children.push(element);\n          element.parent = currentParent;\n        }\n      }\n      if (!unary) {\n        currentParent = element;\n        stack.push(element);\n      } else {\n        endPre(element);\n      }\n      // apply post-transforms\n      for (var i$2 = 0; i$2 < postTransforms.length; i$2++) {\n        postTransforms[i$2](element, options);\n      }\n    },\n\n    end: function end () {\n      // remove trailing whitespace\n      var element = stack[stack.length - 1];\n      var lastNode = element.children[element.children.length - 1];\n      if (lastNode && lastNode.type === 3 && lastNode.text === ' ' && !inPre) {\n        element.children.pop();\n      }\n      // pop stack\n      stack.length -= 1;\n      currentParent = stack[stack.length - 1];\n      endPre(element);\n    },\n\n    chars: function chars (text) {\n      if (!currentParent) {\n        if (process.env.NODE_ENV !== 'production') {\n          if (text === template) {\n            warnOnce(\n              'Component template requires a root element, rather than just text.'\n            );\n          } else if ((text = text.trim())) {\n            warnOnce(\n              (\"text \\\"\" + text + \"\\\" outside root element will be ignored.\")\n            );\n          }\n        }\n        return\n      }\n      // IE textarea placeholder bug\n      /* istanbul ignore if */\n      if (isIE &&\n        currentParent.tag === 'textarea' &&\n        currentParent.attrsMap.placeholder === text\n      ) {\n        return\n      }\n      var children = currentParent.children;\n      text = inPre || text.trim()\n        ? isTextTag(currentParent) ? text : decodeHTMLCached(text)\n        // only preserve whitespace if its not right after a starting tag\n        : preserveWhitespace && children.length ? ' ' : '';\n      if (text) {\n        var expression;\n        if (!inVPre && text !== ' ' && (expression = parseText(text, delimiters))) {\n          children.push({\n            type: 2,\n            expression: expression,\n            text: text\n          });\n        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {\n          children.push({\n            type: 3,\n            text: text\n          });\n        }\n      }\n    },\n    comment: function comment (text) {\n      currentParent.children.push({\n        type: 3,\n        text: text,\n        isComment: true\n      });\n    }\n  });\n  return root\n}\n\nfunction processPre (el) {\n  if (getAndRemoveAttr(el, 'v-pre') != null) {\n    el.pre = true;\n  }\n}\n\nfunction processRawAttrs (el) {\n  var l = el.attrsList.length;\n  if (l) {\n    var attrs = el.attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      attrs[i] = {\n        name: el.attrsList[i].name,\n        value: JSON.stringify(el.attrsList[i].value)\n      };\n    }\n  } else if (!el.pre) {\n    // non root node in pre blocks with no attributes\n    el.plain = true;\n  }\n}\n\nfunction processKey (el) {\n  var exp = getBindingAttr(el, 'key');\n  if (exp) {\n    if (process.env.NODE_ENV !== 'production' && el.tag === 'template') {\n      warn$2(\"<template> cannot be keyed. Place the key on real elements instead.\");\n    }\n    el.key = exp;\n  }\n}\n\nfunction processRef (el) {\n  var ref = getBindingAttr(el, 'ref');\n  if (ref) {\n    el.ref = ref;\n    el.refInFor = checkInFor(el);\n  }\n}\n\nfunction processFor (el) {\n  var exp;\n  if ((exp = getAndRemoveAttr(el, 'v-for'))) {\n    var inMatch = exp.match(forAliasRE);\n    if (!inMatch) {\n      process.env.NODE_ENV !== 'production' && warn$2(\n        (\"Invalid v-for expression: \" + exp)\n      );\n      return\n    }\n    el.for = inMatch[2].trim();\n    var alias = inMatch[1].trim();\n    var iteratorMatch = alias.match(forIteratorRE);\n    if (iteratorMatch) {\n      el.alias = iteratorMatch[1].trim();\n      el.iterator1 = iteratorMatch[2].trim();\n      if (iteratorMatch[3]) {\n        el.iterator2 = iteratorMatch[3].trim();\n      }\n    } else {\n      el.alias = alias;\n    }\n  }\n}\n\nfunction processIf (el) {\n  var exp = getAndRemoveAttr(el, 'v-if');\n  if (exp) {\n    el.if = exp;\n    addIfCondition(el, {\n      exp: exp,\n      block: el\n    });\n  } else {\n    if (getAndRemoveAttr(el, 'v-else') != null) {\n      el.else = true;\n    }\n    var elseif = getAndRemoveAttr(el, 'v-else-if');\n    if (elseif) {\n      el.elseif = elseif;\n    }\n  }\n}\n\nfunction processIfConditions (el, parent) {\n  var prev = findPrevElement(parent.children);\n  if (prev && prev.if) {\n    addIfCondition(prev, {\n      exp: el.elseif,\n      block: el\n    });\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn$2(\n      \"v-\" + (el.elseif ? ('else-if=\"' + el.elseif + '\"') : 'else') + \" \" +\n      \"used on element <\" + (el.tag) + \"> without corresponding v-if.\"\n    );\n  }\n}\n\nfunction findPrevElement (children) {\n  var i = children.length;\n  while (i--) {\n    if (children[i].type === 1) {\n      return children[i]\n    } else {\n      if (process.env.NODE_ENV !== 'production' && children[i].text !== ' ') {\n        warn$2(\n          \"text \\\"\" + (children[i].text.trim()) + \"\\\" between v-if and v-else(-if) \" +\n          \"will be ignored.\"\n        );\n      }\n      children.pop();\n    }\n  }\n}\n\nfunction addIfCondition (el, condition) {\n  if (!el.ifConditions) {\n    el.ifConditions = [];\n  }\n  el.ifConditions.push(condition);\n}\n\nfunction processOnce (el) {\n  var once$$1 = getAndRemoveAttr(el, 'v-once');\n  if (once$$1 != null) {\n    el.once = true;\n  }\n}\n\nfunction processSlot (el) {\n  if (el.tag === 'slot') {\n    el.slotName = getBindingAttr(el, 'name');\n    if (process.env.NODE_ENV !== 'production' && el.key) {\n      warn$2(\n        \"`key` does not work on <slot> because slots are abstract outlets \" +\n        \"and can possibly expand into multiple elements. \" +\n        \"Use the key on a wrapping element instead.\"\n      );\n    }\n  } else {\n    var slotTarget = getBindingAttr(el, 'slot');\n    if (slotTarget) {\n      el.slotTarget = slotTarget === '\"\"' ? '\"default\"' : slotTarget;\n      // preserve slot as an attribute for native shadow DOM compat\n      addAttr(el, 'slot', slotTarget);\n    }\n    if (el.tag === 'template') {\n      el.slotScope = getAndRemoveAttr(el, 'scope');\n    }\n  }\n}\n\nfunction processComponent (el) {\n  var binding;\n  if ((binding = getBindingAttr(el, 'is'))) {\n    el.component = binding;\n  }\n  if (getAndRemoveAttr(el, 'inline-template') != null) {\n    el.inlineTemplate = true;\n  }\n}\n\nfunction processAttrs (el) {\n  var list = el.attrsList;\n  var i, l, name, rawName, value, modifiers, isProp;\n  for (i = 0, l = list.length; i < l; i++) {\n    name = rawName = list[i].name;\n    value = list[i].value;\n    if (dirRE.test(name)) {\n      // mark element as dynamic\n      el.hasBindings = true;\n      // modifiers\n      modifiers = parseModifiers(name);\n      if (modifiers) {\n        name = name.replace(modifierRE, '');\n      }\n      if (bindRE.test(name)) { // v-bind\n        name = name.replace(bindRE, '');\n        value = parseFilters(value);\n        isProp = false;\n        if (modifiers) {\n          if (modifiers.prop) {\n            isProp = true;\n            name = camelize(name);\n            if (name === 'innerHtml') { name = 'innerHTML'; }\n          }\n          if (modifiers.camel) {\n            name = camelize(name);\n          }\n          if (modifiers.sync) {\n            addHandler(\n              el,\n              (\"update:\" + (camelize(name))),\n              genAssignmentCode(value, \"$event\")\n            );\n          }\n        }\n        if (isProp || (\n          !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)\n        )) {\n          addProp(el, name, value);\n        } else {\n          addAttr(el, name, value);\n        }\n      } else if (onRE.test(name)) { // v-on\n        name = name.replace(onRE, '');\n        addHandler(el, name, value, modifiers, false, warn$2);\n      } else { // normal directives\n        name = name.replace(dirRE, '');\n        // parse arg\n        var argMatch = name.match(argRE);\n        var arg = argMatch && argMatch[1];\n        if (arg) {\n          name = name.slice(0, -(arg.length + 1));\n        }\n        addDirective(el, name, rawName, value, arg, modifiers);\n        if (process.env.NODE_ENV !== 'production' && name === 'model') {\n          checkForAliasModel(el, value);\n        }\n      }\n    } else {\n      // literal attribute\n      if (process.env.NODE_ENV !== 'production') {\n        var expression = parseText(value, delimiters);\n        if (expression) {\n          warn$2(\n            name + \"=\\\"\" + value + \"\\\": \" +\n            'Interpolation inside attributes has been removed. ' +\n            'Use v-bind or the colon shorthand instead. For example, ' +\n            'instead of <div id=\"{{ val }}\">, use <div :id=\"val\">.'\n          );\n        }\n      }\n      addAttr(el, name, JSON.stringify(value));\n    }\n  }\n}\n\nfunction checkInFor (el) {\n  var parent = el;\n  while (parent) {\n    if (parent.for !== undefined) {\n      return true\n    }\n    parent = parent.parent;\n  }\n  return false\n}\n\nfunction parseModifiers (name) {\n  var match = name.match(modifierRE);\n  if (match) {\n    var ret = {};\n    match.forEach(function (m) { ret[m.slice(1)] = true; });\n    return ret\n  }\n}\n\nfunction makeAttrsMap (attrs) {\n  var map = {};\n  for (var i = 0, l = attrs.length; i < l; i++) {\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      map[attrs[i].name] && !isIE && !isEdge\n    ) {\n      warn$2('duplicate attribute: ' + attrs[i].name);\n    }\n    map[attrs[i].name] = attrs[i].value;\n  }\n  return map\n}\n\n// for script (e.g. type=\"x/template\") or style, do not decode content\nfunction isTextTag (el) {\n  return el.tag === 'script' || el.tag === 'style'\n}\n\nfunction isForbiddenTag (el) {\n  return (\n    el.tag === 'style' ||\n    (el.tag === 'script' && (\n      !el.attrsMap.type ||\n      el.attrsMap.type === 'text/javascript'\n    ))\n  )\n}\n\nvar ieNSBug = /^xmlns:NS\\d+/;\nvar ieNSPrefix = /^NS\\d+:/;\n\n/* istanbul ignore next */\nfunction guardIESVGBug (attrs) {\n  var res = [];\n  for (var i = 0; i < attrs.length; i++) {\n    var attr = attrs[i];\n    if (!ieNSBug.test(attr.name)) {\n      attr.name = attr.name.replace(ieNSPrefix, '');\n      res.push(attr);\n    }\n  }\n  return res\n}\n\nfunction checkForAliasModel (el, value) {\n  var _el = el;\n  while (_el) {\n    if (_el.for && _el.alias === value) {\n      warn$2(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n        \"You are binding v-model directly to a v-for iteration alias. \" +\n        \"This will not be able to modify the v-for source array because \" +\n        \"writing to the alias is like modifying a function local variable. \" +\n        \"Consider using an array of objects and use v-model on an object property instead.\"\n      );\n    }\n    _el = _el.parent;\n  }\n}\n\n/*  */\n\nvar isStaticKey;\nvar isPlatformReservedTag;\n\nvar genStaticKeysCached = cached(genStaticKeys$1);\n\n/**\n * Goal of the optimizer: walk the generated template AST tree\n * and detect sub-trees that are purely static, i.e. parts of\n * the DOM that never needs to change.\n *\n * Once we detect these sub-trees, we can:\n *\n * 1. Hoist them into constants, so that we no longer need to\n *    create fresh nodes for them on each re-render;\n * 2. Completely skip them in the patching process.\n */\nfunction optimize (root, options) {\n  if (!root) { return }\n  isStaticKey = genStaticKeysCached(options.staticKeys || '');\n  isPlatformReservedTag = options.isReservedTag || no;\n  // first pass: mark all non-static nodes.\n  markStatic$1(root);\n  // second pass: mark static roots.\n  markStaticRoots(root, false);\n}\n\nfunction genStaticKeys$1 (keys) {\n  return makeMap(\n    'type,tag,attrsList,attrsMap,plain,parent,children,attrs' +\n    (keys ? ',' + keys : '')\n  )\n}\n\nfunction markStatic$1 (node) {\n  node.static = isStatic(node);\n  if (node.type === 1) {\n    // do not make component slot content static. this avoids\n    // 1. components not able to mutate slot nodes\n    // 2. static slot content fails for hot-reloading\n    if (\n      !isPlatformReservedTag(node.tag) &&\n      node.tag !== 'slot' &&\n      node.attrsMap['inline-template'] == null\n    ) {\n      return\n    }\n    for (var i = 0, l = node.children.length; i < l; i++) {\n      var child = node.children[i];\n      markStatic$1(child);\n      if (!child.static) {\n        node.static = false;\n      }\n    }\n    if (node.ifConditions) {\n      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {\n        var block = node.ifConditions[i$1].block;\n        markStatic$1(block);\n        if (!block.static) {\n          node.static = false;\n        }\n      }\n    }\n  }\n}\n\nfunction markStaticRoots (node, isInFor) {\n  if (node.type === 1) {\n    if (node.static || node.once) {\n      node.staticInFor = isInFor;\n    }\n    // For a node to qualify as a static root, it should have children that\n    // are not just static text. Otherwise the cost of hoisting out will\n    // outweigh the benefits and it's better off to just always render it fresh.\n    if (node.static && node.children.length && !(\n      node.children.length === 1 &&\n      node.children[0].type === 3\n    )) {\n      node.staticRoot = true;\n      return\n    } else {\n      node.staticRoot = false;\n    }\n    if (node.children) {\n      for (var i = 0, l = node.children.length; i < l; i++) {\n        markStaticRoots(node.children[i], isInFor || !!node.for);\n      }\n    }\n    if (node.ifConditions) {\n      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {\n        markStaticRoots(node.ifConditions[i$1].block, isInFor);\n      }\n    }\n  }\n}\n\nfunction isStatic (node) {\n  if (node.type === 2) { // expression\n    return false\n  }\n  if (node.type === 3) { // text\n    return true\n  }\n  return !!(node.pre || (\n    !node.hasBindings && // no dynamic bindings\n    !node.if && !node.for && // not v-if or v-for or v-else\n    !isBuiltInTag(node.tag) && // not a built-in\n    isPlatformReservedTag(node.tag) && // not a component\n    !isDirectChildOfTemplateFor(node) &&\n    Object.keys(node).every(isStaticKey)\n  ))\n}\n\nfunction isDirectChildOfTemplateFor (node) {\n  while (node.parent) {\n    node = node.parent;\n    if (node.tag !== 'template') {\n      return false\n    }\n    if (node.for) {\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\nvar fnExpRE = /^\\s*([\\w$_]+|\\([^)]*?\\))\\s*=>|^function\\s*\\(/;\nvar simplePathRE = /^\\s*[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['.*?']|\\[\".*?\"]|\\[\\d+]|\\[[A-Za-z_$][\\w$]*])*\\s*$/;\n\n// keyCode aliases\nvar keyCodes = {\n  esc: 27,\n  tab: 9,\n  enter: 13,\n  space: 32,\n  up: 38,\n  left: 37,\n  right: 39,\n  down: 40,\n  'delete': [8, 46]\n};\n\n// #4868: modifiers that prevent the execution of the listener\n// need to explicitly return null so that we can determine whether to remove\n// the listener for .once\nvar genGuard = function (condition) { return (\"if(\" + condition + \")return null;\"); };\n\nvar modifierCode = {\n  stop: '$event.stopPropagation();',\n  prevent: '$event.preventDefault();',\n  self: genGuard(\"$event.target !== $event.currentTarget\"),\n  ctrl: genGuard(\"!$event.ctrlKey\"),\n  shift: genGuard(\"!$event.shiftKey\"),\n  alt: genGuard(\"!$event.altKey\"),\n  meta: genGuard(\"!$event.metaKey\"),\n  left: genGuard(\"'button' in $event && $event.button !== 0\"),\n  middle: genGuard(\"'button' in $event && $event.button !== 1\"),\n  right: genGuard(\"'button' in $event && $event.button !== 2\")\n};\n\nfunction genHandlers (\n  events,\n  isNative,\n  warn\n) {\n  var res = isNative ? 'nativeOn:{' : 'on:{';\n  for (var name in events) {\n    var handler = events[name];\n    // #5330: warn click.right, since right clicks do not actually fire click events.\n    if (process.env.NODE_ENV !== 'production' &&\n      name === 'click' &&\n      handler && handler.modifiers && handler.modifiers.right\n    ) {\n      warn(\n        \"Use \\\"contextmenu\\\" instead of \\\"click.right\\\" since right clicks \" +\n        \"do not actually fire \\\"click\\\" events.\"\n      );\n    }\n    res += \"\\\"\" + name + \"\\\":\" + (genHandler(name, handler)) + \",\";\n  }\n  return res.slice(0, -1) + '}'\n}\n\nfunction genHandler (\n  name,\n  handler\n) {\n  if (!handler) {\n    return 'function(){}'\n  }\n\n  if (Array.isArray(handler)) {\n    return (\"[\" + (handler.map(function (handler) { return genHandler(name, handler); }).join(',')) + \"]\")\n  }\n\n  var isMethodPath = simplePathRE.test(handler.value);\n  var isFunctionExpression = fnExpRE.test(handler.value);\n\n  if (!handler.modifiers) {\n    return isMethodPath || isFunctionExpression\n      ? handler.value\n      : (\"function($event){\" + (handler.value) + \"}\") // inline statement\n  } else {\n    var code = '';\n    var genModifierCode = '';\n    var keys = [];\n    for (var key in handler.modifiers) {\n      if (modifierCode[key]) {\n        genModifierCode += modifierCode[key];\n        // left/right\n        if (keyCodes[key]) {\n          keys.push(key);\n        }\n      } else {\n        keys.push(key);\n      }\n    }\n    if (keys.length) {\n      code += genKeyFilter(keys);\n    }\n    // Make sure modifiers like prevent and stop get executed after key filtering\n    if (genModifierCode) {\n      code += genModifierCode;\n    }\n    var handlerCode = isMethodPath\n      ? handler.value + '($event)'\n      : isFunctionExpression\n        ? (\"(\" + (handler.value) + \")($event)\")\n        : handler.value;\n    return (\"function($event){\" + code + handlerCode + \"}\")\n  }\n}\n\nfunction genKeyFilter (keys) {\n  return (\"if(!('button' in $event)&&\" + (keys.map(genFilterCode).join('&&')) + \")return null;\")\n}\n\nfunction genFilterCode (key) {\n  var keyVal = parseInt(key, 10);\n  if (keyVal) {\n    return (\"$event.keyCode!==\" + keyVal)\n  }\n  var alias = keyCodes[key];\n  return (\"_k($event.keyCode,\" + (JSON.stringify(key)) + (alias ? ',' + JSON.stringify(alias) : '') + \")\")\n}\n\n/*  */\n\nfunction on (el, dir) {\n  if (process.env.NODE_ENV !== 'production' && dir.modifiers) {\n    warn(\"v-on without argument does not support modifiers.\");\n  }\n  el.wrapListeners = function (code) { return (\"_g(\" + code + \",\" + (dir.value) + \")\"); };\n}\n\n/*  */\n\nfunction bind$1 (el, dir) {\n  el.wrapData = function (code) {\n    return (\"_b(\" + code + \",'\" + (el.tag) + \"',\" + (dir.value) + \",\" + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + \")\")\n  };\n}\n\n/*  */\n\nvar baseDirectives = {\n  on: on,\n  bind: bind$1,\n  cloak: noop\n};\n\n/*  */\n\nvar CodegenState = function CodegenState (options) {\n  this.options = options;\n  this.warn = options.warn || baseWarn;\n  this.transforms = pluckModuleFunction(options.modules, 'transformCode');\n  this.dataGenFns = pluckModuleFunction(options.modules, 'genData');\n  this.directives = extend(extend({}, baseDirectives), options.directives);\n  var isReservedTag = options.isReservedTag || no;\n  this.maybeComponent = function (el) { return !isReservedTag(el.tag); };\n  this.onceId = 0;\n  this.staticRenderFns = [];\n};\n\n\n\nfunction generate (\n  ast,\n  options\n) {\n  var state = new CodegenState(options);\n  var code = ast ? genElement(ast, state) : '_c(\"div\")';\n  return {\n    render: (\"with(this){return \" + code + \"}\"),\n    staticRenderFns: state.staticRenderFns\n  }\n}\n\nfunction genElement (el, state) {\n  if (el.staticRoot && !el.staticProcessed) {\n    return genStatic(el, state)\n  } else if (el.once && !el.onceProcessed) {\n    return genOnce(el, state)\n  } else if (el.for && !el.forProcessed) {\n    return genFor(el, state)\n  } else if (el.if && !el.ifProcessed) {\n    return genIf(el, state)\n  } else if (el.tag === 'template' && !el.slotTarget) {\n    return genChildren(el, state) || 'void 0'\n  } else if (el.tag === 'slot') {\n    return genSlot(el, state)\n  } else {\n    // component or element\n    var code;\n    if (el.component) {\n      code = genComponent(el.component, el, state);\n    } else {\n      var data = el.plain ? undefined : genData$2(el, state);\n\n      var children = el.inlineTemplate ? null : genChildren(el, state, true);\n      code = \"_c('\" + (el.tag) + \"'\" + (data ? (\",\" + data) : '') + (children ? (\",\" + children) : '') + \")\";\n    }\n    // module transforms\n    for (var i = 0; i < state.transforms.length; i++) {\n      code = state.transforms[i](el, code);\n    }\n    return code\n  }\n}\n\n// hoist static sub-trees out\nfunction genStatic (el, state) {\n  el.staticProcessed = true;\n  state.staticRenderFns.push((\"with(this){return \" + (genElement(el, state)) + \"}\"));\n  return (\"_m(\" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + \")\")\n}\n\n// v-once\nfunction genOnce (el, state) {\n  el.onceProcessed = true;\n  if (el.if && !el.ifProcessed) {\n    return genIf(el, state)\n  } else if (el.staticInFor) {\n    var key = '';\n    var parent = el.parent;\n    while (parent) {\n      if (parent.for) {\n        key = parent.key;\n        break\n      }\n      parent = parent.parent;\n    }\n    if (!key) {\n      process.env.NODE_ENV !== 'production' && state.warn(\n        \"v-once can only be used inside v-for that is keyed. \"\n      );\n      return genElement(el, state)\n    }\n    return (\"_o(\" + (genElement(el, state)) + \",\" + (state.onceId++) + \",\" + key + \")\")\n  } else {\n    return genStatic(el, state)\n  }\n}\n\nfunction genIf (\n  el,\n  state,\n  altGen,\n  altEmpty\n) {\n  el.ifProcessed = true; // avoid recursion\n  return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty)\n}\n\nfunction genIfConditions (\n  conditions,\n  state,\n  altGen,\n  altEmpty\n) {\n  if (!conditions.length) {\n    return altEmpty || '_e()'\n  }\n\n  var condition = conditions.shift();\n  if (condition.exp) {\n    return (\"(\" + (condition.exp) + \")?\" + (genTernaryExp(condition.block)) + \":\" + (genIfConditions(conditions, state, altGen, altEmpty)))\n  } else {\n    return (\"\" + (genTernaryExp(condition.block)))\n  }\n\n  // v-if with v-once should generate code like (a)?_m(0):_m(1)\n  function genTernaryExp (el) {\n    return altGen\n      ? altGen(el, state)\n      : el.once\n        ? genOnce(el, state)\n        : genElement(el, state)\n  }\n}\n\nfunction genFor (\n  el,\n  state,\n  altGen,\n  altHelper\n) {\n  var exp = el.for;\n  var alias = el.alias;\n  var iterator1 = el.iterator1 ? (\",\" + (el.iterator1)) : '';\n  var iterator2 = el.iterator2 ? (\",\" + (el.iterator2)) : '';\n\n  if (process.env.NODE_ENV !== 'production' &&\n    state.maybeComponent(el) &&\n    el.tag !== 'slot' &&\n    el.tag !== 'template' &&\n    !el.key\n  ) {\n    state.warn(\n      \"<\" + (el.tag) + \" v-for=\\\"\" + alias + \" in \" + exp + \"\\\">: component lists rendered with \" +\n      \"v-for should have explicit keys. \" +\n      \"See https://vuejs.org/guide/list.html#key for more info.\",\n      true /* tip */\n    );\n  }\n\n  el.forProcessed = true; // avoid recursion\n  return (altHelper || '_l') + \"((\" + exp + \"),\" +\n    \"function(\" + alias + iterator1 + iterator2 + \"){\" +\n      \"return \" + ((altGen || genElement)(el, state)) +\n    '})'\n}\n\nfunction genData$2 (el, state) {\n  var data = '{';\n\n  // directives first.\n  // directives may mutate the el's other properties before they are generated.\n  var dirs = genDirectives(el, state);\n  if (dirs) { data += dirs + ','; }\n\n  // key\n  if (el.key) {\n    data += \"key:\" + (el.key) + \",\";\n  }\n  // ref\n  if (el.ref) {\n    data += \"ref:\" + (el.ref) + \",\";\n  }\n  if (el.refInFor) {\n    data += \"refInFor:true,\";\n  }\n  // pre\n  if (el.pre) {\n    data += \"pre:true,\";\n  }\n  // record original tag name for components using \"is\" attribute\n  if (el.component) {\n    data += \"tag:\\\"\" + (el.tag) + \"\\\",\";\n  }\n  // module data generation functions\n  for (var i = 0; i < state.dataGenFns.length; i++) {\n    data += state.dataGenFns[i](el);\n  }\n  // attributes\n  if (el.attrs) {\n    data += \"attrs:{\" + (genProps(el.attrs)) + \"},\";\n  }\n  // DOM props\n  if (el.props) {\n    data += \"domProps:{\" + (genProps(el.props)) + \"},\";\n  }\n  // event handlers\n  if (el.events) {\n    data += (genHandlers(el.events, false, state.warn)) + \",\";\n  }\n  if (el.nativeEvents) {\n    data += (genHandlers(el.nativeEvents, true, state.warn)) + \",\";\n  }\n  // slot target\n  if (el.slotTarget) {\n    data += \"slot:\" + (el.slotTarget) + \",\";\n  }\n  // scoped slots\n  if (el.scopedSlots) {\n    data += (genScopedSlots(el.scopedSlots, state)) + \",\";\n  }\n  // component v-model\n  if (el.model) {\n    data += \"model:{value:\" + (el.model.value) + \",callback:\" + (el.model.callback) + \",expression:\" + (el.model.expression) + \"},\";\n  }\n  // inline-template\n  if (el.inlineTemplate) {\n    var inlineTemplate = genInlineTemplate(el, state);\n    if (inlineTemplate) {\n      data += inlineTemplate + \",\";\n    }\n  }\n  data = data.replace(/,$/, '') + '}';\n  // v-bind data wrap\n  if (el.wrapData) {\n    data = el.wrapData(data);\n  }\n  // v-on data wrap\n  if (el.wrapListeners) {\n    data = el.wrapListeners(data);\n  }\n  return data\n}\n\nfunction genDirectives (el, state) {\n  var dirs = el.directives;\n  if (!dirs) { return }\n  var res = 'directives:[';\n  var hasRuntime = false;\n  var i, l, dir, needRuntime;\n  for (i = 0, l = dirs.length; i < l; i++) {\n    dir = dirs[i];\n    needRuntime = true;\n    var gen = state.directives[dir.name];\n    if (gen) {\n      // compile-time directive that manipulates AST.\n      // returns true if it also needs a runtime counterpart.\n      needRuntime = !!gen(el, dir, state.warn);\n    }\n    if (needRuntime) {\n      hasRuntime = true;\n      res += \"{name:\\\"\" + (dir.name) + \"\\\",rawName:\\\"\" + (dir.rawName) + \"\\\"\" + (dir.value ? (\",value:(\" + (dir.value) + \"),expression:\" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (\",arg:\\\"\" + (dir.arg) + \"\\\"\") : '') + (dir.modifiers ? (\",modifiers:\" + (JSON.stringify(dir.modifiers))) : '') + \"},\";\n    }\n  }\n  if (hasRuntime) {\n    return res.slice(0, -1) + ']'\n  }\n}\n\nfunction genInlineTemplate (el, state) {\n  var ast = el.children[0];\n  if (process.env.NODE_ENV !== 'production' && (\n    el.children.length > 1 || ast.type !== 1\n  )) {\n    state.warn('Inline-template components must have exactly one child element.');\n  }\n  if (ast.type === 1) {\n    var inlineRenderFns = generate(ast, state.options);\n    return (\"inlineTemplate:{render:function(){\" + (inlineRenderFns.render) + \"},staticRenderFns:[\" + (inlineRenderFns.staticRenderFns.map(function (code) { return (\"function(){\" + code + \"}\"); }).join(',')) + \"]}\")\n  }\n}\n\nfunction genScopedSlots (\n  slots,\n  state\n) {\n  return (\"scopedSlots:_u([\" + (Object.keys(slots).map(function (key) {\n      return genScopedSlot(key, slots[key], state)\n    }).join(',')) + \"])\")\n}\n\nfunction genScopedSlot (\n  key,\n  el,\n  state\n) {\n  if (el.for && !el.forProcessed) {\n    return genForScopedSlot(key, el, state)\n  }\n  return \"{key:\" + key + \",fn:function(\" + (String(el.attrsMap.scope)) + \"){\" +\n    \"return \" + (el.tag === 'template'\n      ? genChildren(el, state) || 'void 0'\n      : genElement(el, state)) + \"}}\"\n}\n\nfunction genForScopedSlot (\n  key,\n  el,\n  state\n) {\n  var exp = el.for;\n  var alias = el.alias;\n  var iterator1 = el.iterator1 ? (\",\" + (el.iterator1)) : '';\n  var iterator2 = el.iterator2 ? (\",\" + (el.iterator2)) : '';\n  el.forProcessed = true; // avoid recursion\n  return \"_l((\" + exp + \"),\" +\n    \"function(\" + alias + iterator1 + iterator2 + \"){\" +\n      \"return \" + (genScopedSlot(key, el, state)) +\n    '})'\n}\n\nfunction genChildren (\n  el,\n  state,\n  checkSkip,\n  altGenElement,\n  altGenNode\n) {\n  var children = el.children;\n  if (children.length) {\n    var el$1 = children[0];\n    // optimize single v-for\n    if (children.length === 1 &&\n      el$1.for &&\n      el$1.tag !== 'template' &&\n      el$1.tag !== 'slot'\n    ) {\n      return (altGenElement || genElement)(el$1, state)\n    }\n    var normalizationType = checkSkip\n      ? getNormalizationType(children, state.maybeComponent)\n      : 0;\n    var gen = altGenNode || genNode;\n    return (\"[\" + (children.map(function (c) { return gen(c, state); }).join(',')) + \"]\" + (normalizationType ? (\",\" + normalizationType) : ''))\n  }\n}\n\n// determine the normalization needed for the children array.\n// 0: no normalization needed\n// 1: simple normalization needed (possible 1-level deep nested array)\n// 2: full normalization needed\nfunction getNormalizationType (\n  children,\n  maybeComponent\n) {\n  var res = 0;\n  for (var i = 0; i < children.length; i++) {\n    var el = children[i];\n    if (el.type !== 1) {\n      continue\n    }\n    if (needsNormalization(el) ||\n        (el.ifConditions && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {\n      res = 2;\n      break\n    }\n    if (maybeComponent(el) ||\n        (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {\n      res = 1;\n    }\n  }\n  return res\n}\n\nfunction needsNormalization (el) {\n  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'\n}\n\nfunction genNode (node, state) {\n  if (node.type === 1) {\n    return genElement(node, state)\n  } if (node.type === 3 && node.isComment) {\n    return genComment(node)\n  } else {\n    return genText(node)\n  }\n}\n\nfunction genText (text) {\n  return (\"_v(\" + (text.type === 2\n    ? text.expression // no need for () because already wrapped in _s()\n    : transformSpecialNewlines(JSON.stringify(text.text))) + \")\")\n}\n\nfunction genComment (comment) {\n  return (\"_e(\" + (JSON.stringify(comment.text)) + \")\")\n}\n\nfunction genSlot (el, state) {\n  var slotName = el.slotName || '\"default\"';\n  var children = genChildren(el, state);\n  var res = \"_t(\" + slotName + (children ? (\",\" + children) : '');\n  var attrs = el.attrs && (\"{\" + (el.attrs.map(function (a) { return ((camelize(a.name)) + \":\" + (a.value)); }).join(',')) + \"}\");\n  var bind$$1 = el.attrsMap['v-bind'];\n  if ((attrs || bind$$1) && !children) {\n    res += \",null\";\n  }\n  if (attrs) {\n    res += \",\" + attrs;\n  }\n  if (bind$$1) {\n    res += (attrs ? '' : ',null') + \",\" + bind$$1;\n  }\n  return res + ')'\n}\n\n// componentName is el.component, take it as argument to shun flow's pessimistic refinement\nfunction genComponent (\n  componentName,\n  el,\n  state\n) {\n  var children = el.inlineTemplate ? null : genChildren(el, state, true);\n  return (\"_c(\" + componentName + \",\" + (genData$2(el, state)) + (children ? (\",\" + children) : '') + \")\")\n}\n\nfunction genProps (props) {\n  var res = '';\n  for (var i = 0; i < props.length; i++) {\n    var prop = props[i];\n    res += \"\\\"\" + (prop.name) + \"\\\":\" + (transformSpecialNewlines(prop.value)) + \",\";\n  }\n  return res.slice(0, -1)\n}\n\n// #3895, #4268\nfunction transformSpecialNewlines (text) {\n  return text\n    .replace(/\\u2028/g, '\\\\u2028')\n    .replace(/\\u2029/g, '\\\\u2029')\n}\n\n/*  */\n\n// these keywords should not appear inside expressions, but operators like\n// typeof, instanceof and in are allowed\nvar prohibitedKeywordRE = new RegExp('\\\\b' + (\n  'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +\n  'super,throw,while,yield,delete,export,import,return,switch,default,' +\n  'extends,finally,continue,debugger,function,arguments'\n).split(',').join('\\\\b|\\\\b') + '\\\\b');\n\n// these unary operators should not be used as property/method names\nvar unaryOperatorsRE = new RegExp('\\\\b' + (\n  'delete,typeof,void'\n).split(',').join('\\\\s*\\\\([^\\\\)]*\\\\)|\\\\b') + '\\\\s*\\\\([^\\\\)]*\\\\)');\n\n// check valid identifier for v-for\nvar identRE = /[A-Za-z_$][\\w$]*/;\n\n// strip strings in expressions\nvar stripStringRE = /'(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\]|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`/g;\n\n// detect problematic expressions in a template\nfunction detectErrors (ast) {\n  var errors = [];\n  if (ast) {\n    checkNode(ast, errors);\n  }\n  return errors\n}\n\nfunction checkNode (node, errors) {\n  if (node.type === 1) {\n    for (var name in node.attrsMap) {\n      if (dirRE.test(name)) {\n        var value = node.attrsMap[name];\n        if (value) {\n          if (name === 'v-for') {\n            checkFor(node, (\"v-for=\\\"\" + value + \"\\\"\"), errors);\n          } else if (onRE.test(name)) {\n            checkEvent(value, (name + \"=\\\"\" + value + \"\\\"\"), errors);\n          } else {\n            checkExpression(value, (name + \"=\\\"\" + value + \"\\\"\"), errors);\n          }\n        }\n      }\n    }\n    if (node.children) {\n      for (var i = 0; i < node.children.length; i++) {\n        checkNode(node.children[i], errors);\n      }\n    }\n  } else if (node.type === 2) {\n    checkExpression(node.expression, node.text, errors);\n  }\n}\n\nfunction checkEvent (exp, text, errors) {\n  var stipped = exp.replace(stripStringRE, '');\n  var keywordMatch = stipped.match(unaryOperatorsRE);\n  if (keywordMatch && stipped.charAt(keywordMatch.index - 1) !== '$') {\n    errors.push(\n      \"avoid using JavaScript unary operator as property name: \" +\n      \"\\\"\" + (keywordMatch[0]) + \"\\\" in expression \" + (text.trim())\n    );\n  }\n  checkExpression(exp, text, errors);\n}\n\nfunction checkFor (node, text, errors) {\n  checkExpression(node.for || '', text, errors);\n  checkIdentifier(node.alias, 'v-for alias', text, errors);\n  checkIdentifier(node.iterator1, 'v-for iterator', text, errors);\n  checkIdentifier(node.iterator2, 'v-for iterator', text, errors);\n}\n\nfunction checkIdentifier (ident, type, text, errors) {\n  if (typeof ident === 'string' && !identRE.test(ident)) {\n    errors.push((\"invalid \" + type + \" \\\"\" + ident + \"\\\" in expression: \" + (text.trim())));\n  }\n}\n\nfunction checkExpression (exp, text, errors) {\n  try {\n    new Function((\"return \" + exp));\n  } catch (e) {\n    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);\n    if (keywordMatch) {\n      errors.push(\n        \"avoid using JavaScript keyword as property name: \" +\n        \"\\\"\" + (keywordMatch[0]) + \"\\\" in expression \" + (text.trim())\n      );\n    } else {\n      errors.push((\"invalid expression: \" + (text.trim())));\n    }\n  }\n}\n\n/*  */\n\nfunction createFunction (code, errors) {\n  try {\n    return new Function(code)\n  } catch (err) {\n    errors.push({ err: err, code: code });\n    return noop\n  }\n}\n\nfunction createCompileToFunctionFn (compile) {\n  var cache = Object.create(null);\n\n  return function compileToFunctions (\n    template,\n    options,\n    vm\n  ) {\n    options = options || {};\n\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production') {\n      // detect possible CSP restriction\n      try {\n        new Function('return 1');\n      } catch (e) {\n        if (e.toString().match(/unsafe-eval|CSP/)) {\n          warn(\n            'It seems you are using the standalone build of Vue.js in an ' +\n            'environment with Content Security Policy that prohibits unsafe-eval. ' +\n            'The template compiler cannot work in this environment. Consider ' +\n            'relaxing the policy to allow unsafe-eval or pre-compiling your ' +\n            'templates into render functions.'\n          );\n        }\n      }\n    }\n\n    // check cache\n    var key = options.delimiters\n      ? String(options.delimiters) + template\n      : template;\n    if (cache[key]) {\n      return cache[key]\n    }\n\n    // compile\n    var compiled = compile(template, options);\n\n    // check compilation errors/tips\n    if (process.env.NODE_ENV !== 'production') {\n      if (compiled.errors && compiled.errors.length) {\n        warn(\n          \"Error compiling template:\\n\\n\" + template + \"\\n\\n\" +\n          compiled.errors.map(function (e) { return (\"- \" + e); }).join('\\n') + '\\n',\n          vm\n        );\n      }\n      if (compiled.tips && compiled.tips.length) {\n        compiled.tips.forEach(function (msg) { return tip(msg, vm); });\n      }\n    }\n\n    // turn code into functions\n    var res = {};\n    var fnGenErrors = [];\n    res.render = createFunction(compiled.render, fnGenErrors);\n    res.staticRenderFns = compiled.staticRenderFns.map(function (code) {\n      return createFunction(code, fnGenErrors)\n    });\n\n    // check function generation errors.\n    // this should only happen if there is a bug in the compiler itself.\n    // mostly for codegen development use\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production') {\n      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {\n        warn(\n          \"Failed to generate render function:\\n\\n\" +\n          fnGenErrors.map(function (ref) {\n            var err = ref.err;\n            var code = ref.code;\n\n            return ((err.toString()) + \" in\\n\\n\" + code + \"\\n\");\n        }).join('\\n'),\n          vm\n        );\n      }\n    }\n\n    return (cache[key] = res)\n  }\n}\n\n/*  */\n\nfunction createCompilerCreator (baseCompile) {\n  return function createCompiler (baseOptions) {\n    function compile (\n      template,\n      options\n    ) {\n      var finalOptions = Object.create(baseOptions);\n      var errors = [];\n      var tips = [];\n      finalOptions.warn = function (msg, tip) {\n        (tip ? tips : errors).push(msg);\n      };\n\n      if (options) {\n        // merge custom modules\n        if (options.modules) {\n          finalOptions.modules =\n            (baseOptions.modules || []).concat(options.modules);\n        }\n        // merge custom directives\n        if (options.directives) {\n          finalOptions.directives = extend(\n            Object.create(baseOptions.directives),\n            options.directives\n          );\n        }\n        // copy other options\n        for (var key in options) {\n          if (key !== 'modules' && key !== 'directives') {\n            finalOptions[key] = options[key];\n          }\n        }\n      }\n\n      var compiled = baseCompile(template, finalOptions);\n      if (process.env.NODE_ENV !== 'production') {\n        errors.push.apply(errors, detectErrors(compiled.ast));\n      }\n      compiled.errors = errors;\n      compiled.tips = tips;\n      return compiled\n    }\n\n    return {\n      compile: compile,\n      compileToFunctions: createCompileToFunctionFn(compile)\n    }\n  }\n}\n\n/*  */\n\n// `createCompilerCreator` allows creating compilers that use alternative\n// parser/optimizer/codegen, e.g the SSR optimizing compiler.\n// Here we just export a default compiler using the default parts.\nvar createCompiler = createCompilerCreator(function baseCompile (\n  template,\n  options\n) {\n  var ast = parse(template.trim(), options);\n  optimize(ast, options);\n  var code = generate(ast, options);\n  return {\n    ast: ast,\n    render: code.render,\n    staticRenderFns: code.staticRenderFns\n  }\n});\n\n/*  */\n\nvar ref$1 = createCompiler(baseOptions);\nvar compileToFunctions = ref$1.compileToFunctions;\n\n/*  */\n\nvar idToTemplate = cached(function (id) {\n  var el = query(id);\n  return el && el.innerHTML\n});\n\nvar mount = Vue$3.prototype.$mount;\nVue$3.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && query(el);\n\n  /* istanbul ignore if */\n  if (el === document.body || el === document.documentElement) {\n    process.env.NODE_ENV !== 'production' && warn(\n      \"Do not mount Vue to <html> or <body> - mount to normal elements instead.\"\n    );\n    return this\n  }\n\n  var options = this.$options;\n  // resolve template/el and convert to render function\n  if (!options.render) {\n    var template = options.template;\n    if (template) {\n      if (typeof template === 'string') {\n        if (template.charAt(0) === '#') {\n          template = idToTemplate(template);\n          /* istanbul ignore if */\n          if (process.env.NODE_ENV !== 'production' && !template) {\n            warn(\n              (\"Template element not found or is empty: \" + (options.template)),\n              this\n            );\n          }\n        }\n      } else if (template.nodeType) {\n        template = template.innerHTML;\n      } else {\n        if (process.env.NODE_ENV !== 'production') {\n          warn('invalid template option:' + template, this);\n        }\n        return this\n      }\n    } else if (el) {\n      template = getOuterHTML(el);\n    }\n    if (template) {\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n        mark('compile');\n      }\n\n      var ref = compileToFunctions(template, {\n        shouldDecodeNewlines: shouldDecodeNewlines,\n        delimiters: options.delimiters,\n        comments: options.comments\n      }, this);\n      var render = ref.render;\n      var staticRenderFns = ref.staticRenderFns;\n      options.render = render;\n      options.staticRenderFns = staticRenderFns;\n\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && config.performance && mark) {\n        mark('compile end');\n        measure(((this._name) + \" compile\"), 'compile', 'compile end');\n      }\n    }\n  }\n  return mount.call(this, el, hydrating)\n};\n\n/**\n * Get outerHTML of elements, taking care\n * of SVG elements in IE as well.\n */\nfunction getOuterHTML (el) {\n  if (el.outerHTML) {\n    return el.outerHTML\n  } else {\n    var container = document.createElement('div');\n    container.appendChild(el.cloneNode(true));\n    return container.innerHTML\n  }\n}\n\nVue$3.compile = compileToFunctions;\n\nmodule.exports = Vue$3;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), (function() { return this; }())))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 2 */
/***/ (function(module, exports) {

	eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	eval("/* WEBPACK VAR INJECTION */(function(process) {/**\n  * vue-router v2.7.0\n  * (c) 2017 Evan You\n  * @license MIT\n  */\n'use strict';\n\n/*  */\n\nfunction assert (condition, message) {\n  if (!condition) {\n    throw new Error((\"[vue-router] \" + message))\n  }\n}\n\nfunction warn (condition, message) {\n  if (process.env.NODE_ENV !== 'production' && !condition) {\n    typeof console !== 'undefined' && console.warn((\"[vue-router] \" + message));\n  }\n}\n\nfunction isError (err) {\n  return Object.prototype.toString.call(err).indexOf('Error') > -1\n}\n\nvar View = {\n  name: 'router-view',\n  functional: true,\n  props: {\n    name: {\n      type: String,\n      default: 'default'\n    }\n  },\n  render: function render (_, ref) {\n    var props = ref.props;\n    var children = ref.children;\n    var parent = ref.parent;\n    var data = ref.data;\n\n    data.routerView = true;\n\n    // directly use parent context's createElement() function\n    // so that components rendered by router-view can resolve named slots\n    var h = parent.$createElement;\n    var name = props.name;\n    var route = parent.$route;\n    var cache = parent._routerViewCache || (parent._routerViewCache = {});\n\n    // determine current view depth, also check to see if the tree\n    // has been toggled inactive but kept-alive.\n    var depth = 0;\n    var inactive = false;\n    while (parent && parent._routerRoot !== parent) {\n      if (parent.$vnode && parent.$vnode.data.routerView) {\n        depth++;\n      }\n      if (parent._inactive) {\n        inactive = true;\n      }\n      parent = parent.$parent;\n    }\n    data.routerViewDepth = depth;\n\n    // render previous view if the tree is inactive and kept-alive\n    if (inactive) {\n      return h(cache[name], data, children)\n    }\n\n    var matched = route.matched[depth];\n    // render empty node if no matched route\n    if (!matched) {\n      cache[name] = null;\n      return h()\n    }\n\n    var component = cache[name] = matched.components[name];\n\n    // attach instance registration hook\n    // this will be called in the instance's injected lifecycle hooks\n    data.registerRouteInstance = function (vm, val) {\n      // val could be undefined for unregistration\n      var current = matched.instances[name];\n      if (\n        (val && current !== vm) ||\n        (!val && current === vm)\n      ) {\n        matched.instances[name] = val;\n      }\n    }\n\n    // also regiseter instance in prepatch hook\n    // in case the same component instance is reused across different routes\n    ;(data.hook || (data.hook = {})).prepatch = function (_, vnode) {\n      matched.instances[name] = vnode.componentInstance;\n    };\n\n    // resolve props\n    data.props = resolveProps(route, matched.props && matched.props[name]);\n\n    return h(component, data, children)\n  }\n};\n\nfunction resolveProps (route, config) {\n  switch (typeof config) {\n    case 'undefined':\n      return\n    case 'object':\n      return config\n    case 'function':\n      return config(route)\n    case 'boolean':\n      return config ? route.params : undefined\n    default:\n      if (process.env.NODE_ENV !== 'production') {\n        warn(\n          false,\n          \"props in \\\"\" + (route.path) + \"\\\" is a \" + (typeof config) + \", \" +\n          \"expecting an object, function or boolean.\"\n        );\n      }\n  }\n}\n\n/*  */\n\nvar encodeReserveRE = /[!'()*]/g;\nvar encodeReserveReplacer = function (c) { return '%' + c.charCodeAt(0).toString(16); };\nvar commaRE = /%2C/g;\n\n// fixed encodeURIComponent which is more conformant to RFC3986:\n// - escapes [!'()*]\n// - preserve commas\nvar encode = function (str) { return encodeURIComponent(str)\n  .replace(encodeReserveRE, encodeReserveReplacer)\n  .replace(commaRE, ','); };\n\nvar decode = decodeURIComponent;\n\nfunction resolveQuery (\n  query,\n  extraQuery,\n  _parseQuery\n) {\n  if ( extraQuery === void 0 ) extraQuery = {};\n\n  var parse = _parseQuery || parseQuery;\n  var parsedQuery;\n  try {\n    parsedQuery = parse(query || '');\n  } catch (e) {\n    process.env.NODE_ENV !== 'production' && warn(false, e.message);\n    parsedQuery = {};\n  }\n  for (var key in extraQuery) {\n    var val = extraQuery[key];\n    parsedQuery[key] = Array.isArray(val) ? val.slice() : val;\n  }\n  return parsedQuery\n}\n\nfunction parseQuery (query) {\n  var res = {};\n\n  query = query.trim().replace(/^(\\?|#|&)/, '');\n\n  if (!query) {\n    return res\n  }\n\n  query.split('&').forEach(function (param) {\n    var parts = param.replace(/\\+/g, ' ').split('=');\n    var key = decode(parts.shift());\n    var val = parts.length > 0\n      ? decode(parts.join('='))\n      : null;\n\n    if (res[key] === undefined) {\n      res[key] = val;\n    } else if (Array.isArray(res[key])) {\n      res[key].push(val);\n    } else {\n      res[key] = [res[key], val];\n    }\n  });\n\n  return res\n}\n\nfunction stringifyQuery (obj) {\n  var res = obj ? Object.keys(obj).map(function (key) {\n    var val = obj[key];\n\n    if (val === undefined) {\n      return ''\n    }\n\n    if (val === null) {\n      return encode(key)\n    }\n\n    if (Array.isArray(val)) {\n      var result = [];\n      val.forEach(function (val2) {\n        if (val2 === undefined) {\n          return\n        }\n        if (val2 === null) {\n          result.push(encode(key));\n        } else {\n          result.push(encode(key) + '=' + encode(val2));\n        }\n      });\n      return result.join('&')\n    }\n\n    return encode(key) + '=' + encode(val)\n  }).filter(function (x) { return x.length > 0; }).join('&') : null;\n  return res ? (\"?\" + res) : ''\n}\n\n/*  */\n\n\nvar trailingSlashRE = /\\/?$/;\n\nfunction createRoute (\n  record,\n  location,\n  redirectedFrom,\n  router\n) {\n  var stringifyQuery$$1 = router && router.options.stringifyQuery;\n  var route = {\n    name: location.name || (record && record.name),\n    meta: (record && record.meta) || {},\n    path: location.path || '/',\n    hash: location.hash || '',\n    query: location.query || {},\n    params: location.params || {},\n    fullPath: getFullPath(location, stringifyQuery$$1),\n    matched: record ? formatMatch(record) : []\n  };\n  if (redirectedFrom) {\n    route.redirectedFrom = getFullPath(redirectedFrom, stringifyQuery$$1);\n  }\n  return Object.freeze(route)\n}\n\n// the starting route that represents the initial state\nvar START = createRoute(null, {\n  path: '/'\n});\n\nfunction formatMatch (record) {\n  var res = [];\n  while (record) {\n    res.unshift(record);\n    record = record.parent;\n  }\n  return res\n}\n\nfunction getFullPath (\n  ref,\n  _stringifyQuery\n) {\n  var path = ref.path;\n  var query = ref.query; if ( query === void 0 ) query = {};\n  var hash = ref.hash; if ( hash === void 0 ) hash = '';\n\n  var stringify = _stringifyQuery || stringifyQuery;\n  return (path || '/') + stringify(query) + hash\n}\n\nfunction isSameRoute (a, b) {\n  if (b === START) {\n    return a === b\n  } else if (!b) {\n    return false\n  } else if (a.path && b.path) {\n    return (\n      a.path.replace(trailingSlashRE, '') === b.path.replace(trailingSlashRE, '') &&\n      a.hash === b.hash &&\n      isObjectEqual(a.query, b.query)\n    )\n  } else if (a.name && b.name) {\n    return (\n      a.name === b.name &&\n      a.hash === b.hash &&\n      isObjectEqual(a.query, b.query) &&\n      isObjectEqual(a.params, b.params)\n    )\n  } else {\n    return false\n  }\n}\n\nfunction isObjectEqual (a, b) {\n  if ( a === void 0 ) a = {};\n  if ( b === void 0 ) b = {};\n\n  var aKeys = Object.keys(a);\n  var bKeys = Object.keys(b);\n  if (aKeys.length !== bKeys.length) {\n    return false\n  }\n  return aKeys.every(function (key) {\n    var aVal = a[key];\n    var bVal = b[key];\n    // check nested equality\n    if (typeof aVal === 'object' && typeof bVal === 'object') {\n      return isObjectEqual(aVal, bVal)\n    }\n    return String(aVal) === String(bVal)\n  })\n}\n\nfunction isIncludedRoute (current, target) {\n  return (\n    current.path.replace(trailingSlashRE, '/').indexOf(\n      target.path.replace(trailingSlashRE, '/')\n    ) === 0 &&\n    (!target.hash || current.hash === target.hash) &&\n    queryIncludes(current.query, target.query)\n  )\n}\n\nfunction queryIncludes (current, target) {\n  for (var key in target) {\n    if (!(key in current)) {\n      return false\n    }\n  }\n  return true\n}\n\n/*  */\n\n// work around weird flow bug\nvar toTypes = [String, Object];\nvar eventTypes = [String, Array];\n\nvar Link = {\n  name: 'router-link',\n  props: {\n    to: {\n      type: toTypes,\n      required: true\n    },\n    tag: {\n      type: String,\n      default: 'a'\n    },\n    exact: Boolean,\n    append: Boolean,\n    replace: Boolean,\n    activeClass: String,\n    exactActiveClass: String,\n    event: {\n      type: eventTypes,\n      default: 'click'\n    }\n  },\n  render: function render (h) {\n    var this$1 = this;\n\n    var router = this.$router;\n    var current = this.$route;\n    var ref = router.resolve(this.to, current, this.append);\n    var location = ref.location;\n    var route = ref.route;\n    var href = ref.href;\n\n    var classes = {};\n    var globalActiveClass = router.options.linkActiveClass;\n    var globalExactActiveClass = router.options.linkExactActiveClass;\n    // Support global empty active class\n    var activeClassFallback = globalActiveClass == null\n            ? 'router-link-active'\n            : globalActiveClass;\n    var exactActiveClassFallback = globalExactActiveClass == null\n            ? 'router-link-exact-active'\n            : globalExactActiveClass;\n    var activeClass = this.activeClass == null\n            ? activeClassFallback\n            : this.activeClass;\n    var exactActiveClass = this.exactActiveClass == null\n            ? exactActiveClassFallback\n            : this.exactActiveClass;\n    var compareTarget = location.path\n      ? createRoute(null, location, null, router)\n      : route;\n\n    classes[exactActiveClass] = isSameRoute(current, compareTarget);\n    classes[activeClass] = this.exact\n      ? classes[exactActiveClass]\n      : isIncludedRoute(current, compareTarget);\n\n    var handler = function (e) {\n      if (guardEvent(e)) {\n        if (this$1.replace) {\n          router.replace(location);\n        } else {\n          router.push(location);\n        }\n      }\n    };\n\n    var on = { click: guardEvent };\n    if (Array.isArray(this.event)) {\n      this.event.forEach(function (e) { on[e] = handler; });\n    } else {\n      on[this.event] = handler;\n    }\n\n    var data = {\n      class: classes\n    };\n\n    if (this.tag === 'a') {\n      data.on = on;\n      data.attrs = { href: href };\n    } else {\n      // find the first <a> child and apply listener and href\n      var a = findAnchor(this.$slots.default);\n      if (a) {\n        // in case the <a> is a static node\n        a.isStatic = false;\n        var extend = _Vue.util.extend;\n        var aData = a.data = extend({}, a.data);\n        aData.on = on;\n        var aAttrs = a.data.attrs = extend({}, a.data.attrs);\n        aAttrs.href = href;\n      } else {\n        // doesn't have <a> child, apply listener to self\n        data.on = on;\n      }\n    }\n\n    return h(this.tag, data, this.$slots.default)\n  }\n};\n\nfunction guardEvent (e) {\n  // don't redirect with control keys\n  if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) { return }\n  // don't redirect when preventDefault called\n  if (e.defaultPrevented) { return }\n  // don't redirect on right click\n  if (e.button !== undefined && e.button !== 0) { return }\n  // don't redirect if `target=\"_blank\"`\n  if (e.currentTarget && e.currentTarget.getAttribute) {\n    var target = e.currentTarget.getAttribute('target');\n    if (/\\b_blank\\b/i.test(target)) { return }\n  }\n  // this may be a Weex event which doesn't have this method\n  if (e.preventDefault) {\n    e.preventDefault();\n  }\n  return true\n}\n\nfunction findAnchor (children) {\n  if (children) {\n    var child;\n    for (var i = 0; i < children.length; i++) {\n      child = children[i];\n      if (child.tag === 'a') {\n        return child\n      }\n      if (child.children && (child = findAnchor(child.children))) {\n        return child\n      }\n    }\n  }\n}\n\nvar _Vue;\n\nfunction install (Vue) {\n  if (install.installed) { return }\n  install.installed = true;\n\n  _Vue = Vue;\n\n  var isDef = function (v) { return v !== undefined; };\n\n  var registerInstance = function (vm, callVal) {\n    var i = vm.$options._parentVnode;\n    if (isDef(i) && isDef(i = i.data) && isDef(i = i.registerRouteInstance)) {\n      i(vm, callVal);\n    }\n  };\n\n  Vue.mixin({\n    beforeCreate: function beforeCreate () {\n      if (isDef(this.$options.router)) {\n        this._routerRoot = this;\n        this._router = this.$options.router;\n        this._router.init(this);\n        Vue.util.defineReactive(this, '_route', this._router.history.current);\n      } else {\n        this._routerRoot = (this.$parent && this.$parent._routerRoot) || this;\n      }\n      registerInstance(this, this);\n    },\n    destroyed: function destroyed () {\n      registerInstance(this);\n    }\n  });\n\n  Object.defineProperty(Vue.prototype, '$router', {\n    get: function get () { return this._routerRoot._router }\n  });\n\n  Object.defineProperty(Vue.prototype, '$route', {\n    get: function get () { return this._routerRoot._route }\n  });\n\n  Vue.component('router-view', View);\n  Vue.component('router-link', Link);\n\n  var strats = Vue.config.optionMergeStrategies;\n  // use the same hook merging strategy for route hooks\n  strats.beforeRouteEnter = strats.beforeRouteLeave = strats.beforeRouteUpdate = strats.created;\n}\n\n/*  */\n\nvar inBrowser = typeof window !== 'undefined';\n\n/*  */\n\nfunction resolvePath (\n  relative,\n  base,\n  append\n) {\n  var firstChar = relative.charAt(0);\n  if (firstChar === '/') {\n    return relative\n  }\n\n  if (firstChar === '?' || firstChar === '#') {\n    return base + relative\n  }\n\n  var stack = base.split('/');\n\n  // remove trailing segment if:\n  // - not appending\n  // - appending to trailing slash (last segment is empty)\n  if (!append || !stack[stack.length - 1]) {\n    stack.pop();\n  }\n\n  // resolve relative path\n  var segments = relative.replace(/^\\//, '').split('/');\n  for (var i = 0; i < segments.length; i++) {\n    var segment = segments[i];\n    if (segment === '..') {\n      stack.pop();\n    } else if (segment !== '.') {\n      stack.push(segment);\n    }\n  }\n\n  // ensure leading slash\n  if (stack[0] !== '') {\n    stack.unshift('');\n  }\n\n  return stack.join('/')\n}\n\nfunction parsePath (path) {\n  var hash = '';\n  var query = '';\n\n  var hashIndex = path.indexOf('#');\n  if (hashIndex >= 0) {\n    hash = path.slice(hashIndex);\n    path = path.slice(0, hashIndex);\n  }\n\n  var queryIndex = path.indexOf('?');\n  if (queryIndex >= 0) {\n    query = path.slice(queryIndex + 1);\n    path = path.slice(0, queryIndex);\n  }\n\n  return {\n    path: path,\n    query: query,\n    hash: hash\n  }\n}\n\nfunction cleanPath (path) {\n  return path.replace(/\\/\\//g, '/')\n}\n\nvar index$1 = Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n};\n\n/**\n * Expose `pathToRegexp`.\n */\nvar index = pathToRegexp;\nvar parse_1 = parse;\nvar compile_1 = compile;\nvar tokensToFunction_1 = tokensToFunction;\nvar tokensToRegExp_1 = tokensToRegExp;\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\n  // \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\n  '([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?|(\\\\*))'\n].join('|'), 'g');\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = [];\n  var key = 0;\n  var index = 0;\n  var path = '';\n  var defaultDelimiter = options && options.delimiter || '/';\n  var res;\n\n  while ((res = PATH_REGEXP.exec(str)) != null) {\n    var m = res[0];\n    var escaped = res[1];\n    var offset = res.index;\n    path += str.slice(index, offset);\n    index = offset + m.length;\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1];\n      continue\n    }\n\n    var next = str[index];\n    var prefix = res[2];\n    var name = res[3];\n    var capture = res[4];\n    var group = res[5];\n    var modifier = res[6];\n    var asterisk = res[7];\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path);\n      path = '';\n    }\n\n    var partial = prefix != null && next != null && next !== prefix;\n    var repeat = modifier === '+' || modifier === '*';\n    var optional = modifier === '?' || modifier === '*';\n    var delimiter = res[2] || defaultDelimiter;\n    var pattern = capture || group;\n\n    tokens.push({\n      name: name || key++,\n      prefix: prefix || '',\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      asterisk: !!asterisk,\n      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')\n    });\n  }\n\n  // Match any characters still remaining.\n  if (index < str.length) {\n    path += str.substr(index);\n  }\n\n  // If the path exists, push it onto the end.\n  if (path) {\n    tokens.push(path);\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options))\n}\n\n/**\n * Prettier encoding of URI path segments.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeURIComponentPretty (str) {\n  return encodeURI(str).replace(/[\\/?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeAsterisk (str) {\n  return encodeURI(str).replace(/[?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length);\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');\n    }\n  }\n\n  return function (obj, opts) {\n    var path = '';\n    var data = obj || {};\n    var options = opts || {};\n    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i];\n\n      if (typeof token === 'string') {\n        path += token;\n\n        continue\n      }\n\n      var value = data[token.name];\n      var segment;\n\n      if (value == null) {\n        if (token.optional) {\n          // Prepend partial segment prefixes.\n          if (token.partial) {\n            path += token.prefix;\n          }\n\n          continue\n        } else {\n          throw new TypeError('Expected \"' + token.name + '\" to be defined')\n        }\n      }\n\n      if (index$1(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received `' + JSON.stringify(value) + '`')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) {\n            continue\n          } else {\n            throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n          }\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j]);\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received `' + JSON.stringify(segment) + '`')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment;\n        }\n\n        continue\n      }\n\n      segment = token.asterisk ? encodeAsterisk(value) : encode(value);\n\n      if (!matches[i].test(segment)) {\n        throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"')\n      }\n\n      path += token.prefix + segment;\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1')\n}\n\n/**\n * Attach the keys as a property of the regexp.\n *\n * @param  {!RegExp} re\n * @param  {Array}   keys\n * @return {!RegExp}\n */\nfunction attachKeys (re, keys) {\n  re.keys = keys;\n  return re\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {!Array}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g);\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        asterisk: false,\n        pattern: null\n      });\n    }\n  }\n\n  return attachKeys(path, keys)\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array}   keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = [];\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source);\n  }\n\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));\n\n  return attachKeys(regexp, keys)\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {!Array}  keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}          tokens\n * @param  {(Array|Object)=} keys\n * @param  {Object=}         options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  if (!index$1(keys)) {\n    options = /** @type {!Object} */ (keys || options);\n    keys = [];\n  }\n\n  options = options || {};\n\n  var strict = options.strict;\n  var end = options.end !== false;\n  var route = '';\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n\n    if (typeof token === 'string') {\n      route += escapeString(token);\n    } else {\n      var prefix = escapeString(token.prefix);\n      var capture = '(?:' + token.pattern + ')';\n\n      keys.push(token);\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*';\n      }\n\n      if (token.optional) {\n        if (!token.partial) {\n          capture = '(?:' + prefix + '(' + capture + '))?';\n        } else {\n          capture = prefix + '(' + capture + ')?';\n        }\n      } else {\n        capture = prefix + '(' + capture + ')';\n      }\n\n      route += capture;\n    }\n  }\n\n  var delimiter = escapeString(options.delimiter || '/');\n  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;\n\n  // In non-strict mode we allow a slash at the end of match. If the path to\n  // match already ends with a slash, we remove it for consistency. The slash\n  // is valid at the end of a path match, not in the middle. This is important\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\n  if (!strict) {\n    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';\n  }\n\n  if (end) {\n    route += '$';\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';\n  }\n\n  return attachKeys(new RegExp('^' + route, flags(options)), keys)\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {(Array|Object)=}       keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (!index$1(keys)) {\n    options = /** @type {!Object} */ (keys || options);\n    keys = [];\n  }\n\n  options = options || {};\n\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, /** @type {!Array} */ (keys))\n  }\n\n  if (index$1(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)\n}\n\nindex.parse = parse_1;\nindex.compile = compile_1;\nindex.tokensToFunction = tokensToFunction_1;\nindex.tokensToRegExp = tokensToRegExp_1;\n\n/*  */\n\nvar regexpCompileCache = Object.create(null);\n\nfunction fillParams (\n  path,\n  params,\n  routeMsg\n) {\n  try {\n    var filler =\n      regexpCompileCache[path] ||\n      (regexpCompileCache[path] = index.compile(path));\n    return filler(params || {}, { pretty: true })\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      warn(false, (\"missing param for \" + routeMsg + \": \" + (e.message)));\n    }\n    return ''\n  }\n}\n\n/*  */\n\nfunction createRouteMap (\n  routes,\n  oldPathList,\n  oldPathMap,\n  oldNameMap\n) {\n  // the path list is used to control path matching priority\n  var pathList = oldPathList || [];\n  var pathMap = oldPathMap || Object.create(null);\n  var nameMap = oldNameMap || Object.create(null);\n\n  routes.forEach(function (route) {\n    addRouteRecord(pathList, pathMap, nameMap, route);\n  });\n\n  // ensure wildcard routes are always at the end\n  for (var i = 0, l = pathList.length; i < l; i++) {\n    if (pathList[i] === '*') {\n      pathList.push(pathList.splice(i, 1)[0]);\n      l--;\n      i--;\n    }\n  }\n\n  return {\n    pathList: pathList,\n    pathMap: pathMap,\n    nameMap: nameMap\n  }\n}\n\nfunction addRouteRecord (\n  pathList,\n  pathMap,\n  nameMap,\n  route,\n  parent,\n  matchAs\n) {\n  var path = route.path;\n  var name = route.name;\n  if (process.env.NODE_ENV !== 'production') {\n    assert(path != null, \"\\\"path\\\" is required in a route configuration.\");\n    assert(\n      typeof route.component !== 'string',\n      \"route config \\\"component\\\" for path: \" + (String(path || name)) + \" cannot be a \" +\n      \"string id. Use an actual component instead.\"\n    );\n  }\n\n  var normalizedPath = normalizePath(path, parent);\n  var pathToRegexpOptions = route.pathToRegexpOptions || {};\n\n  if (typeof route.caseSensitive === 'boolean') {\n    pathToRegexpOptions.sensitive = route.caseSensitive;\n  }\n\n  var record = {\n    path: normalizedPath,\n    regex: compileRouteRegex(normalizedPath, pathToRegexpOptions),\n    components: route.components || { default: route.component },\n    instances: {},\n    name: name,\n    parent: parent,\n    matchAs: matchAs,\n    redirect: route.redirect,\n    beforeEnter: route.beforeEnter,\n    meta: route.meta || {},\n    props: route.props == null\n      ? {}\n      : route.components\n        ? route.props\n        : { default: route.props }\n  };\n\n  if (route.children) {\n    // Warn if route is named, does not redirect and has a default child route.\n    // If users navigate to this route by name, the default child will\n    // not be rendered (GH Issue #629)\n    if (process.env.NODE_ENV !== 'production') {\n      if (route.name && !route.redirect && route.children.some(function (child) { return /^\\/?$/.test(child.path); })) {\n        warn(\n          false,\n          \"Named Route '\" + (route.name) + \"' has a default child route. \" +\n          \"When navigating to this named route (:to=\\\"{name: '\" + (route.name) + \"'\\\"), \" +\n          \"the default child route will not be rendered. Remove the name from \" +\n          \"this route and use the name of the default child route for named \" +\n          \"links instead.\"\n        );\n      }\n    }\n    route.children.forEach(function (child) {\n      var childMatchAs = matchAs\n        ? cleanPath((matchAs + \"/\" + (child.path)))\n        : undefined;\n      addRouteRecord(pathList, pathMap, nameMap, child, record, childMatchAs);\n    });\n  }\n\n  if (route.alias !== undefined) {\n    var aliases = Array.isArray(route.alias)\n      ? route.alias\n      : [route.alias];\n\n    aliases.forEach(function (alias) {\n      var aliasRoute = {\n        path: alias,\n        children: route.children\n      };\n      addRouteRecord(\n        pathList,\n        pathMap,\n        nameMap,\n        aliasRoute,\n        parent,\n        record.path || '/' // matchAs\n      );\n    });\n  }\n\n  if (!pathMap[record.path]) {\n    pathList.push(record.path);\n    pathMap[record.path] = record;\n  }\n\n  if (name) {\n    if (!nameMap[name]) {\n      nameMap[name] = record;\n    } else if (process.env.NODE_ENV !== 'production' && !matchAs) {\n      warn(\n        false,\n        \"Duplicate named routes definition: \" +\n        \"{ name: \\\"\" + name + \"\\\", path: \\\"\" + (record.path) + \"\\\" }\"\n      );\n    }\n  }\n}\n\nfunction compileRouteRegex (path, pathToRegexpOptions) {\n  var regex = index(path, [], pathToRegexpOptions);\n  if (process.env.NODE_ENV !== 'production') {\n    var keys = {};\n    regex.keys.forEach(function (key) {\n      warn(!keys[key.name], (\"Duplicate param keys in route with path: \\\"\" + path + \"\\\"\"));\n      keys[key.name] = true;\n    });\n  }\n  return regex\n}\n\nfunction normalizePath (path, parent) {\n  path = path.replace(/\\/$/, '');\n  if (path[0] === '/') { return path }\n  if (parent == null) { return path }\n  return cleanPath(((parent.path) + \"/\" + path))\n}\n\n/*  */\n\n\nfunction normalizeLocation (\n  raw,\n  current,\n  append,\n  router\n) {\n  var next = typeof raw === 'string' ? { path: raw } : raw;\n  // named target\n  if (next.name || next._normalized) {\n    return next\n  }\n\n  // relative params\n  if (!next.path && next.params && current) {\n    next = assign({}, next);\n    next._normalized = true;\n    var params = assign(assign({}, current.params), next.params);\n    if (current.name) {\n      next.name = current.name;\n      next.params = params;\n    } else if (current.matched.length) {\n      var rawPath = current.matched[current.matched.length - 1].path;\n      next.path = fillParams(rawPath, params, (\"path \" + (current.path)));\n    } else if (process.env.NODE_ENV !== 'production') {\n      warn(false, \"relative params navigation requires a current route.\");\n    }\n    return next\n  }\n\n  var parsedPath = parsePath(next.path || '');\n  var basePath = (current && current.path) || '/';\n  var path = parsedPath.path\n    ? resolvePath(parsedPath.path, basePath, append || next.append)\n    : basePath;\n\n  var query = resolveQuery(\n    parsedPath.query,\n    next.query,\n    router && router.options.parseQuery\n  );\n\n  var hash = next.hash || parsedPath.hash;\n  if (hash && hash.charAt(0) !== '#') {\n    hash = \"#\" + hash;\n  }\n\n  return {\n    _normalized: true,\n    path: path,\n    query: query,\n    hash: hash\n  }\n}\n\nfunction assign (a, b) {\n  for (var key in b) {\n    a[key] = b[key];\n  }\n  return a\n}\n\n/*  */\n\n\nfunction createMatcher (\n  routes,\n  router\n) {\n  var ref = createRouteMap(routes);\n  var pathList = ref.pathList;\n  var pathMap = ref.pathMap;\n  var nameMap = ref.nameMap;\n\n  function addRoutes (routes) {\n    createRouteMap(routes, pathList, pathMap, nameMap);\n  }\n\n  function match (\n    raw,\n    currentRoute,\n    redirectedFrom\n  ) {\n    var location = normalizeLocation(raw, currentRoute, false, router);\n    var name = location.name;\n\n    if (name) {\n      var record = nameMap[name];\n      if (process.env.NODE_ENV !== 'production') {\n        warn(record, (\"Route with name '\" + name + \"' does not exist\"));\n      }\n      if (!record) { return _createRoute(null, location) }\n      var paramNames = record.regex.keys\n        .filter(function (key) { return !key.optional; })\n        .map(function (key) { return key.name; });\n\n      if (typeof location.params !== 'object') {\n        location.params = {};\n      }\n\n      if (currentRoute && typeof currentRoute.params === 'object') {\n        for (var key in currentRoute.params) {\n          if (!(key in location.params) && paramNames.indexOf(key) > -1) {\n            location.params[key] = currentRoute.params[key];\n          }\n        }\n      }\n\n      if (record) {\n        location.path = fillParams(record.path, location.params, (\"named route \\\"\" + name + \"\\\"\"));\n        return _createRoute(record, location, redirectedFrom)\n      }\n    } else if (location.path) {\n      location.params = {};\n      for (var i = 0; i < pathList.length; i++) {\n        var path = pathList[i];\n        var record$1 = pathMap[path];\n        if (matchRoute(record$1.regex, location.path, location.params)) {\n          return _createRoute(record$1, location, redirectedFrom)\n        }\n      }\n    }\n    // no match\n    return _createRoute(null, location)\n  }\n\n  function redirect (\n    record,\n    location\n  ) {\n    var originalRedirect = record.redirect;\n    var redirect = typeof originalRedirect === 'function'\n        ? originalRedirect(createRoute(record, location, null, router))\n        : originalRedirect;\n\n    if (typeof redirect === 'string') {\n      redirect = { path: redirect };\n    }\n\n    if (!redirect || typeof redirect !== 'object') {\n      if (process.env.NODE_ENV !== 'production') {\n        warn(\n          false, (\"invalid redirect option: \" + (JSON.stringify(redirect)))\n        );\n      }\n      return _createRoute(null, location)\n    }\n\n    var re = redirect;\n    var name = re.name;\n    var path = re.path;\n    var query = location.query;\n    var hash = location.hash;\n    var params = location.params;\n    query = re.hasOwnProperty('query') ? re.query : query;\n    hash = re.hasOwnProperty('hash') ? re.hash : hash;\n    params = re.hasOwnProperty('params') ? re.params : params;\n\n    if (name) {\n      // resolved named direct\n      var targetRecord = nameMap[name];\n      if (process.env.NODE_ENV !== 'production') {\n        assert(targetRecord, (\"redirect failed: named route \\\"\" + name + \"\\\" not found.\"));\n      }\n      return match({\n        _normalized: true,\n        name: name,\n        query: query,\n        hash: hash,\n        params: params\n      }, undefined, location)\n    } else if (path) {\n      // 1. resolve relative redirect\n      var rawPath = resolveRecordPath(path, record);\n      // 2. resolve params\n      var resolvedPath = fillParams(rawPath, params, (\"redirect route with path \\\"\" + rawPath + \"\\\"\"));\n      // 3. rematch with existing query and hash\n      return match({\n        _normalized: true,\n        path: resolvedPath,\n        query: query,\n        hash: hash\n      }, undefined, location)\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        warn(false, (\"invalid redirect option: \" + (JSON.stringify(redirect))));\n      }\n      return _createRoute(null, location)\n    }\n  }\n\n  function alias (\n    record,\n    location,\n    matchAs\n  ) {\n    var aliasedPath = fillParams(matchAs, location.params, (\"aliased route with path \\\"\" + matchAs + \"\\\"\"));\n    var aliasedMatch = match({\n      _normalized: true,\n      path: aliasedPath\n    });\n    if (aliasedMatch) {\n      var matched = aliasedMatch.matched;\n      var aliasedRecord = matched[matched.length - 1];\n      location.params = aliasedMatch.params;\n      return _createRoute(aliasedRecord, location)\n    }\n    return _createRoute(null, location)\n  }\n\n  function _createRoute (\n    record,\n    location,\n    redirectedFrom\n  ) {\n    if (record && record.redirect) {\n      return redirect(record, redirectedFrom || location)\n    }\n    if (record && record.matchAs) {\n      return alias(record, location, record.matchAs)\n    }\n    return createRoute(record, location, redirectedFrom, router)\n  }\n\n  return {\n    match: match,\n    addRoutes: addRoutes\n  }\n}\n\nfunction matchRoute (\n  regex,\n  path,\n  params\n) {\n  var m = path.match(regex);\n\n  if (!m) {\n    return false\n  } else if (!params) {\n    return true\n  }\n\n  for (var i = 1, len = m.length; i < len; ++i) {\n    var key = regex.keys[i - 1];\n    var val = typeof m[i] === 'string' ? decodeURIComponent(m[i]) : m[i];\n    if (key) {\n      params[key.name] = val;\n    }\n  }\n\n  return true\n}\n\nfunction resolveRecordPath (path, record) {\n  return resolvePath(path, record.parent ? record.parent.path : '/', true)\n}\n\n/*  */\n\n\nvar positionStore = Object.create(null);\n\nfunction setupScroll () {\n  window.addEventListener('popstate', function (e) {\n    saveScrollPosition();\n    if (e.state && e.state.key) {\n      setStateKey(e.state.key);\n    }\n  });\n}\n\nfunction handleScroll (\n  router,\n  to,\n  from,\n  isPop\n) {\n  if (!router.app) {\n    return\n  }\n\n  var behavior = router.options.scrollBehavior;\n  if (!behavior) {\n    return\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    assert(typeof behavior === 'function', \"scrollBehavior must be a function\");\n  }\n\n  // wait until re-render finishes before scrolling\n  router.app.$nextTick(function () {\n    var position = getScrollPosition();\n    var shouldScroll = behavior(to, from, isPop ? position : null);\n    if (!shouldScroll) {\n      return\n    }\n    var isObject = typeof shouldScroll === 'object';\n    if (isObject && typeof shouldScroll.selector === 'string') {\n      var el = document.querySelector(shouldScroll.selector);\n      if (el) {\n        var offset = shouldScroll.offset && typeof shouldScroll.offset === 'object' ? shouldScroll.offset : {};\n        offset = normalizeOffset(offset);\n        position = getElementPosition(el, offset);\n      } else if (isValidPosition(shouldScroll)) {\n        position = normalizePosition(shouldScroll);\n      }\n    } else if (isObject && isValidPosition(shouldScroll)) {\n      position = normalizePosition(shouldScroll);\n    }\n\n    if (position) {\n      window.scrollTo(position.x, position.y);\n    }\n  });\n}\n\nfunction saveScrollPosition () {\n  var key = getStateKey();\n  if (key) {\n    positionStore[key] = {\n      x: window.pageXOffset,\n      y: window.pageYOffset\n    };\n  }\n}\n\nfunction getScrollPosition () {\n  var key = getStateKey();\n  if (key) {\n    return positionStore[key]\n  }\n}\n\nfunction getElementPosition (el, offset) {\n  var docEl = document.documentElement;\n  var docRect = docEl.getBoundingClientRect();\n  var elRect = el.getBoundingClientRect();\n  return {\n    x: elRect.left - docRect.left - offset.x,\n    y: elRect.top - docRect.top - offset.y\n  }\n}\n\nfunction isValidPosition (obj) {\n  return isNumber(obj.x) || isNumber(obj.y)\n}\n\nfunction normalizePosition (obj) {\n  return {\n    x: isNumber(obj.x) ? obj.x : window.pageXOffset,\n    y: isNumber(obj.y) ? obj.y : window.pageYOffset\n  }\n}\n\nfunction normalizeOffset (obj) {\n  return {\n    x: isNumber(obj.x) ? obj.x : 0,\n    y: isNumber(obj.y) ? obj.y : 0\n  }\n}\n\nfunction isNumber (v) {\n  return typeof v === 'number'\n}\n\n/*  */\n\nvar supportsPushState = inBrowser && (function () {\n  var ua = window.navigator.userAgent;\n\n  if (\n    (ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) &&\n    ua.indexOf('Mobile Safari') !== -1 &&\n    ua.indexOf('Chrome') === -1 &&\n    ua.indexOf('Windows Phone') === -1\n  ) {\n    return false\n  }\n\n  return window.history && 'pushState' in window.history\n})();\n\n// use User Timing api (if present) for more accurate key precision\nvar Time = inBrowser && window.performance && window.performance.now\n  ? window.performance\n  : Date;\n\nvar _key = genKey();\n\nfunction genKey () {\n  return Time.now().toFixed(3)\n}\n\nfunction getStateKey () {\n  return _key\n}\n\nfunction setStateKey (key) {\n  _key = key;\n}\n\nfunction pushState (url, replace) {\n  saveScrollPosition();\n  // try...catch the pushState call to get around Safari\n  // DOM Exception 18 where it limits to 100 pushState calls\n  var history = window.history;\n  try {\n    if (replace) {\n      history.replaceState({ key: _key }, '', url);\n    } else {\n      _key = genKey();\n      history.pushState({ key: _key }, '', url);\n    }\n  } catch (e) {\n    window.location[replace ? 'replace' : 'assign'](url);\n  }\n}\n\nfunction replaceState (url) {\n  pushState(url, true);\n}\n\n/*  */\n\nfunction runQueue (queue, fn, cb) {\n  var step = function (index) {\n    if (index >= queue.length) {\n      cb();\n    } else {\n      if (queue[index]) {\n        fn(queue[index], function () {\n          step(index + 1);\n        });\n      } else {\n        step(index + 1);\n      }\n    }\n  };\n  step(0);\n}\n\n/*  */\n\nfunction resolveAsyncComponents (matched) {\n  return function (to, from, next) {\n    var hasAsync = false;\n    var pending = 0;\n    var error = null;\n\n    flatMapComponents(matched, function (def, _, match, key) {\n      // if it's a function and doesn't have cid attached,\n      // assume it's an async component resolve function.\n      // we are not using Vue's default async resolving mechanism because\n      // we want to halt the navigation until the incoming component has been\n      // resolved.\n      if (typeof def === 'function' && def.cid === undefined) {\n        hasAsync = true;\n        pending++;\n\n        var resolve = once(function (resolvedDef) {\n          if (resolvedDef.__esModule && resolvedDef.default) {\n            resolvedDef = resolvedDef.default;\n          }\n          // save resolved on async factory in case it's used elsewhere\n          def.resolved = typeof resolvedDef === 'function'\n            ? resolvedDef\n            : _Vue.extend(resolvedDef);\n          match.components[key] = resolvedDef;\n          pending--;\n          if (pending <= 0) {\n            next();\n          }\n        });\n\n        var reject = once(function (reason) {\n          var msg = \"Failed to resolve async component \" + key + \": \" + reason;\n          process.env.NODE_ENV !== 'production' && warn(false, msg);\n          if (!error) {\n            error = isError(reason)\n              ? reason\n              : new Error(msg);\n            next(error);\n          }\n        });\n\n        var res;\n        try {\n          res = def(resolve, reject);\n        } catch (e) {\n          reject(e);\n        }\n        if (res) {\n          if (typeof res.then === 'function') {\n            res.then(resolve, reject);\n          } else {\n            // new syntax in Vue 2.3\n            var comp = res.component;\n            if (comp && typeof comp.then === 'function') {\n              comp.then(resolve, reject);\n            }\n          }\n        }\n      }\n    });\n\n    if (!hasAsync) { next(); }\n  }\n}\n\nfunction flatMapComponents (\n  matched,\n  fn\n) {\n  return flatten(matched.map(function (m) {\n    return Object.keys(m.components).map(function (key) { return fn(\n      m.components[key],\n      m.instances[key],\n      m, key\n    ); })\n  }))\n}\n\nfunction flatten (arr) {\n  return Array.prototype.concat.apply([], arr)\n}\n\n// in Webpack 2, require.ensure now also returns a Promise\n// so the resolve/reject functions may get called an extra time\n// if the user uses an arrow function shorthand that happens to\n// return that Promise.\nfunction once (fn) {\n  var called = false;\n  return function () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    if (called) { return }\n    called = true;\n    return fn.apply(this, args)\n  }\n}\n\n/*  */\n\nvar History = function History (router, base) {\n  this.router = router;\n  this.base = normalizeBase(base);\n  // start with a route object that stands for \"nowhere\"\n  this.current = START;\n  this.pending = null;\n  this.ready = false;\n  this.readyCbs = [];\n  this.readyErrorCbs = [];\n  this.errorCbs = [];\n};\n\nHistory.prototype.listen = function listen (cb) {\n  this.cb = cb;\n};\n\nHistory.prototype.onReady = function onReady (cb, errorCb) {\n  if (this.ready) {\n    cb();\n  } else {\n    this.readyCbs.push(cb);\n    if (errorCb) {\n      this.readyErrorCbs.push(errorCb);\n    }\n  }\n};\n\nHistory.prototype.onError = function onError (errorCb) {\n  this.errorCbs.push(errorCb);\n};\n\nHistory.prototype.transitionTo = function transitionTo (location, onComplete, onAbort) {\n    var this$1 = this;\n\n  var route = this.router.match(location, this.current);\n  this.confirmTransition(route, function () {\n    this$1.updateRoute(route);\n    onComplete && onComplete(route);\n    this$1.ensureURL();\n\n    // fire ready cbs once\n    if (!this$1.ready) {\n      this$1.ready = true;\n      this$1.readyCbs.forEach(function (cb) { cb(route); });\n    }\n  }, function (err) {\n    if (onAbort) {\n      onAbort(err);\n    }\n    if (err && !this$1.ready) {\n      this$1.ready = true;\n      this$1.readyErrorCbs.forEach(function (cb) { cb(err); });\n    }\n  });\n};\n\nHistory.prototype.confirmTransition = function confirmTransition (route, onComplete, onAbort) {\n    var this$1 = this;\n\n  var current = this.current;\n  var abort = function (err) {\n    if (isError(err)) {\n      if (this$1.errorCbs.length) {\n        this$1.errorCbs.forEach(function (cb) { cb(err); });\n      } else {\n        warn(false, 'uncaught error during route navigation:');\n        console.error(err);\n      }\n    }\n    onAbort && onAbort(err);\n  };\n  if (\n    isSameRoute(route, current) &&\n    // in the case the route map has been dynamically appended to\n    route.matched.length === current.matched.length\n  ) {\n    this.ensureURL();\n    return abort()\n  }\n\n  var ref = resolveQueue(this.current.matched, route.matched);\n    var updated = ref.updated;\n    var deactivated = ref.deactivated;\n    var activated = ref.activated;\n\n  var queue = [].concat(\n    // in-component leave guards\n    extractLeaveGuards(deactivated),\n    // global before hooks\n    this.router.beforeHooks,\n    // in-component update hooks\n    extractUpdateHooks(updated),\n    // in-config enter guards\n    activated.map(function (m) { return m.beforeEnter; }),\n    // async components\n    resolveAsyncComponents(activated)\n  );\n\n  this.pending = route;\n  var iterator = function (hook, next) {\n    if (this$1.pending !== route) {\n      return abort()\n    }\n    try {\n      hook(route, current, function (to) {\n        if (to === false || isError(to)) {\n          // next(false) -> abort navigation, ensure current URL\n          this$1.ensureURL(true);\n          abort(to);\n        } else if (\n          typeof to === 'string' ||\n          (typeof to === 'object' && (\n            typeof to.path === 'string' ||\n            typeof to.name === 'string'\n          ))\n        ) {\n          // next('/') or next({ path: '/' }) -> redirect\n          abort();\n          if (typeof to === 'object' && to.replace) {\n            this$1.replace(to);\n          } else {\n            this$1.push(to);\n          }\n        } else {\n          // confirm transition and pass on the value\n          next(to);\n        }\n      });\n    } catch (e) {\n      abort(e);\n    }\n  };\n\n  runQueue(queue, iterator, function () {\n    var postEnterCbs = [];\n    var isValid = function () { return this$1.current === route; };\n    // wait until async components are resolved before\n    // extracting in-component enter guards\n    var enterGuards = extractEnterGuards(activated, postEnterCbs, isValid);\n    var queue = enterGuards.concat(this$1.router.resolveHooks);\n    runQueue(queue, iterator, function () {\n      if (this$1.pending !== route) {\n        return abort()\n      }\n      this$1.pending = null;\n      onComplete(route);\n      if (this$1.router.app) {\n        this$1.router.app.$nextTick(function () {\n          postEnterCbs.forEach(function (cb) { cb(); });\n        });\n      }\n    });\n  });\n};\n\nHistory.prototype.updateRoute = function updateRoute (route) {\n  var prev = this.current;\n  this.current = route;\n  this.cb && this.cb(route);\n  this.router.afterHooks.forEach(function (hook) {\n    hook && hook(route, prev);\n  });\n};\n\nfunction normalizeBase (base) {\n  if (!base) {\n    if (inBrowser) {\n      // respect <base> tag\n      var baseEl = document.querySelector('base');\n      base = (baseEl && baseEl.getAttribute('href')) || '/';\n      // strip full URL origin\n      base = base.replace(/^https?:\\/\\/[^\\/]+/, '');\n    } else {\n      base = '/';\n    }\n  }\n  // make sure there's the starting slash\n  if (base.charAt(0) !== '/') {\n    base = '/' + base;\n  }\n  // remove trailing slash\n  return base.replace(/\\/$/, '')\n}\n\nfunction resolveQueue (\n  current,\n  next\n) {\n  var i;\n  var max = Math.max(current.length, next.length);\n  for (i = 0; i < max; i++) {\n    if (current[i] !== next[i]) {\n      break\n    }\n  }\n  return {\n    updated: next.slice(0, i),\n    activated: next.slice(i),\n    deactivated: current.slice(i)\n  }\n}\n\nfunction extractGuards (\n  records,\n  name,\n  bind,\n  reverse\n) {\n  var guards = flatMapComponents(records, function (def, instance, match, key) {\n    var guard = extractGuard(def, name);\n    if (guard) {\n      return Array.isArray(guard)\n        ? guard.map(function (guard) { return bind(guard, instance, match, key); })\n        : bind(guard, instance, match, key)\n    }\n  });\n  return flatten(reverse ? guards.reverse() : guards)\n}\n\nfunction extractGuard (\n  def,\n  key\n) {\n  if (typeof def !== 'function') {\n    // extend now so that global mixins are applied.\n    def = _Vue.extend(def);\n  }\n  return def.options[key]\n}\n\nfunction extractLeaveGuards (deactivated) {\n  return extractGuards(deactivated, 'beforeRouteLeave', bindGuard, true)\n}\n\nfunction extractUpdateHooks (updated) {\n  return extractGuards(updated, 'beforeRouteUpdate', bindGuard)\n}\n\nfunction bindGuard (guard, instance) {\n  if (instance) {\n    return function boundRouteGuard () {\n      return guard.apply(instance, arguments)\n    }\n  }\n}\n\nfunction extractEnterGuards (\n  activated,\n  cbs,\n  isValid\n) {\n  return extractGuards(activated, 'beforeRouteEnter', function (guard, _, match, key) {\n    return bindEnterGuard(guard, match, key, cbs, isValid)\n  })\n}\n\nfunction bindEnterGuard (\n  guard,\n  match,\n  key,\n  cbs,\n  isValid\n) {\n  return function routeEnterGuard (to, from, next) {\n    return guard(to, from, function (cb) {\n      next(cb);\n      if (typeof cb === 'function') {\n        cbs.push(function () {\n          // #750\n          // if a router-view is wrapped with an out-in transition,\n          // the instance may not have been registered at this time.\n          // we will need to poll for registration until current route\n          // is no longer valid.\n          poll(cb, match.instances, key, isValid);\n        });\n      }\n    })\n  }\n}\n\nfunction poll (\n  cb, // somehow flow cannot infer this is a function\n  instances,\n  key,\n  isValid\n) {\n  if (instances[key]) {\n    cb(instances[key]);\n  } else if (isValid()) {\n    setTimeout(function () {\n      poll(cb, instances, key, isValid);\n    }, 16);\n  }\n}\n\n/*  */\n\n\nvar HTML5History = (function (History$$1) {\n  function HTML5History (router, base) {\n    var this$1 = this;\n\n    History$$1.call(this, router, base);\n\n    var expectScroll = router.options.scrollBehavior;\n\n    if (expectScroll) {\n      setupScroll();\n    }\n\n    window.addEventListener('popstate', function (e) {\n      var current = this$1.current;\n      this$1.transitionTo(getLocation(this$1.base), function (route) {\n        if (expectScroll) {\n          handleScroll(router, route, current, true);\n        }\n      });\n    });\n  }\n\n  if ( History$$1 ) HTML5History.__proto__ = History$$1;\n  HTML5History.prototype = Object.create( History$$1 && History$$1.prototype );\n  HTML5History.prototype.constructor = HTML5History;\n\n  HTML5History.prototype.go = function go (n) {\n    window.history.go(n);\n  };\n\n  HTML5History.prototype.push = function push (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    var ref = this;\n    var fromRoute = ref.current;\n    this.transitionTo(location, function (route) {\n      pushState(cleanPath(this$1.base + route.fullPath));\n      handleScroll(this$1.router, route, fromRoute, false);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  HTML5History.prototype.replace = function replace (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    var ref = this;\n    var fromRoute = ref.current;\n    this.transitionTo(location, function (route) {\n      replaceState(cleanPath(this$1.base + route.fullPath));\n      handleScroll(this$1.router, route, fromRoute, false);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  HTML5History.prototype.ensureURL = function ensureURL (push) {\n    if (getLocation(this.base) !== this.current.fullPath) {\n      var current = cleanPath(this.base + this.current.fullPath);\n      push ? pushState(current) : replaceState(current);\n    }\n  };\n\n  HTML5History.prototype.getCurrentLocation = function getCurrentLocation () {\n    return getLocation(this.base)\n  };\n\n  return HTML5History;\n}(History));\n\nfunction getLocation (base) {\n  var path = window.location.pathname;\n  if (base && path.indexOf(base) === 0) {\n    path = path.slice(base.length);\n  }\n  return (path || '/') + window.location.search + window.location.hash\n}\n\n/*  */\n\n\nvar HashHistory = (function (History$$1) {\n  function HashHistory (router, base, fallback) {\n    History$$1.call(this, router, base);\n    // check history fallback deeplinking\n    if (fallback && checkFallback(this.base)) {\n      return\n    }\n    ensureSlash();\n  }\n\n  if ( History$$1 ) HashHistory.__proto__ = History$$1;\n  HashHistory.prototype = Object.create( History$$1 && History$$1.prototype );\n  HashHistory.prototype.constructor = HashHistory;\n\n  // this is delayed until the app mounts\n  // to avoid the hashchange listener being fired too early\n  HashHistory.prototype.setupListeners = function setupListeners () {\n    var this$1 = this;\n\n    window.addEventListener('hashchange', function () {\n      if (!ensureSlash()) {\n        return\n      }\n      this$1.transitionTo(getHash(), function (route) {\n        replaceHash(route.fullPath);\n      });\n    });\n  };\n\n  HashHistory.prototype.push = function push (location, onComplete, onAbort) {\n    this.transitionTo(location, function (route) {\n      pushHash(route.fullPath);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  HashHistory.prototype.replace = function replace (location, onComplete, onAbort) {\n    this.transitionTo(location, function (route) {\n      replaceHash(route.fullPath);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  HashHistory.prototype.go = function go (n) {\n    window.history.go(n);\n  };\n\n  HashHistory.prototype.ensureURL = function ensureURL (push) {\n    var current = this.current.fullPath;\n    if (getHash() !== current) {\n      push ? pushHash(current) : replaceHash(current);\n    }\n  };\n\n  HashHistory.prototype.getCurrentLocation = function getCurrentLocation () {\n    return getHash()\n  };\n\n  return HashHistory;\n}(History));\n\nfunction checkFallback (base) {\n  var location = getLocation(base);\n  if (!/^\\/#/.test(location)) {\n    window.location.replace(\n      cleanPath(base + '/#' + location)\n    );\n    return true\n  }\n}\n\nfunction ensureSlash () {\n  var path = getHash();\n  if (path.charAt(0) === '/') {\n    return true\n  }\n  replaceHash('/' + path);\n  return false\n}\n\nfunction getHash () {\n  // We can't use window.location.hash here because it's not\n  // consistent across browsers - Firefox will pre-decode it!\n  var href = window.location.href;\n  var index = href.indexOf('#');\n  return index === -1 ? '' : href.slice(index + 1)\n}\n\nfunction pushHash (path) {\n  window.location.hash = path;\n}\n\nfunction replaceHash (path) {\n  var href = window.location.href;\n  var i = href.indexOf('#');\n  var base = i >= 0 ? href.slice(0, i) : href;\n  window.location.replace((base + \"#\" + path));\n}\n\n/*  */\n\n\nvar AbstractHistory = (function (History$$1) {\n  function AbstractHistory (router, base) {\n    History$$1.call(this, router, base);\n    this.stack = [];\n    this.index = -1;\n  }\n\n  if ( History$$1 ) AbstractHistory.__proto__ = History$$1;\n  AbstractHistory.prototype = Object.create( History$$1 && History$$1.prototype );\n  AbstractHistory.prototype.constructor = AbstractHistory;\n\n  AbstractHistory.prototype.push = function push (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    this.transitionTo(location, function (route) {\n      this$1.stack = this$1.stack.slice(0, this$1.index + 1).concat(route);\n      this$1.index++;\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  AbstractHistory.prototype.replace = function replace (location, onComplete, onAbort) {\n    var this$1 = this;\n\n    this.transitionTo(location, function (route) {\n      this$1.stack = this$1.stack.slice(0, this$1.index).concat(route);\n      onComplete && onComplete(route);\n    }, onAbort);\n  };\n\n  AbstractHistory.prototype.go = function go (n) {\n    var this$1 = this;\n\n    var targetIndex = this.index + n;\n    if (targetIndex < 0 || targetIndex >= this.stack.length) {\n      return\n    }\n    var route = this.stack[targetIndex];\n    this.confirmTransition(route, function () {\n      this$1.index = targetIndex;\n      this$1.updateRoute(route);\n    });\n  };\n\n  AbstractHistory.prototype.getCurrentLocation = function getCurrentLocation () {\n    var current = this.stack[this.stack.length - 1];\n    return current ? current.fullPath : '/'\n  };\n\n  AbstractHistory.prototype.ensureURL = function ensureURL () {\n    // noop\n  };\n\n  return AbstractHistory;\n}(History));\n\n/*  */\n\nvar VueRouter = function VueRouter (options) {\n  if ( options === void 0 ) options = {};\n\n  this.app = null;\n  this.apps = [];\n  this.options = options;\n  this.beforeHooks = [];\n  this.resolveHooks = [];\n  this.afterHooks = [];\n  this.matcher = createMatcher(options.routes || [], this);\n\n  var mode = options.mode || 'hash';\n  this.fallback = mode === 'history' && !supportsPushState && options.fallback !== false;\n  if (this.fallback) {\n    mode = 'hash';\n  }\n  if (!inBrowser) {\n    mode = 'abstract';\n  }\n  this.mode = mode;\n\n  switch (mode) {\n    case 'history':\n      this.history = new HTML5History(this, options.base);\n      break\n    case 'hash':\n      this.history = new HashHistory(this, options.base, this.fallback);\n      break\n    case 'abstract':\n      this.history = new AbstractHistory(this, options.base);\n      break\n    default:\n      if (process.env.NODE_ENV !== 'production') {\n        assert(false, (\"invalid mode: \" + mode));\n      }\n  }\n};\n\nvar prototypeAccessors = { currentRoute: {} };\n\nVueRouter.prototype.match = function match (\n  raw,\n  current,\n  redirectedFrom\n) {\n  return this.matcher.match(raw, current, redirectedFrom)\n};\n\nprototypeAccessors.currentRoute.get = function () {\n  return this.history && this.history.current\n};\n\nVueRouter.prototype.init = function init (app /* Vue component instance */) {\n    var this$1 = this;\n\n  process.env.NODE_ENV !== 'production' && assert(\n    install.installed,\n    \"not installed. Make sure to call `Vue.use(VueRouter)` \" +\n    \"before creating root instance.\"\n  );\n\n  this.apps.push(app);\n\n  // main app already initialized.\n  if (this.app) {\n    return\n  }\n\n  this.app = app;\n\n  var history = this.history;\n\n  if (history instanceof HTML5History) {\n    history.transitionTo(history.getCurrentLocation());\n  } else if (history instanceof HashHistory) {\n    var setupHashListener = function () {\n      history.setupListeners();\n    };\n    history.transitionTo(\n      history.getCurrentLocation(),\n      setupHashListener,\n      setupHashListener\n    );\n  }\n\n  history.listen(function (route) {\n    this$1.apps.forEach(function (app) {\n      app._route = route;\n    });\n  });\n};\n\nVueRouter.prototype.beforeEach = function beforeEach (fn) {\n  return registerHook(this.beforeHooks, fn)\n};\n\nVueRouter.prototype.beforeResolve = function beforeResolve (fn) {\n  return registerHook(this.resolveHooks, fn)\n};\n\nVueRouter.prototype.afterEach = function afterEach (fn) {\n  return registerHook(this.afterHooks, fn)\n};\n\nVueRouter.prototype.onReady = function onReady (cb, errorCb) {\n  this.history.onReady(cb, errorCb);\n};\n\nVueRouter.prototype.onError = function onError (errorCb) {\n  this.history.onError(errorCb);\n};\n\nVueRouter.prototype.push = function push (location, onComplete, onAbort) {\n  this.history.push(location, onComplete, onAbort);\n};\n\nVueRouter.prototype.replace = function replace (location, onComplete, onAbort) {\n  this.history.replace(location, onComplete, onAbort);\n};\n\nVueRouter.prototype.go = function go (n) {\n  this.history.go(n);\n};\n\nVueRouter.prototype.back = function back () {\n  this.go(-1);\n};\n\nVueRouter.prototype.forward = function forward () {\n  this.go(1);\n};\n\nVueRouter.prototype.getMatchedComponents = function getMatchedComponents (to) {\n  var route = to\n    ? to.matched\n      ? to\n      : this.resolve(to).route\n    : this.currentRoute;\n  if (!route) {\n    return []\n  }\n  return [].concat.apply([], route.matched.map(function (m) {\n    return Object.keys(m.components).map(function (key) {\n      return m.components[key]\n    })\n  }))\n};\n\nVueRouter.prototype.resolve = function resolve (\n  to,\n  current,\n  append\n) {\n  var location = normalizeLocation(\n    to,\n    current || this.history.current,\n    append,\n    this\n  );\n  var route = this.match(location, current);\n  var fullPath = route.redirectedFrom || route.fullPath;\n  var base = this.history.base;\n  var href = createHref(base, fullPath, this.mode);\n  return {\n    location: location,\n    route: route,\n    href: href,\n    // for backwards compat\n    normalizedTo: location,\n    resolved: route\n  }\n};\n\nVueRouter.prototype.addRoutes = function addRoutes (routes) {\n  this.matcher.addRoutes(routes);\n  if (this.history.current !== START) {\n    this.history.transitionTo(this.history.getCurrentLocation());\n  }\n};\n\nObject.defineProperties( VueRouter.prototype, prototypeAccessors );\n\nfunction registerHook (list, fn) {\n  list.push(fn);\n  return function () {\n    var i = list.indexOf(fn);\n    if (i > -1) { list.splice(i, 1); }\n  }\n}\n\nfunction createHref (base, fullPath, mode) {\n  var path = mode === 'hash' ? '#' + fullPath : fullPath;\n  return base ? cleanPath(base + '/' + path) : path\n}\n\nVueRouter.install = install;\nVueRouter.version = '2.7.0';\n\nif (inBrowser && window.Vue) {\n  window.Vue.use(VueRouter);\n}\n\nmodule.exports = VueRouter;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3Z1ZS1yb3V0ZXIvZGlzdC92dWUtcm91dGVyLmNvbW1vbi5qcz8zN2VjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0VBQXdFOztBQUV4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUssNkJBQTZCO0FBQ2xDO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLDBDQUEwQywyQ0FBMkM7QUFDckY7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0EseUJBQXlCOztBQUV6Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQSxHQUFHLHVCQUF1QixxQkFBcUIsRUFBRTtBQUNqRDtBQUNBOztBQUVBOzs7QUFHQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkM7QUFDQTtBQUNBLCtCQUErQjtBQUMvQixpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QixzQkFBc0I7O0FBRXRCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsY0FBYztBQUNkO0FBQ0EsdUNBQXVDLGlCQUFpQixFQUFFO0FBQzFELEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx5REFBeUQ7QUFDekQ7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQSxpREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixxQkFBcUI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSwwQkFBMEI7QUFDMUI7O0FBRUE7O0FBRUEsNEJBQTRCLHdCQUF3Qjs7QUFFcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsMEJBQTBCO0FBQzFCLEdBQUc7O0FBRUg7QUFDQSwwQkFBMEI7QUFDMUIsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQkFBaUIscUJBQXFCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVksT0FBTztBQUNuQixZQUFZLFFBQVE7QUFDcEIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVksT0FBTztBQUNuQixZQUFZLFFBQVE7QUFDcEIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUIsbUJBQW1CO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbUJBQW1CLG1CQUFtQjtBQUN0Qzs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7O0FBRUEsdUJBQXVCLGtCQUFrQjtBQUN6Qzs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLE9BQU87QUFDbkIsWUFBWTtBQUNaO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkM7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWSxPQUFPO0FBQ25CLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFFBQVE7QUFDcEIsWUFBWSxNQUFNO0FBQ2xCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQVksT0FBTztBQUNuQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWSxRQUFRO0FBQ3BCLFlBQVksT0FBTztBQUNuQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtQkFBbUIsbUJBQW1CO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWSxPQUFPO0FBQ25CLFlBQVksTUFBTTtBQUNsQixZQUFZLFFBQVE7QUFDcEIsWUFBWTtBQUNaO0FBQ0E7QUFDQTs7QUFFQSxpQkFBaUIsaUJBQWlCO0FBQ2xDO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLE9BQU87QUFDbkIsWUFBWSxPQUFPO0FBQ25CLFlBQVksUUFBUTtBQUNwQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsWUFBWSxPQUFPO0FBQ25CLFlBQVksZ0JBQWdCO0FBQzVCLFlBQVksUUFBUTtBQUNwQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLFFBQVE7QUFDakM7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUIsbUJBQW1CO0FBQ3BDOztBQUVBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsNkRBQTZEO0FBQzNFO0FBQ0EsWUFBWSxzQkFBc0I7QUFDbEMsWUFBWSxnQkFBZ0I7QUFDNUIsWUFBWSxRQUFRO0FBQ3BCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsUUFBUTtBQUNqQztBQUNBOztBQUVBOztBQUVBO0FBQ0EsMkNBQTJDLE9BQU87QUFDbEQ7O0FBRUE7QUFDQSxvQ0FBb0MsT0FBTyx1QkFBdUIsT0FBTztBQUN6RTs7QUFFQSxtQ0FBbUMsT0FBTyx1QkFBdUIsT0FBTztBQUN4RTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsR0FBRyxlQUFlO0FBQ2hELEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxzQ0FBc0MsT0FBTztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsMkJBQTJCO0FBQ2hFLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRkFBaUYsaUNBQWlDLEVBQUU7QUFDcEg7QUFDQTtBQUNBO0FBQ0EsdURBQXVEO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFVBQVUsMERBQTBEO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCLHVCQUF1QjtBQUN2QjtBQUNBOztBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MsWUFBWTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQSxnQ0FBZ0Msc0JBQXNCLEVBQUU7QUFDeEQsNkJBQTZCLGlCQUFpQixFQUFFOztBQUVoRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxxQkFBcUIscUJBQXFCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxrQkFBa0I7QUFDbEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQSxpQ0FBaUMsU0FBUztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7OztBQUdBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixZQUFZO0FBQ3hDLEtBQUs7QUFDTDtBQUNBLHlCQUF5QixZQUFZO0FBQ3JDO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUwsb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQXlEO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBLE1BQU0sRUFBRTtBQUNSLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLFdBQVcsRUFBRTtBQUMxRDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELFNBQVMsRUFBRTtBQUM3RDtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLFNBQVMsRUFBRTtBQUMxRCxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLHNCQUFzQixFQUFFO0FBQ3hEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxZQUFZO0FBQzVDO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwrQkFBK0IsaUNBQWlDO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QyxNQUFNLEVBQUU7QUFDdEQsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsMENBQTBDLEVBQUU7QUFDbEY7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwwQkFBMEIsaUJBQWlCOztBQUUzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixtQkFBbUI7QUFDcEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSIsImZpbGUiOiIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gICogdnVlLXJvdXRlciB2Mi43LjBcbiAgKiAoYykgMjAxNyBFdmFuIFlvdVxuICAqIEBsaWNlbnNlIE1JVFxuICAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gYXNzZXJ0IChjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgaWYgKCFjb25kaXRpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoKFwiW3Z1ZS1yb3V0ZXJdIFwiICsgbWVzc2FnZSkpXG4gIH1cbn1cblxuZnVuY3Rpb24gd2FybiAoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFjb25kaXRpb24pIHtcbiAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgY29uc29sZS53YXJuKChcIlt2dWUtcm91dGVyXSBcIiArIG1lc3NhZ2UpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0Vycm9yIChlcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlcnIpLmluZGV4T2YoJ0Vycm9yJykgPiAtMVxufVxuXG52YXIgVmlldyA9IHtcbiAgbmFtZTogJ3JvdXRlci12aWV3JyxcbiAgZnVuY3Rpb25hbDogdHJ1ZSxcbiAgcHJvcHM6IHtcbiAgICBuYW1lOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnZGVmYXVsdCdcbiAgICB9XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChfLCByZWYpIHtcbiAgICB2YXIgcHJvcHMgPSByZWYucHJvcHM7XG4gICAgdmFyIGNoaWxkcmVuID0gcmVmLmNoaWxkcmVuO1xuICAgIHZhciBwYXJlbnQgPSByZWYucGFyZW50O1xuICAgIHZhciBkYXRhID0gcmVmLmRhdGE7XG5cbiAgICBkYXRhLnJvdXRlclZpZXcgPSB0cnVlO1xuXG4gICAgLy8gZGlyZWN0bHkgdXNlIHBhcmVudCBjb250ZXh0J3MgY3JlYXRlRWxlbWVudCgpIGZ1bmN0aW9uXG4gICAgLy8gc28gdGhhdCBjb21wb25lbnRzIHJlbmRlcmVkIGJ5IHJvdXRlci12aWV3IGNhbiByZXNvbHZlIG5hbWVkIHNsb3RzXG4gICAgdmFyIGggPSBwYXJlbnQuJGNyZWF0ZUVsZW1lbnQ7XG4gICAgdmFyIG5hbWUgPSBwcm9wcy5uYW1lO1xuICAgIHZhciByb3V0ZSA9IHBhcmVudC4kcm91dGU7XG4gICAgdmFyIGNhY2hlID0gcGFyZW50Ll9yb3V0ZXJWaWV3Q2FjaGUgfHwgKHBhcmVudC5fcm91dGVyVmlld0NhY2hlID0ge30pO1xuXG4gICAgLy8gZGV0ZXJtaW5lIGN1cnJlbnQgdmlldyBkZXB0aCwgYWxzbyBjaGVjayB0byBzZWUgaWYgdGhlIHRyZWVcbiAgICAvLyBoYXMgYmVlbiB0b2dnbGVkIGluYWN0aXZlIGJ1dCBrZXB0LWFsaXZlLlxuICAgIHZhciBkZXB0aCA9IDA7XG4gICAgdmFyIGluYWN0aXZlID0gZmFsc2U7XG4gICAgd2hpbGUgKHBhcmVudCAmJiBwYXJlbnQuX3JvdXRlclJvb3QgIT09IHBhcmVudCkge1xuICAgICAgaWYgKHBhcmVudC4kdm5vZGUgJiYgcGFyZW50LiR2bm9kZS5kYXRhLnJvdXRlclZpZXcpIHtcbiAgICAgICAgZGVwdGgrKztcbiAgICAgIH1cbiAgICAgIGlmIChwYXJlbnQuX2luYWN0aXZlKSB7XG4gICAgICAgIGluYWN0aXZlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHBhcmVudCA9IHBhcmVudC4kcGFyZW50O1xuICAgIH1cbiAgICBkYXRhLnJvdXRlclZpZXdEZXB0aCA9IGRlcHRoO1xuXG4gICAgLy8gcmVuZGVyIHByZXZpb3VzIHZpZXcgaWYgdGhlIHRyZWUgaXMgaW5hY3RpdmUgYW5kIGtlcHQtYWxpdmVcbiAgICBpZiAoaW5hY3RpdmUpIHtcbiAgICAgIHJldHVybiBoKGNhY2hlW25hbWVdLCBkYXRhLCBjaGlsZHJlbilcbiAgICB9XG5cbiAgICB2YXIgbWF0Y2hlZCA9IHJvdXRlLm1hdGNoZWRbZGVwdGhdO1xuICAgIC8vIHJlbmRlciBlbXB0eSBub2RlIGlmIG5vIG1hdGNoZWQgcm91dGVcbiAgICBpZiAoIW1hdGNoZWQpIHtcbiAgICAgIGNhY2hlW25hbWVdID0gbnVsbDtcbiAgICAgIHJldHVybiBoKClcbiAgICB9XG5cbiAgICB2YXIgY29tcG9uZW50ID0gY2FjaGVbbmFtZV0gPSBtYXRjaGVkLmNvbXBvbmVudHNbbmFtZV07XG5cbiAgICAvLyBhdHRhY2ggaW5zdGFuY2UgcmVnaXN0cmF0aW9uIGhvb2tcbiAgICAvLyB0aGlzIHdpbGwgYmUgY2FsbGVkIGluIHRoZSBpbnN0YW5jZSdzIGluamVjdGVkIGxpZmVjeWNsZSBob29rc1xuICAgIGRhdGEucmVnaXN0ZXJSb3V0ZUluc3RhbmNlID0gZnVuY3Rpb24gKHZtLCB2YWwpIHtcbiAgICAgIC8vIHZhbCBjb3VsZCBiZSB1bmRlZmluZWQgZm9yIHVucmVnaXN0cmF0aW9uXG4gICAgICB2YXIgY3VycmVudCA9IG1hdGNoZWQuaW5zdGFuY2VzW25hbWVdO1xuICAgICAgaWYgKFxuICAgICAgICAodmFsICYmIGN1cnJlbnQgIT09IHZtKSB8fFxuICAgICAgICAoIXZhbCAmJiBjdXJyZW50ID09PSB2bSlcbiAgICAgICkge1xuICAgICAgICBtYXRjaGVkLmluc3RhbmNlc1tuYW1lXSA9IHZhbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBhbHNvIHJlZ2lzZXRlciBpbnN0YW5jZSBpbiBwcmVwYXRjaCBob29rXG4gICAgLy8gaW4gY2FzZSB0aGUgc2FtZSBjb21wb25lbnQgaW5zdGFuY2UgaXMgcmV1c2VkIGFjcm9zcyBkaWZmZXJlbnQgcm91dGVzXG4gICAgOyhkYXRhLmhvb2sgfHwgKGRhdGEuaG9vayA9IHt9KSkucHJlcGF0Y2ggPSBmdW5jdGlvbiAoXywgdm5vZGUpIHtcbiAgICAgIG1hdGNoZWQuaW5zdGFuY2VzW25hbWVdID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgfTtcblxuICAgIC8vIHJlc29sdmUgcHJvcHNcbiAgICBkYXRhLnByb3BzID0gcmVzb2x2ZVByb3BzKHJvdXRlLCBtYXRjaGVkLnByb3BzICYmIG1hdGNoZWQucHJvcHNbbmFtZV0pO1xuXG4gICAgcmV0dXJuIGgoY29tcG9uZW50LCBkYXRhLCBjaGlsZHJlbilcbiAgfVxufTtcblxuZnVuY3Rpb24gcmVzb2x2ZVByb3BzIChyb3V0ZSwgY29uZmlnKSB7XG4gIHN3aXRjaCAodHlwZW9mIGNvbmZpZykge1xuICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICByZXR1cm5cbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAgcmV0dXJuIGNvbmZpZ1xuICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgIHJldHVybiBjb25maWcocm91dGUpXG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICByZXR1cm4gY29uZmlnID8gcm91dGUucGFyYW1zIDogdW5kZWZpbmVkXG4gICAgZGVmYXVsdDpcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgXCJwcm9wcyBpbiBcXFwiXCIgKyAocm91dGUucGF0aCkgKyBcIlxcXCIgaXMgYSBcIiArICh0eXBlb2YgY29uZmlnKSArIFwiLCBcIiArXG4gICAgICAgICAgXCJleHBlY3RpbmcgYW4gb2JqZWN0LCBmdW5jdGlvbiBvciBib29sZWFuLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBlbmNvZGVSZXNlcnZlUkUgPSAvWyEnKCkqXS9nO1xudmFyIGVuY29kZVJlc2VydmVSZXBsYWNlciA9IGZ1bmN0aW9uIChjKSB7IHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpOyB9O1xudmFyIGNvbW1hUkUgPSAvJTJDL2c7XG5cbi8vIGZpeGVkIGVuY29kZVVSSUNvbXBvbmVudCB3aGljaCBpcyBtb3JlIGNvbmZvcm1hbnQgdG8gUkZDMzk4Njpcbi8vIC0gZXNjYXBlcyBbIScoKSpdXG4vLyAtIHByZXNlcnZlIGNvbW1hc1xudmFyIGVuY29kZSA9IGZ1bmN0aW9uIChzdHIpIHsgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHIpXG4gIC5yZXBsYWNlKGVuY29kZVJlc2VydmVSRSwgZW5jb2RlUmVzZXJ2ZVJlcGxhY2VyKVxuICAucmVwbGFjZShjb21tYVJFLCAnLCcpOyB9O1xuXG52YXIgZGVjb2RlID0gZGVjb2RlVVJJQ29tcG9uZW50O1xuXG5mdW5jdGlvbiByZXNvbHZlUXVlcnkgKFxuICBxdWVyeSxcbiAgZXh0cmFRdWVyeSxcbiAgX3BhcnNlUXVlcnlcbikge1xuICBpZiAoIGV4dHJhUXVlcnkgPT09IHZvaWQgMCApIGV4dHJhUXVlcnkgPSB7fTtcblxuICB2YXIgcGFyc2UgPSBfcGFyc2VRdWVyeSB8fCBwYXJzZVF1ZXJ5O1xuICB2YXIgcGFyc2VkUXVlcnk7XG4gIHRyeSB7XG4gICAgcGFyc2VkUXVlcnkgPSBwYXJzZShxdWVyeSB8fCAnJyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oZmFsc2UsIGUubWVzc2FnZSk7XG4gICAgcGFyc2VkUXVlcnkgPSB7fTtcbiAgfVxuICBmb3IgKHZhciBrZXkgaW4gZXh0cmFRdWVyeSkge1xuICAgIHZhciB2YWwgPSBleHRyYVF1ZXJ5W2tleV07XG4gICAgcGFyc2VkUXVlcnlba2V5XSA9IEFycmF5LmlzQXJyYXkodmFsKSA/IHZhbC5zbGljZSgpIDogdmFsO1xuICB9XG4gIHJldHVybiBwYXJzZWRRdWVyeVxufVxuXG5mdW5jdGlvbiBwYXJzZVF1ZXJ5IChxdWVyeSkge1xuICB2YXIgcmVzID0ge307XG5cbiAgcXVlcnkgPSBxdWVyeS50cmltKCkucmVwbGFjZSgvXihcXD98I3wmKS8sICcnKTtcblxuICBpZiAoIXF1ZXJ5KSB7XG4gICAgcmV0dXJuIHJlc1xuICB9XG5cbiAgcXVlcnkuc3BsaXQoJyYnKS5mb3JFYWNoKGZ1bmN0aW9uIChwYXJhbSkge1xuICAgIHZhciBwYXJ0cyA9IHBhcmFtLnJlcGxhY2UoL1xcKy9nLCAnICcpLnNwbGl0KCc9Jyk7XG4gICAgdmFyIGtleSA9IGRlY29kZShwYXJ0cy5zaGlmdCgpKTtcbiAgICB2YXIgdmFsID0gcGFydHMubGVuZ3RoID4gMFxuICAgICAgPyBkZWNvZGUocGFydHMuam9pbignPScpKVxuICAgICAgOiBudWxsO1xuXG4gICAgaWYgKHJlc1trZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlc1trZXldID0gdmFsO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyZXNba2V5XSkpIHtcbiAgICAgIHJlc1trZXldLnB1c2godmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzW2tleV0gPSBbcmVzW2tleV0sIHZhbF07XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeVF1ZXJ5IChvYmopIHtcbiAgdmFyIHJlcyA9IG9iaiA/IE9iamVjdC5rZXlzKG9iaikubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgdmFsID0gb2JqW2tleV07XG5cbiAgICBpZiAodmFsID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiAnJ1xuICAgIH1cblxuICAgIGlmICh2YWwgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBlbmNvZGUoa2V5KVxuICAgIH1cblxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIHZhbC5mb3JFYWNoKGZ1bmN0aW9uICh2YWwyKSB7XG4gICAgICAgIGlmICh2YWwyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBpZiAodmFsMiA9PT0gbnVsbCkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGVuY29kZShrZXkpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2YWwyKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdC5qb2luKCcmJylcbiAgICB9XG5cbiAgICByZXR1cm4gZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodmFsKVxuICB9KS5maWx0ZXIoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHgubGVuZ3RoID4gMDsgfSkuam9pbignJicpIDogbnVsbDtcbiAgcmV0dXJuIHJlcyA/IChcIj9cIiArIHJlcykgOiAnJ1xufVxuXG4vKiAgKi9cblxuXG52YXIgdHJhaWxpbmdTbGFzaFJFID0gL1xcLz8kLztcblxuZnVuY3Rpb24gY3JlYXRlUm91dGUgKFxuICByZWNvcmQsXG4gIGxvY2F0aW9uLFxuICByZWRpcmVjdGVkRnJvbSxcbiAgcm91dGVyXG4pIHtcbiAgdmFyIHN0cmluZ2lmeVF1ZXJ5JCQxID0gcm91dGVyICYmIHJvdXRlci5vcHRpb25zLnN0cmluZ2lmeVF1ZXJ5O1xuICB2YXIgcm91dGUgPSB7XG4gICAgbmFtZTogbG9jYXRpb24ubmFtZSB8fCAocmVjb3JkICYmIHJlY29yZC5uYW1lKSxcbiAgICBtZXRhOiAocmVjb3JkICYmIHJlY29yZC5tZXRhKSB8fCB7fSxcbiAgICBwYXRoOiBsb2NhdGlvbi5wYXRoIHx8ICcvJyxcbiAgICBoYXNoOiBsb2NhdGlvbi5oYXNoIHx8ICcnLFxuICAgIHF1ZXJ5OiBsb2NhdGlvbi5xdWVyeSB8fCB7fSxcbiAgICBwYXJhbXM6IGxvY2F0aW9uLnBhcmFtcyB8fCB7fSxcbiAgICBmdWxsUGF0aDogZ2V0RnVsbFBhdGgobG9jYXRpb24sIHN0cmluZ2lmeVF1ZXJ5JCQxKSxcbiAgICBtYXRjaGVkOiByZWNvcmQgPyBmb3JtYXRNYXRjaChyZWNvcmQpIDogW11cbiAgfTtcbiAgaWYgKHJlZGlyZWN0ZWRGcm9tKSB7XG4gICAgcm91dGUucmVkaXJlY3RlZEZyb20gPSBnZXRGdWxsUGF0aChyZWRpcmVjdGVkRnJvbSwgc3RyaW5naWZ5UXVlcnkkJDEpO1xuICB9XG4gIHJldHVybiBPYmplY3QuZnJlZXplKHJvdXRlKVxufVxuXG4vLyB0aGUgc3RhcnRpbmcgcm91dGUgdGhhdCByZXByZXNlbnRzIHRoZSBpbml0aWFsIHN0YXRlXG52YXIgU1RBUlQgPSBjcmVhdGVSb3V0ZShudWxsLCB7XG4gIHBhdGg6ICcvJ1xufSk7XG5cbmZ1bmN0aW9uIGZvcm1hdE1hdGNoIChyZWNvcmQpIHtcbiAgdmFyIHJlcyA9IFtdO1xuICB3aGlsZSAocmVjb3JkKSB7XG4gICAgcmVzLnVuc2hpZnQocmVjb3JkKTtcbiAgICByZWNvcmQgPSByZWNvcmQucGFyZW50O1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gZ2V0RnVsbFBhdGggKFxuICByZWYsXG4gIF9zdHJpbmdpZnlRdWVyeVxuKSB7XG4gIHZhciBwYXRoID0gcmVmLnBhdGg7XG4gIHZhciBxdWVyeSA9IHJlZi5xdWVyeTsgaWYgKCBxdWVyeSA9PT0gdm9pZCAwICkgcXVlcnkgPSB7fTtcbiAgdmFyIGhhc2ggPSByZWYuaGFzaDsgaWYgKCBoYXNoID09PSB2b2lkIDAgKSBoYXNoID0gJyc7XG5cbiAgdmFyIHN0cmluZ2lmeSA9IF9zdHJpbmdpZnlRdWVyeSB8fCBzdHJpbmdpZnlRdWVyeTtcbiAgcmV0dXJuIChwYXRoIHx8ICcvJykgKyBzdHJpbmdpZnkocXVlcnkpICsgaGFzaFxufVxuXG5mdW5jdGlvbiBpc1NhbWVSb3V0ZSAoYSwgYikge1xuICBpZiAoYiA9PT0gU1RBUlQpIHtcbiAgICByZXR1cm4gYSA9PT0gYlxuICB9IGVsc2UgaWYgKCFiKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH0gZWxzZSBpZiAoYS5wYXRoICYmIGIucGF0aCkge1xuICAgIHJldHVybiAoXG4gICAgICBhLnBhdGgucmVwbGFjZSh0cmFpbGluZ1NsYXNoUkUsICcnKSA9PT0gYi5wYXRoLnJlcGxhY2UodHJhaWxpbmdTbGFzaFJFLCAnJykgJiZcbiAgICAgIGEuaGFzaCA9PT0gYi5oYXNoICYmXG4gICAgICBpc09iamVjdEVxdWFsKGEucXVlcnksIGIucXVlcnkpXG4gICAgKVxuICB9IGVsc2UgaWYgKGEubmFtZSAmJiBiLm5hbWUpIHtcbiAgICByZXR1cm4gKFxuICAgICAgYS5uYW1lID09PSBiLm5hbWUgJiZcbiAgICAgIGEuaGFzaCA9PT0gYi5oYXNoICYmXG4gICAgICBpc09iamVjdEVxdWFsKGEucXVlcnksIGIucXVlcnkpICYmXG4gICAgICBpc09iamVjdEVxdWFsKGEucGFyYW1zLCBiLnBhcmFtcylcbiAgICApXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuZnVuY3Rpb24gaXNPYmplY3RFcXVhbCAoYSwgYikge1xuICBpZiAoIGEgPT09IHZvaWQgMCApIGEgPSB7fTtcbiAgaWYgKCBiID09PSB2b2lkIDAgKSBiID0ge307XG5cbiAgdmFyIGFLZXlzID0gT2JqZWN0LmtleXMoYSk7XG4gIHZhciBiS2V5cyA9IE9iamVjdC5rZXlzKGIpO1xuICBpZiAoYUtleXMubGVuZ3RoICE9PSBiS2V5cy5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICByZXR1cm4gYUtleXMuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBhVmFsID0gYVtrZXldO1xuICAgIHZhciBiVmFsID0gYltrZXldO1xuICAgIC8vIGNoZWNrIG5lc3RlZCBlcXVhbGl0eVxuICAgIGlmICh0eXBlb2YgYVZhbCA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIGJWYWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RFcXVhbChhVmFsLCBiVmFsKVxuICAgIH1cbiAgICByZXR1cm4gU3RyaW5nKGFWYWwpID09PSBTdHJpbmcoYlZhbClcbiAgfSlcbn1cblxuZnVuY3Rpb24gaXNJbmNsdWRlZFJvdXRlIChjdXJyZW50LCB0YXJnZXQpIHtcbiAgcmV0dXJuIChcbiAgICBjdXJyZW50LnBhdGgucmVwbGFjZSh0cmFpbGluZ1NsYXNoUkUsICcvJykuaW5kZXhPZihcbiAgICAgIHRhcmdldC5wYXRoLnJlcGxhY2UodHJhaWxpbmdTbGFzaFJFLCAnLycpXG4gICAgKSA9PT0gMCAmJlxuICAgICghdGFyZ2V0Lmhhc2ggfHwgY3VycmVudC5oYXNoID09PSB0YXJnZXQuaGFzaCkgJiZcbiAgICBxdWVyeUluY2x1ZGVzKGN1cnJlbnQucXVlcnksIHRhcmdldC5xdWVyeSlcbiAgKVxufVxuXG5mdW5jdGlvbiBxdWVyeUluY2x1ZGVzIChjdXJyZW50LCB0YXJnZXQpIHtcbiAgZm9yICh2YXIga2V5IGluIHRhcmdldCkge1xuICAgIGlmICghKGtleSBpbiBjdXJyZW50KSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlXG59XG5cbi8qICAqL1xuXG4vLyB3b3JrIGFyb3VuZCB3ZWlyZCBmbG93IGJ1Z1xudmFyIHRvVHlwZXMgPSBbU3RyaW5nLCBPYmplY3RdO1xudmFyIGV2ZW50VHlwZXMgPSBbU3RyaW5nLCBBcnJheV07XG5cbnZhciBMaW5rID0ge1xuICBuYW1lOiAncm91dGVyLWxpbmsnLFxuICBwcm9wczoge1xuICAgIHRvOiB7XG4gICAgICB0eXBlOiB0b1R5cGVzLFxuICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICB9LFxuICAgIHRhZzoge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ2EnXG4gICAgfSxcbiAgICBleGFjdDogQm9vbGVhbixcbiAgICBhcHBlbmQ6IEJvb2xlYW4sXG4gICAgcmVwbGFjZTogQm9vbGVhbixcbiAgICBhY3RpdmVDbGFzczogU3RyaW5nLFxuICAgIGV4YWN0QWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgICBldmVudDoge1xuICAgICAgdHlwZTogZXZlbnRUeXBlcyxcbiAgICAgIGRlZmF1bHQ6ICdjbGljaydcbiAgICB9XG4gIH0sXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgcm91dGVyID0gdGhpcy4kcm91dGVyO1xuICAgIHZhciBjdXJyZW50ID0gdGhpcy4kcm91dGU7XG4gICAgdmFyIHJlZiA9IHJvdXRlci5yZXNvbHZlKHRoaXMudG8sIGN1cnJlbnQsIHRoaXMuYXBwZW5kKTtcbiAgICB2YXIgbG9jYXRpb24gPSByZWYubG9jYXRpb247XG4gICAgdmFyIHJvdXRlID0gcmVmLnJvdXRlO1xuICAgIHZhciBocmVmID0gcmVmLmhyZWY7XG5cbiAgICB2YXIgY2xhc3NlcyA9IHt9O1xuICAgIHZhciBnbG9iYWxBY3RpdmVDbGFzcyA9IHJvdXRlci5vcHRpb25zLmxpbmtBY3RpdmVDbGFzcztcbiAgICB2YXIgZ2xvYmFsRXhhY3RBY3RpdmVDbGFzcyA9IHJvdXRlci5vcHRpb25zLmxpbmtFeGFjdEFjdGl2ZUNsYXNzO1xuICAgIC8vIFN1cHBvcnQgZ2xvYmFsIGVtcHR5IGFjdGl2ZSBjbGFzc1xuICAgIHZhciBhY3RpdmVDbGFzc0ZhbGxiYWNrID0gZ2xvYmFsQWN0aXZlQ2xhc3MgPT0gbnVsbFxuICAgICAgICAgICAgPyAncm91dGVyLWxpbmstYWN0aXZlJ1xuICAgICAgICAgICAgOiBnbG9iYWxBY3RpdmVDbGFzcztcbiAgICB2YXIgZXhhY3RBY3RpdmVDbGFzc0ZhbGxiYWNrID0gZ2xvYmFsRXhhY3RBY3RpdmVDbGFzcyA9PSBudWxsXG4gICAgICAgICAgICA/ICdyb3V0ZXItbGluay1leGFjdC1hY3RpdmUnXG4gICAgICAgICAgICA6IGdsb2JhbEV4YWN0QWN0aXZlQ2xhc3M7XG4gICAgdmFyIGFjdGl2ZUNsYXNzID0gdGhpcy5hY3RpdmVDbGFzcyA9PSBudWxsXG4gICAgICAgICAgICA/IGFjdGl2ZUNsYXNzRmFsbGJhY2tcbiAgICAgICAgICAgIDogdGhpcy5hY3RpdmVDbGFzcztcbiAgICB2YXIgZXhhY3RBY3RpdmVDbGFzcyA9IHRoaXMuZXhhY3RBY3RpdmVDbGFzcyA9PSBudWxsXG4gICAgICAgICAgICA/IGV4YWN0QWN0aXZlQ2xhc3NGYWxsYmFja1xuICAgICAgICAgICAgOiB0aGlzLmV4YWN0QWN0aXZlQ2xhc3M7XG4gICAgdmFyIGNvbXBhcmVUYXJnZXQgPSBsb2NhdGlvbi5wYXRoXG4gICAgICA/IGNyZWF0ZVJvdXRlKG51bGwsIGxvY2F0aW9uLCBudWxsLCByb3V0ZXIpXG4gICAgICA6IHJvdXRlO1xuXG4gICAgY2xhc3Nlc1tleGFjdEFjdGl2ZUNsYXNzXSA9IGlzU2FtZVJvdXRlKGN1cnJlbnQsIGNvbXBhcmVUYXJnZXQpO1xuICAgIGNsYXNzZXNbYWN0aXZlQ2xhc3NdID0gdGhpcy5leGFjdFxuICAgICAgPyBjbGFzc2VzW2V4YWN0QWN0aXZlQ2xhc3NdXG4gICAgICA6IGlzSW5jbHVkZWRSb3V0ZShjdXJyZW50LCBjb21wYXJlVGFyZ2V0KTtcblxuICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChndWFyZEV2ZW50KGUpKSB7XG4gICAgICAgIGlmICh0aGlzJDEucmVwbGFjZSkge1xuICAgICAgICAgIHJvdXRlci5yZXBsYWNlKGxvY2F0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByb3V0ZXIucHVzaChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIG9uID0geyBjbGljazogZ3VhcmRFdmVudCB9O1xuICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuZXZlbnQpKSB7XG4gICAgICB0aGlzLmV2ZW50LmZvckVhY2goZnVuY3Rpb24gKGUpIHsgb25bZV0gPSBoYW5kbGVyOyB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgb25bdGhpcy5ldmVudF0gPSBoYW5kbGVyO1xuICAgIH1cblxuICAgIHZhciBkYXRhID0ge1xuICAgICAgY2xhc3M6IGNsYXNzZXNcbiAgICB9O1xuXG4gICAgaWYgKHRoaXMudGFnID09PSAnYScpIHtcbiAgICAgIGRhdGEub24gPSBvbjtcbiAgICAgIGRhdGEuYXR0cnMgPSB7IGhyZWY6IGhyZWYgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZmluZCB0aGUgZmlyc3QgPGE+IGNoaWxkIGFuZCBhcHBseSBsaXN0ZW5lciBhbmQgaHJlZlxuICAgICAgdmFyIGEgPSBmaW5kQW5jaG9yKHRoaXMuJHNsb3RzLmRlZmF1bHQpO1xuICAgICAgaWYgKGEpIHtcbiAgICAgICAgLy8gaW4gY2FzZSB0aGUgPGE+IGlzIGEgc3RhdGljIG5vZGVcbiAgICAgICAgYS5pc1N0YXRpYyA9IGZhbHNlO1xuICAgICAgICB2YXIgZXh0ZW5kID0gX1Z1ZS51dGlsLmV4dGVuZDtcbiAgICAgICAgdmFyIGFEYXRhID0gYS5kYXRhID0gZXh0ZW5kKHt9LCBhLmRhdGEpO1xuICAgICAgICBhRGF0YS5vbiA9IG9uO1xuICAgICAgICB2YXIgYUF0dHJzID0gYS5kYXRhLmF0dHJzID0gZXh0ZW5kKHt9LCBhLmRhdGEuYXR0cnMpO1xuICAgICAgICBhQXR0cnMuaHJlZiA9IGhyZWY7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkb2Vzbid0IGhhdmUgPGE+IGNoaWxkLCBhcHBseSBsaXN0ZW5lciB0byBzZWxmXG4gICAgICAgIGRhdGEub24gPSBvbjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaCh0aGlzLnRhZywgZGF0YSwgdGhpcy4kc2xvdHMuZGVmYXVsdClcbiAgfVxufTtcblxuZnVuY3Rpb24gZ3VhcmRFdmVudCAoZSkge1xuICAvLyBkb24ndCByZWRpcmVjdCB3aXRoIGNvbnRyb2wga2V5c1xuICBpZiAoZS5tZXRhS2V5IHx8IGUuYWx0S2V5IHx8IGUuY3RybEtleSB8fCBlLnNoaWZ0S2V5KSB7IHJldHVybiB9XG4gIC8vIGRvbid0IHJlZGlyZWN0IHdoZW4gcHJldmVudERlZmF1bHQgY2FsbGVkXG4gIGlmIChlLmRlZmF1bHRQcmV2ZW50ZWQpIHsgcmV0dXJuIH1cbiAgLy8gZG9uJ3QgcmVkaXJlY3Qgb24gcmlnaHQgY2xpY2tcbiAgaWYgKGUuYnV0dG9uICE9PSB1bmRlZmluZWQgJiYgZS5idXR0b24gIT09IDApIHsgcmV0dXJuIH1cbiAgLy8gZG9uJ3QgcmVkaXJlY3QgaWYgYHRhcmdldD1cIl9ibGFua1wiYFxuICBpZiAoZS5jdXJyZW50VGFyZ2V0ICYmIGUuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUpIHtcbiAgICB2YXIgdGFyZ2V0ID0gZS5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZSgndGFyZ2V0Jyk7XG4gICAgaWYgKC9cXGJfYmxhbmtcXGIvaS50ZXN0KHRhcmdldCkpIHsgcmV0dXJuIH1cbiAgfVxuICAvLyB0aGlzIG1heSBiZSBhIFdlZXggZXZlbnQgd2hpY2ggZG9lc24ndCBoYXZlIHRoaXMgbWV0aG9kXG4gIGlmIChlLnByZXZlbnREZWZhdWx0KSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG4gIHJldHVybiB0cnVlXG59XG5cbmZ1bmN0aW9uIGZpbmRBbmNob3IgKGNoaWxkcmVuKSB7XG4gIGlmIChjaGlsZHJlbikge1xuICAgIHZhciBjaGlsZDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgICAgaWYgKGNoaWxkLnRhZyA9PT0gJ2EnKSB7XG4gICAgICAgIHJldHVybiBjaGlsZFxuICAgICAgfVxuICAgICAgaWYgKGNoaWxkLmNoaWxkcmVuICYmIChjaGlsZCA9IGZpbmRBbmNob3IoY2hpbGQuY2hpbGRyZW4pKSkge1xuICAgICAgICByZXR1cm4gY2hpbGRcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxudmFyIF9WdWU7XG5cbmZ1bmN0aW9uIGluc3RhbGwgKFZ1ZSkge1xuICBpZiAoaW5zdGFsbC5pbnN0YWxsZWQpIHsgcmV0dXJuIH1cbiAgaW5zdGFsbC5pbnN0YWxsZWQgPSB0cnVlO1xuXG4gIF9WdWUgPSBWdWU7XG5cbiAgdmFyIGlzRGVmID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHYgIT09IHVuZGVmaW5lZDsgfTtcblxuICB2YXIgcmVnaXN0ZXJJbnN0YW5jZSA9IGZ1bmN0aW9uICh2bSwgY2FsbFZhbCkge1xuICAgIHZhciBpID0gdm0uJG9wdGlvbnMuX3BhcmVudFZub2RlO1xuICAgIGlmIChpc0RlZihpKSAmJiBpc0RlZihpID0gaS5kYXRhKSAmJiBpc0RlZihpID0gaS5yZWdpc3RlclJvdXRlSW5zdGFuY2UpKSB7XG4gICAgICBpKHZtLCBjYWxsVmFsKTtcbiAgICB9XG4gIH07XG5cbiAgVnVlLm1peGluKHtcbiAgICBiZWZvcmVDcmVhdGU6IGZ1bmN0aW9uIGJlZm9yZUNyZWF0ZSAoKSB7XG4gICAgICBpZiAoaXNEZWYodGhpcy4kb3B0aW9ucy5yb3V0ZXIpKSB7XG4gICAgICAgIHRoaXMuX3JvdXRlclJvb3QgPSB0aGlzO1xuICAgICAgICB0aGlzLl9yb3V0ZXIgPSB0aGlzLiRvcHRpb25zLnJvdXRlcjtcbiAgICAgICAgdGhpcy5fcm91dGVyLmluaXQodGhpcyk7XG4gICAgICAgIFZ1ZS51dGlsLmRlZmluZVJlYWN0aXZlKHRoaXMsICdfcm91dGUnLCB0aGlzLl9yb3V0ZXIuaGlzdG9yeS5jdXJyZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3JvdXRlclJvb3QgPSAodGhpcy4kcGFyZW50ICYmIHRoaXMuJHBhcmVudC5fcm91dGVyUm9vdCkgfHwgdGhpcztcbiAgICAgIH1cbiAgICAgIHJlZ2lzdGVySW5zdGFuY2UodGhpcywgdGhpcyk7XG4gICAgfSxcbiAgICBkZXN0cm95ZWQ6IGZ1bmN0aW9uIGRlc3Ryb3llZCAoKSB7XG4gICAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMpO1xuICAgIH1cbiAgfSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckcm91dGVyJywge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0ICgpIHsgcmV0dXJuIHRoaXMuX3JvdXRlclJvb3QuX3JvdXRlciB9XG4gIH0pO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHJvdXRlJywge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0ICgpIHsgcmV0dXJuIHRoaXMuX3JvdXRlclJvb3QuX3JvdXRlIH1cbiAgfSk7XG5cbiAgVnVlLmNvbXBvbmVudCgncm91dGVyLXZpZXcnLCBWaWV3KTtcbiAgVnVlLmNvbXBvbmVudCgncm91dGVyLWxpbmsnLCBMaW5rKTtcblxuICB2YXIgc3RyYXRzID0gVnVlLmNvbmZpZy5vcHRpb25NZXJnZVN0cmF0ZWdpZXM7XG4gIC8vIHVzZSB0aGUgc2FtZSBob29rIG1lcmdpbmcgc3RyYXRlZ3kgZm9yIHJvdXRlIGhvb2tzXG4gIHN0cmF0cy5iZWZvcmVSb3V0ZUVudGVyID0gc3RyYXRzLmJlZm9yZVJvdXRlTGVhdmUgPSBzdHJhdHMuYmVmb3JlUm91dGVVcGRhdGUgPSBzdHJhdHMuY3JlYXRlZDtcbn1cblxuLyogICovXG5cbnZhciBpbkJyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJztcblxuLyogICovXG5cbmZ1bmN0aW9uIHJlc29sdmVQYXRoIChcbiAgcmVsYXRpdmUsXG4gIGJhc2UsXG4gIGFwcGVuZFxuKSB7XG4gIHZhciBmaXJzdENoYXIgPSByZWxhdGl2ZS5jaGFyQXQoMCk7XG4gIGlmIChmaXJzdENoYXIgPT09ICcvJykge1xuICAgIHJldHVybiByZWxhdGl2ZVxuICB9XG5cbiAgaWYgKGZpcnN0Q2hhciA9PT0gJz8nIHx8IGZpcnN0Q2hhciA9PT0gJyMnKSB7XG4gICAgcmV0dXJuIGJhc2UgKyByZWxhdGl2ZVxuICB9XG5cbiAgdmFyIHN0YWNrID0gYmFzZS5zcGxpdCgnLycpO1xuXG4gIC8vIHJlbW92ZSB0cmFpbGluZyBzZWdtZW50IGlmOlxuICAvLyAtIG5vdCBhcHBlbmRpbmdcbiAgLy8gLSBhcHBlbmRpbmcgdG8gdHJhaWxpbmcgc2xhc2ggKGxhc3Qgc2VnbWVudCBpcyBlbXB0eSlcbiAgaWYgKCFhcHBlbmQgfHwgIXN0YWNrW3N0YWNrLmxlbmd0aCAtIDFdKSB7XG4gICAgc3RhY2sucG9wKCk7XG4gIH1cblxuICAvLyByZXNvbHZlIHJlbGF0aXZlIHBhdGhcbiAgdmFyIHNlZ21lbnRzID0gcmVsYXRpdmUucmVwbGFjZSgvXlxcLy8sICcnKS5zcGxpdCgnLycpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNlZ21lbnQgPSBzZWdtZW50c1tpXTtcbiAgICBpZiAoc2VnbWVudCA9PT0gJy4uJykge1xuICAgICAgc3RhY2sucG9wKCk7XG4gICAgfSBlbHNlIGlmIChzZWdtZW50ICE9PSAnLicpIHtcbiAgICAgIHN0YWNrLnB1c2goc2VnbWVudCk7XG4gICAgfVxuICB9XG5cbiAgLy8gZW5zdXJlIGxlYWRpbmcgc2xhc2hcbiAgaWYgKHN0YWNrWzBdICE9PSAnJykge1xuICAgIHN0YWNrLnVuc2hpZnQoJycpO1xuICB9XG5cbiAgcmV0dXJuIHN0YWNrLmpvaW4oJy8nKVxufVxuXG5mdW5jdGlvbiBwYXJzZVBhdGggKHBhdGgpIHtcbiAgdmFyIGhhc2ggPSAnJztcbiAgdmFyIHF1ZXJ5ID0gJyc7XG5cbiAgdmFyIGhhc2hJbmRleCA9IHBhdGguaW5kZXhPZignIycpO1xuICBpZiAoaGFzaEluZGV4ID49IDApIHtcbiAgICBoYXNoID0gcGF0aC5zbGljZShoYXNoSW5kZXgpO1xuICAgIHBhdGggPSBwYXRoLnNsaWNlKDAsIGhhc2hJbmRleCk7XG4gIH1cblxuICB2YXIgcXVlcnlJbmRleCA9IHBhdGguaW5kZXhPZignPycpO1xuICBpZiAocXVlcnlJbmRleCA+PSAwKSB7XG4gICAgcXVlcnkgPSBwYXRoLnNsaWNlKHF1ZXJ5SW5kZXggKyAxKTtcbiAgICBwYXRoID0gcGF0aC5zbGljZSgwLCBxdWVyeUluZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aDogcGF0aCxcbiAgICBxdWVyeTogcXVlcnksXG4gICAgaGFzaDogaGFzaFxuICB9XG59XG5cbmZ1bmN0aW9uIGNsZWFuUGF0aCAocGF0aCkge1xuICByZXR1cm4gcGF0aC5yZXBsYWNlKC9cXC9cXC8vZywgJy8nKVxufVxuXG52YXIgaW5kZXgkMSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG5cbi8qKlxuICogRXhwb3NlIGBwYXRoVG9SZWdleHBgLlxuICovXG52YXIgaW5kZXggPSBwYXRoVG9SZWdleHA7XG52YXIgcGFyc2VfMSA9IHBhcnNlO1xudmFyIGNvbXBpbGVfMSA9IGNvbXBpbGU7XG52YXIgdG9rZW5zVG9GdW5jdGlvbl8xID0gdG9rZW5zVG9GdW5jdGlvbjtcbnZhciB0b2tlbnNUb1JlZ0V4cF8xID0gdG9rZW5zVG9SZWdFeHA7XG5cbi8qKlxuICogVGhlIG1haW4gcGF0aCBtYXRjaGluZyByZWdleHAgdXRpbGl0eS5cbiAqXG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG52YXIgUEFUSF9SRUdFWFAgPSBuZXcgUmVnRXhwKFtcbiAgLy8gTWF0Y2ggZXNjYXBlZCBjaGFyYWN0ZXJzIHRoYXQgd291bGQgb3RoZXJ3aXNlIGFwcGVhciBpbiBmdXR1cmUgbWF0Y2hlcy5cbiAgLy8gVGhpcyBhbGxvd3MgdGhlIHVzZXIgdG8gZXNjYXBlIHNwZWNpYWwgY2hhcmFjdGVycyB0aGF0IHdvbid0IHRyYW5zZm9ybS5cbiAgJyhcXFxcXFxcXC4pJyxcbiAgLy8gTWF0Y2ggRXhwcmVzcy1zdHlsZSBwYXJhbWV0ZXJzIGFuZCB1bi1uYW1lZCBwYXJhbWV0ZXJzIHdpdGggYSBwcmVmaXhcbiAgLy8gYW5kIG9wdGlvbmFsIHN1ZmZpeGVzLiBNYXRjaGVzIGFwcGVhciBhczpcbiAgLy9cbiAgLy8gXCIvOnRlc3QoXFxcXGQrKT9cIiA9PiBbXCIvXCIsIFwidGVzdFwiLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCBcIj9cIiwgdW5kZWZpbmVkXVxuICAvLyBcIi9yb3V0ZShcXFxcZCspXCIgID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWRdXG4gIC8vIFwiLypcIiAgICAgICAgICAgID0+IFtcIi9cIiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIipcIl1cbiAgJyhbXFxcXC8uXSk/KD86KD86XFxcXDooXFxcXHcrKSg/OlxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpP3xcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKShbKyo/XSk/fChcXFxcKikpJ1xuXS5qb2luKCd8JyksICdnJyk7XG5cbi8qKlxuICogUGFyc2UgYSBzdHJpbmcgZm9yIHRoZSByYXcgdG9rZW5zLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gb3B0aW9uc1xuICogQHJldHVybiB7IUFycmF5fVxuICovXG5mdW5jdGlvbiBwYXJzZSAoc3RyLCBvcHRpb25zKSB7XG4gIHZhciB0b2tlbnMgPSBbXTtcbiAgdmFyIGtleSA9IDA7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBwYXRoID0gJyc7XG4gIHZhciBkZWZhdWx0RGVsaW1pdGVyID0gb3B0aW9ucyAmJiBvcHRpb25zLmRlbGltaXRlciB8fCAnLyc7XG4gIHZhciByZXM7XG5cbiAgd2hpbGUgKChyZXMgPSBQQVRIX1JFR0VYUC5leGVjKHN0cikpICE9IG51bGwpIHtcbiAgICB2YXIgbSA9IHJlc1swXTtcbiAgICB2YXIgZXNjYXBlZCA9IHJlc1sxXTtcbiAgICB2YXIgb2Zmc2V0ID0gcmVzLmluZGV4O1xuICAgIHBhdGggKz0gc3RyLnNsaWNlKGluZGV4LCBvZmZzZXQpO1xuICAgIGluZGV4ID0gb2Zmc2V0ICsgbS5sZW5ndGg7XG5cbiAgICAvLyBJZ25vcmUgYWxyZWFkeSBlc2NhcGVkIHNlcXVlbmNlcy5cbiAgICBpZiAoZXNjYXBlZCkge1xuICAgICAgcGF0aCArPSBlc2NhcGVkWzFdO1xuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICB2YXIgbmV4dCA9IHN0cltpbmRleF07XG4gICAgdmFyIHByZWZpeCA9IHJlc1syXTtcbiAgICB2YXIgbmFtZSA9IHJlc1szXTtcbiAgICB2YXIgY2FwdHVyZSA9IHJlc1s0XTtcbiAgICB2YXIgZ3JvdXAgPSByZXNbNV07XG4gICAgdmFyIG1vZGlmaWVyID0gcmVzWzZdO1xuICAgIHZhciBhc3RlcmlzayA9IHJlc1s3XTtcblxuICAgIC8vIFB1c2ggdGhlIGN1cnJlbnQgcGF0aCBvbnRvIHRoZSB0b2tlbnMuXG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIHRva2Vucy5wdXNoKHBhdGgpO1xuICAgICAgcGF0aCA9ICcnO1xuICAgIH1cblxuICAgIHZhciBwYXJ0aWFsID0gcHJlZml4ICE9IG51bGwgJiYgbmV4dCAhPSBudWxsICYmIG5leHQgIT09IHByZWZpeDtcbiAgICB2YXIgcmVwZWF0ID0gbW9kaWZpZXIgPT09ICcrJyB8fCBtb2RpZmllciA9PT0gJyonO1xuICAgIHZhciBvcHRpb25hbCA9IG1vZGlmaWVyID09PSAnPycgfHwgbW9kaWZpZXIgPT09ICcqJztcbiAgICB2YXIgZGVsaW1pdGVyID0gcmVzWzJdIHx8IGRlZmF1bHREZWxpbWl0ZXI7XG4gICAgdmFyIHBhdHRlcm4gPSBjYXB0dXJlIHx8IGdyb3VwO1xuXG4gICAgdG9rZW5zLnB1c2goe1xuICAgICAgbmFtZTogbmFtZSB8fCBrZXkrKyxcbiAgICAgIHByZWZpeDogcHJlZml4IHx8ICcnLFxuICAgICAgZGVsaW1pdGVyOiBkZWxpbWl0ZXIsXG4gICAgICBvcHRpb25hbDogb3B0aW9uYWwsXG4gICAgICByZXBlYXQ6IHJlcGVhdCxcbiAgICAgIHBhcnRpYWw6IHBhcnRpYWwsXG4gICAgICBhc3RlcmlzazogISFhc3RlcmlzayxcbiAgICAgIHBhdHRlcm46IHBhdHRlcm4gPyBlc2NhcGVHcm91cChwYXR0ZXJuKSA6IChhc3RlcmlzayA/ICcuKicgOiAnW14nICsgZXNjYXBlU3RyaW5nKGRlbGltaXRlcikgKyAnXSs/JylcbiAgICB9KTtcbiAgfVxuXG4gIC8vIE1hdGNoIGFueSBjaGFyYWN0ZXJzIHN0aWxsIHJlbWFpbmluZy5cbiAgaWYgKGluZGV4IDwgc3RyLmxlbmd0aCkge1xuICAgIHBhdGggKz0gc3RyLnN1YnN0cihpbmRleCk7XG4gIH1cblxuICAvLyBJZiB0aGUgcGF0aCBleGlzdHMsIHB1c2ggaXQgb250byB0aGUgZW5kLlxuICBpZiAocGF0aCkge1xuICAgIHRva2Vucy5wdXNoKHBhdGgpO1xuICB9XG5cbiAgcmV0dXJuIHRva2Vuc1xufVxuXG4vKipcbiAqIENvbXBpbGUgYSBzdHJpbmcgdG8gYSB0ZW1wbGF0ZSBmdW5jdGlvbiBmb3IgdGhlIHBhdGguXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgICAgICAgICAgICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IWZ1bmN0aW9uKE9iamVjdD0sIE9iamVjdD0pfVxuICovXG5mdW5jdGlvbiBjb21waWxlIChzdHIsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvRnVuY3Rpb24ocGFyc2Uoc3RyLCBvcHRpb25zKSlcbn1cblxuLyoqXG4gKiBQcmV0dGllciBlbmNvZGluZyBvZiBVUkkgcGF0aCBzZWdtZW50cy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bXFwvPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEVuY29kZSB0aGUgYXN0ZXJpc2sgcGFyYW1ldGVyLiBTaW1pbGFyIHRvIGBwcmV0dHlgLCBidXQgYWxsb3dzIHNsYXNoZXMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVBc3RlcmlzayAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIG1ldGhvZCBmb3IgdHJhbnNmb3JtaW5nIHRva2VucyBpbnRvIHRoZSBwYXRoIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiB0b2tlbnNUb0Z1bmN0aW9uICh0b2tlbnMpIHtcbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHRva2VucyBpbnRvIHJlZ2V4cHMuXG4gIHZhciBtYXRjaGVzID0gbmV3IEFycmF5KHRva2Vucy5sZW5ndGgpO1xuXG4gIC8vIENvbXBpbGUgYWxsIHRoZSBwYXR0ZXJucyBiZWZvcmUgY29tcGlsYXRpb24uXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHR5cGVvZiB0b2tlbnNbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICBtYXRjaGVzW2ldID0gbmV3IFJlZ0V4cCgnXig/OicgKyB0b2tlbnNbaV0ucGF0dGVybiArICcpJCcpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAob2JqLCBvcHRzKSB7XG4gICAgdmFyIHBhdGggPSAnJztcbiAgICB2YXIgZGF0YSA9IG9iaiB8fCB7fTtcbiAgICB2YXIgb3B0aW9ucyA9IG9wdHMgfHwge307XG4gICAgdmFyIGVuY29kZSA9IG9wdGlvbnMucHJldHR5ID8gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IDogZW5jb2RlVVJJQ29tcG9uZW50O1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXTtcblxuICAgICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcGF0aCArPSB0b2tlbjtcblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWUgPSBkYXRhW3Rva2VuLm5hbWVdO1xuICAgICAgdmFyIHNlZ21lbnQ7XG5cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgIC8vIFByZXBlbmQgcGFydGlhbCBzZWdtZW50IHByZWZpeGVzLlxuICAgICAgICAgIGlmICh0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgICBwYXRoICs9IHRva2VuLnByZWZpeDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gYmUgZGVmaW5lZCcpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGluZGV4JDEodmFsdWUpKSB7XG4gICAgICAgIGlmICghdG9rZW4ucmVwZWF0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgcmVwZWF0LCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgKyAnYCcpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCBiZSBlbXB0eScpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHNlZ21lbnQgPSBlbmNvZGUodmFsdWVbal0pO1xuXG4gICAgICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGFsbCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHNlZ21lbnQpICsgJ2AnKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhdGggKz0gKGogPT09IDAgPyB0b2tlbi5wcmVmaXggOiB0b2tlbi5kZWxpbWl0ZXIpICsgc2VnbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHNlZ21lbnQgPSB0b2tlbi5hc3RlcmlzayA/IGVuY29kZUFzdGVyaXNrKHZhbHVlKSA6IGVuY29kZSh2YWx1ZSk7XG5cbiAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIFwiJyArIHNlZ21lbnQgKyAnXCInKVxuICAgICAgfVxuXG4gICAgICBwYXRoICs9IHRva2VuLnByZWZpeCArIHNlZ21lbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGhcbiAgfVxufVxuXG4vKipcbiAqIEVzY2FwZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlU3RyaW5nIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfFxcL1xcXFxdKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBFc2NhcGUgdGhlIGNhcHR1cmluZyBncm91cCBieSBlc2NhcGluZyBzcGVjaWFsIGNoYXJhY3RlcnMgYW5kIG1lYW5pbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBncm91cFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVHcm91cCAoZ3JvdXApIHtcbiAgcmV0dXJuIGdyb3VwLnJlcGxhY2UoLyhbPSE6JFxcLygpXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogQXR0YWNoIHRoZSBrZXlzIGFzIGEgcHJvcGVydHkgb2YgdGhlIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSByZVxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXR0YWNoS2V5cyAocmUsIGtleXMpIHtcbiAgcmUua2V5cyA9IGtleXM7XG4gIHJldHVybiByZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZmxhZ3MgZm9yIGEgcmVnZXhwIGZyb20gdGhlIG9wdGlvbnMuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGZsYWdzIChvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zLnNlbnNpdGl2ZSA/ICcnIDogJ2knXG59XG5cbi8qKlxuICogUHVsbCBvdXQga2V5cyBmcm9tIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHJlZ2V4cFRvUmVnZXhwIChwYXRoLCBrZXlzKSB7XG4gIC8vIFVzZSBhIG5lZ2F0aXZlIGxvb2thaGVhZCB0byBtYXRjaCBvbmx5IGNhcHR1cmluZyBncm91cHMuXG4gIHZhciBncm91cHMgPSBwYXRoLnNvdXJjZS5tYXRjaCgvXFwoKD8hXFw/KS9nKTtcblxuICBpZiAoZ3JvdXBzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleXMucHVzaCh7XG4gICAgICAgIG5hbWU6IGksXG4gICAgICAgIHByZWZpeDogbnVsbCxcbiAgICAgICAgZGVsaW1pdGVyOiBudWxsLFxuICAgICAgICBvcHRpb25hbDogZmFsc2UsXG4gICAgICAgIHJlcGVhdDogZmFsc2UsXG4gICAgICAgIHBhcnRpYWw6IGZhbHNlLFxuICAgICAgICBhc3RlcmlzazogZmFsc2UsXG4gICAgICAgIHBhdHRlcm46IG51bGxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHBhdGgsIGtleXMpXG59XG5cbi8qKlxuICogVHJhbnNmb3JtIGFuIGFycmF5IGludG8gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgcGF0aFxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXJyYXlUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICB2YXIgcGFydHMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICBwYXJ0cy5wdXNoKHBhdGhUb1JlZ2V4cChwYXRoW2ldLCBrZXlzLCBvcHRpb25zKS5zb3VyY2UpO1xuICB9XG5cbiAgdmFyIHJlZ2V4cCA9IG5ldyBSZWdFeHAoJyg/OicgKyBwYXJ0cy5qb2luKCd8JykgKyAnKScsIGZsYWdzKG9wdGlvbnMpKTtcblxuICByZXR1cm4gYXR0YWNoS2V5cyhyZWdleHAsIGtleXMpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgcGF0aCByZWdleHAgZnJvbSBzdHJpbmcgaW5wdXQuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gc3RyaW5nVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvUmVnRXhwKHBhcnNlKHBhdGgsIG9wdGlvbnMpLCBrZXlzLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIGZ1bmN0aW9uIGZvciB0YWtpbmcgdG9rZW5zIGFuZCByZXR1cm5pbmcgYSBSZWdFeHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgICAgICAgICB0b2tlbnNcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0ga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiB0b2tlbnNUb1JlZ0V4cCAodG9rZW5zLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaW5kZXgkMShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpO1xuICAgIGtleXMgPSBbXTtcbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIHZhciBzdHJpY3QgPSBvcHRpb25zLnN0cmljdDtcbiAgdmFyIGVuZCA9IG9wdGlvbnMuZW5kICE9PSBmYWxzZTtcbiAgdmFyIHJvdXRlID0gJyc7XG5cbiAgLy8gSXRlcmF0ZSBvdmVyIHRoZSB0b2tlbnMgYW5kIGNyZWF0ZSBvdXIgcmVnZXhwIHN0cmluZy5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV07XG5cbiAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgcm91dGUgKz0gZXNjYXBlU3RyaW5nKHRva2VuKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHByZWZpeCA9IGVzY2FwZVN0cmluZyh0b2tlbi5wcmVmaXgpO1xuICAgICAgdmFyIGNhcHR1cmUgPSAnKD86JyArIHRva2VuLnBhdHRlcm4gKyAnKSc7XG5cbiAgICAgIGtleXMucHVzaCh0b2tlbik7XG5cbiAgICAgIGlmICh0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgY2FwdHVyZSArPSAnKD86JyArIHByZWZpeCArIGNhcHR1cmUgKyAnKSonO1xuICAgICAgfVxuXG4gICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgY2FwdHVyZSA9ICcoPzonICsgcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpKT8nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyk/JztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSc7XG4gICAgICB9XG5cbiAgICAgIHJvdXRlICs9IGNhcHR1cmU7XG4gICAgfVxuICB9XG5cbiAgdmFyIGRlbGltaXRlciA9IGVzY2FwZVN0cmluZyhvcHRpb25zLmRlbGltaXRlciB8fCAnLycpO1xuICB2YXIgZW5kc1dpdGhEZWxpbWl0ZXIgPSByb3V0ZS5zbGljZSgtZGVsaW1pdGVyLmxlbmd0aCkgPT09IGRlbGltaXRlcjtcblxuICAvLyBJbiBub24tc3RyaWN0IG1vZGUgd2UgYWxsb3cgYSBzbGFzaCBhdCB0aGUgZW5kIG9mIG1hdGNoLiBJZiB0aGUgcGF0aCB0b1xuICAvLyBtYXRjaCBhbHJlYWR5IGVuZHMgd2l0aCBhIHNsYXNoLCB3ZSByZW1vdmUgaXQgZm9yIGNvbnNpc3RlbmN5LiBUaGUgc2xhc2hcbiAgLy8gaXMgdmFsaWQgYXQgdGhlIGVuZCBvZiBhIHBhdGggbWF0Y2gsIG5vdCBpbiB0aGUgbWlkZGxlLiBUaGlzIGlzIGltcG9ydGFudFxuICAvLyBpbiBub24tZW5kaW5nIG1vZGUsIHdoZXJlIFwiL3Rlc3QvXCIgc2hvdWxkbid0IG1hdGNoIFwiL3Rlc3QvL3JvdXRlXCIuXG4gIGlmICghc3RyaWN0KSB7XG4gICAgcm91dGUgPSAoZW5kc1dpdGhEZWxpbWl0ZXIgPyByb3V0ZS5zbGljZSgwLCAtZGVsaW1pdGVyLmxlbmd0aCkgOiByb3V0ZSkgKyAnKD86JyArIGRlbGltaXRlciArICcoPz0kKSk/JztcbiAgfVxuXG4gIGlmIChlbmQpIHtcbiAgICByb3V0ZSArPSAnJCc7XG4gIH0gZWxzZSB7XG4gICAgLy8gSW4gbm9uLWVuZGluZyBtb2RlLCB3ZSBuZWVkIHRoZSBjYXB0dXJpbmcgZ3JvdXBzIHRvIG1hdGNoIGFzIG11Y2ggYXNcbiAgICAvLyBwb3NzaWJsZSBieSB1c2luZyBhIHBvc2l0aXZlIGxvb2thaGVhZCB0byB0aGUgZW5kIG9yIG5leHQgcGF0aCBzZWdtZW50LlxuICAgIHJvdXRlICs9IHN0cmljdCAmJiBlbmRzV2l0aERlbGltaXRlciA/ICcnIDogJyg/PScgKyBkZWxpbWl0ZXIgKyAnfCQpJztcbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKG5ldyBSZWdFeHAoJ14nICsgcm91dGUsIGZsYWdzKG9wdGlvbnMpKSwga2V5cylcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgdGhlIGdpdmVuIHBhdGggc3RyaW5nLCByZXR1cm5pbmcgYSByZWd1bGFyIGV4cHJlc3Npb24uXG4gKlxuICogQW4gZW1wdHkgYXJyYXkgY2FuIGJlIHBhc3NlZCBpbiBmb3IgdGhlIGtleXMsIHdoaWNoIHdpbGwgaG9sZCB0aGVcbiAqIHBsYWNlaG9sZGVyIGtleSBkZXNjcmlwdGlvbnMuIEZvciBleGFtcGxlLCB1c2luZyBgL3VzZXIvOmlkYCwgYGtleXNgIHdpbGxcbiAqIGNvbnRhaW4gYFt7IG5hbWU6ICdpZCcsIGRlbGltaXRlcjogJy8nLCBvcHRpb25hbDogZmFsc2UsIHJlcGVhdDogZmFsc2UgfV1gLlxuICpcbiAqIEBwYXJhbSAgeyhzdHJpbmd8UmVnRXhwfEFycmF5KX0gcGF0aFxuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSAgICAgICBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHBhdGhUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWluZGV4JDEoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKTtcbiAgICBrZXlzID0gW107XG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICBpZiAocGF0aCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIHJldHVybiByZWdleHBUb1JlZ2V4cChwYXRoLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpKVxuICB9XG5cbiAgaWYgKGluZGV4JDEocGF0aCkpIHtcbiAgICByZXR1cm4gYXJyYXlUb1JlZ2V4cCgvKiogQHR5cGUgeyFBcnJheX0gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZ1RvUmVnZXhwKC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG59XG5cbmluZGV4LnBhcnNlID0gcGFyc2VfMTtcbmluZGV4LmNvbXBpbGUgPSBjb21waWxlXzE7XG5pbmRleC50b2tlbnNUb0Z1bmN0aW9uID0gdG9rZW5zVG9GdW5jdGlvbl8xO1xuaW5kZXgudG9rZW5zVG9SZWdFeHAgPSB0b2tlbnNUb1JlZ0V4cF8xO1xuXG4vKiAgKi9cblxudmFyIHJlZ2V4cENvbXBpbGVDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbmZ1bmN0aW9uIGZpbGxQYXJhbXMgKFxuICBwYXRoLFxuICBwYXJhbXMsXG4gIHJvdXRlTXNnXG4pIHtcbiAgdHJ5IHtcbiAgICB2YXIgZmlsbGVyID1cbiAgICAgIHJlZ2V4cENvbXBpbGVDYWNoZVtwYXRoXSB8fFxuICAgICAgKHJlZ2V4cENvbXBpbGVDYWNoZVtwYXRoXSA9IGluZGV4LmNvbXBpbGUocGF0aCkpO1xuICAgIHJldHVybiBmaWxsZXIocGFyYW1zIHx8IHt9LCB7IHByZXR0eTogdHJ1ZSB9KVxuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm4oZmFsc2UsIChcIm1pc3NpbmcgcGFyYW0gZm9yIFwiICsgcm91dGVNc2cgKyBcIjogXCIgKyAoZS5tZXNzYWdlKSkpO1xuICAgIH1cbiAgICByZXR1cm4gJydcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gY3JlYXRlUm91dGVNYXAgKFxuICByb3V0ZXMsXG4gIG9sZFBhdGhMaXN0LFxuICBvbGRQYXRoTWFwLFxuICBvbGROYW1lTWFwXG4pIHtcbiAgLy8gdGhlIHBhdGggbGlzdCBpcyB1c2VkIHRvIGNvbnRyb2wgcGF0aCBtYXRjaGluZyBwcmlvcml0eVxuICB2YXIgcGF0aExpc3QgPSBvbGRQYXRoTGlzdCB8fCBbXTtcbiAgdmFyIHBhdGhNYXAgPSBvbGRQYXRoTWFwIHx8IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBuYW1lTWFwID0gb2xkTmFtZU1hcCB8fCBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIHJvdXRlcy5mb3JFYWNoKGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgIGFkZFJvdXRlUmVjb3JkKHBhdGhMaXN0LCBwYXRoTWFwLCBuYW1lTWFwLCByb3V0ZSk7XG4gIH0pO1xuXG4gIC8vIGVuc3VyZSB3aWxkY2FyZCByb3V0ZXMgYXJlIGFsd2F5cyBhdCB0aGUgZW5kXG4gIGZvciAodmFyIGkgPSAwLCBsID0gcGF0aExpc3QubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKHBhdGhMaXN0W2ldID09PSAnKicpIHtcbiAgICAgIHBhdGhMaXN0LnB1c2gocGF0aExpc3Quc3BsaWNlKGksIDEpWzBdKTtcbiAgICAgIGwtLTtcbiAgICAgIGktLTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGhMaXN0OiBwYXRoTGlzdCxcbiAgICBwYXRoTWFwOiBwYXRoTWFwLFxuICAgIG5hbWVNYXA6IG5hbWVNYXBcbiAgfVxufVxuXG5mdW5jdGlvbiBhZGRSb3V0ZVJlY29yZCAoXG4gIHBhdGhMaXN0LFxuICBwYXRoTWFwLFxuICBuYW1lTWFwLFxuICByb3V0ZSxcbiAgcGFyZW50LFxuICBtYXRjaEFzXG4pIHtcbiAgdmFyIHBhdGggPSByb3V0ZS5wYXRoO1xuICB2YXIgbmFtZSA9IHJvdXRlLm5hbWU7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0KHBhdGggIT0gbnVsbCwgXCJcXFwicGF0aFxcXCIgaXMgcmVxdWlyZWQgaW4gYSByb3V0ZSBjb25maWd1cmF0aW9uLlwiKTtcbiAgICBhc3NlcnQoXG4gICAgICB0eXBlb2Ygcm91dGUuY29tcG9uZW50ICE9PSAnc3RyaW5nJyxcbiAgICAgIFwicm91dGUgY29uZmlnIFxcXCJjb21wb25lbnRcXFwiIGZvciBwYXRoOiBcIiArIChTdHJpbmcocGF0aCB8fCBuYW1lKSkgKyBcIiBjYW5ub3QgYmUgYSBcIiArXG4gICAgICBcInN0cmluZyBpZC4gVXNlIGFuIGFjdHVhbCBjb21wb25lbnQgaW5zdGVhZC5cIlxuICAgICk7XG4gIH1cblxuICB2YXIgbm9ybWFsaXplZFBhdGggPSBub3JtYWxpemVQYXRoKHBhdGgsIHBhcmVudCk7XG4gIHZhciBwYXRoVG9SZWdleHBPcHRpb25zID0gcm91dGUucGF0aFRvUmVnZXhwT3B0aW9ucyB8fCB7fTtcblxuICBpZiAodHlwZW9mIHJvdXRlLmNhc2VTZW5zaXRpdmUgPT09ICdib29sZWFuJykge1xuICAgIHBhdGhUb1JlZ2V4cE9wdGlvbnMuc2Vuc2l0aXZlID0gcm91dGUuY2FzZVNlbnNpdGl2ZTtcbiAgfVxuXG4gIHZhciByZWNvcmQgPSB7XG4gICAgcGF0aDogbm9ybWFsaXplZFBhdGgsXG4gICAgcmVnZXg6IGNvbXBpbGVSb3V0ZVJlZ2V4KG5vcm1hbGl6ZWRQYXRoLCBwYXRoVG9SZWdleHBPcHRpb25zKSxcbiAgICBjb21wb25lbnRzOiByb3V0ZS5jb21wb25lbnRzIHx8IHsgZGVmYXVsdDogcm91dGUuY29tcG9uZW50IH0sXG4gICAgaW5zdGFuY2VzOiB7fSxcbiAgICBuYW1lOiBuYW1lLFxuICAgIHBhcmVudDogcGFyZW50LFxuICAgIG1hdGNoQXM6IG1hdGNoQXMsXG4gICAgcmVkaXJlY3Q6IHJvdXRlLnJlZGlyZWN0LFxuICAgIGJlZm9yZUVudGVyOiByb3V0ZS5iZWZvcmVFbnRlcixcbiAgICBtZXRhOiByb3V0ZS5tZXRhIHx8IHt9LFxuICAgIHByb3BzOiByb3V0ZS5wcm9wcyA9PSBudWxsXG4gICAgICA/IHt9XG4gICAgICA6IHJvdXRlLmNvbXBvbmVudHNcbiAgICAgICAgPyByb3V0ZS5wcm9wc1xuICAgICAgICA6IHsgZGVmYXVsdDogcm91dGUucHJvcHMgfVxuICB9O1xuXG4gIGlmIChyb3V0ZS5jaGlsZHJlbikge1xuICAgIC8vIFdhcm4gaWYgcm91dGUgaXMgbmFtZWQsIGRvZXMgbm90IHJlZGlyZWN0IGFuZCBoYXMgYSBkZWZhdWx0IGNoaWxkIHJvdXRlLlxuICAgIC8vIElmIHVzZXJzIG5hdmlnYXRlIHRvIHRoaXMgcm91dGUgYnkgbmFtZSwgdGhlIGRlZmF1bHQgY2hpbGQgd2lsbFxuICAgIC8vIG5vdCBiZSByZW5kZXJlZCAoR0ggSXNzdWUgIzYyOSlcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHJvdXRlLm5hbWUgJiYgIXJvdXRlLnJlZGlyZWN0ICYmIHJvdXRlLmNoaWxkcmVuLnNvbWUoZnVuY3Rpb24gKGNoaWxkKSB7IHJldHVybiAvXlxcLz8kLy50ZXN0KGNoaWxkLnBhdGgpOyB9KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgIFwiTmFtZWQgUm91dGUgJ1wiICsgKHJvdXRlLm5hbWUpICsgXCInIGhhcyBhIGRlZmF1bHQgY2hpbGQgcm91dGUuIFwiICtcbiAgICAgICAgICBcIldoZW4gbmF2aWdhdGluZyB0byB0aGlzIG5hbWVkIHJvdXRlICg6dG89XFxcIntuYW1lOiAnXCIgKyAocm91dGUubmFtZSkgKyBcIidcXFwiKSwgXCIgK1xuICAgICAgICAgIFwidGhlIGRlZmF1bHQgY2hpbGQgcm91dGUgd2lsbCBub3QgYmUgcmVuZGVyZWQuIFJlbW92ZSB0aGUgbmFtZSBmcm9tIFwiICtcbiAgICAgICAgICBcInRoaXMgcm91dGUgYW5kIHVzZSB0aGUgbmFtZSBvZiB0aGUgZGVmYXVsdCBjaGlsZCByb3V0ZSBmb3IgbmFtZWQgXCIgK1xuICAgICAgICAgIFwibGlua3MgaW5zdGVhZC5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICByb3V0ZS5jaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgdmFyIGNoaWxkTWF0Y2hBcyA9IG1hdGNoQXNcbiAgICAgICAgPyBjbGVhblBhdGgoKG1hdGNoQXMgKyBcIi9cIiArIChjaGlsZC5wYXRoKSkpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgYWRkUm91dGVSZWNvcmQocGF0aExpc3QsIHBhdGhNYXAsIG5hbWVNYXAsIGNoaWxkLCByZWNvcmQsIGNoaWxkTWF0Y2hBcyk7XG4gICAgfSk7XG4gIH1cblxuICBpZiAocm91dGUuYWxpYXMgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBhbGlhc2VzID0gQXJyYXkuaXNBcnJheShyb3V0ZS5hbGlhcylcbiAgICAgID8gcm91dGUuYWxpYXNcbiAgICAgIDogW3JvdXRlLmFsaWFzXTtcblxuICAgIGFsaWFzZXMuZm9yRWFjaChmdW5jdGlvbiAoYWxpYXMpIHtcbiAgICAgIHZhciBhbGlhc1JvdXRlID0ge1xuICAgICAgICBwYXRoOiBhbGlhcyxcbiAgICAgICAgY2hpbGRyZW46IHJvdXRlLmNoaWxkcmVuXG4gICAgICB9O1xuICAgICAgYWRkUm91dGVSZWNvcmQoXG4gICAgICAgIHBhdGhMaXN0LFxuICAgICAgICBwYXRoTWFwLFxuICAgICAgICBuYW1lTWFwLFxuICAgICAgICBhbGlhc1JvdXRlLFxuICAgICAgICBwYXJlbnQsXG4gICAgICAgIHJlY29yZC5wYXRoIHx8ICcvJyAvLyBtYXRjaEFzXG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKCFwYXRoTWFwW3JlY29yZC5wYXRoXSkge1xuICAgIHBhdGhMaXN0LnB1c2gocmVjb3JkLnBhdGgpO1xuICAgIHBhdGhNYXBbcmVjb3JkLnBhdGhdID0gcmVjb3JkO1xuICB9XG5cbiAgaWYgKG5hbWUpIHtcbiAgICBpZiAoIW5hbWVNYXBbbmFtZV0pIHtcbiAgICAgIG5hbWVNYXBbbmFtZV0gPSByZWNvcmQ7XG4gICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFtYXRjaEFzKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgXCJEdXBsaWNhdGUgbmFtZWQgcm91dGVzIGRlZmluaXRpb246IFwiICtcbiAgICAgICAgXCJ7IG5hbWU6IFxcXCJcIiArIG5hbWUgKyBcIlxcXCIsIHBhdGg6IFxcXCJcIiArIChyZWNvcmQucGF0aCkgKyBcIlxcXCIgfVwiXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjb21waWxlUm91dGVSZWdleCAocGF0aCwgcGF0aFRvUmVnZXhwT3B0aW9ucykge1xuICB2YXIgcmVnZXggPSBpbmRleChwYXRoLCBbXSwgcGF0aFRvUmVnZXhwT3B0aW9ucyk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFyIGtleXMgPSB7fTtcbiAgICByZWdleC5rZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgd2Fybigha2V5c1trZXkubmFtZV0sIChcIkR1cGxpY2F0ZSBwYXJhbSBrZXlzIGluIHJvdXRlIHdpdGggcGF0aDogXFxcIlwiICsgcGF0aCArIFwiXFxcIlwiKSk7XG4gICAgICBrZXlzW2tleS5uYW1lXSA9IHRydWU7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHJlZ2V4XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVBhdGggKHBhdGgsIHBhcmVudCkge1xuICBwYXRoID0gcGF0aC5yZXBsYWNlKC9cXC8kLywgJycpO1xuICBpZiAocGF0aFswXSA9PT0gJy8nKSB7IHJldHVybiBwYXRoIH1cbiAgaWYgKHBhcmVudCA9PSBudWxsKSB7IHJldHVybiBwYXRoIH1cbiAgcmV0dXJuIGNsZWFuUGF0aCgoKHBhcmVudC5wYXRoKSArIFwiL1wiICsgcGF0aCkpXG59XG5cbi8qICAqL1xuXG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUxvY2F0aW9uIChcbiAgcmF3LFxuICBjdXJyZW50LFxuICBhcHBlbmQsXG4gIHJvdXRlclxuKSB7XG4gIHZhciBuZXh0ID0gdHlwZW9mIHJhdyA9PT0gJ3N0cmluZycgPyB7IHBhdGg6IHJhdyB9IDogcmF3O1xuICAvLyBuYW1lZCB0YXJnZXRcbiAgaWYgKG5leHQubmFtZSB8fCBuZXh0Ll9ub3JtYWxpemVkKSB7XG4gICAgcmV0dXJuIG5leHRcbiAgfVxuXG4gIC8vIHJlbGF0aXZlIHBhcmFtc1xuICBpZiAoIW5leHQucGF0aCAmJiBuZXh0LnBhcmFtcyAmJiBjdXJyZW50KSB7XG4gICAgbmV4dCA9IGFzc2lnbih7fSwgbmV4dCk7XG4gICAgbmV4dC5fbm9ybWFsaXplZCA9IHRydWU7XG4gICAgdmFyIHBhcmFtcyA9IGFzc2lnbihhc3NpZ24oe30sIGN1cnJlbnQucGFyYW1zKSwgbmV4dC5wYXJhbXMpO1xuICAgIGlmIChjdXJyZW50Lm5hbWUpIHtcbiAgICAgIG5leHQubmFtZSA9IGN1cnJlbnQubmFtZTtcbiAgICAgIG5leHQucGFyYW1zID0gcGFyYW1zO1xuICAgIH0gZWxzZSBpZiAoY3VycmVudC5tYXRjaGVkLmxlbmd0aCkge1xuICAgICAgdmFyIHJhd1BhdGggPSBjdXJyZW50Lm1hdGNoZWRbY3VycmVudC5tYXRjaGVkLmxlbmd0aCAtIDFdLnBhdGg7XG4gICAgICBuZXh0LnBhdGggPSBmaWxsUGFyYW1zKHJhd1BhdGgsIHBhcmFtcywgKFwicGF0aCBcIiArIChjdXJyZW50LnBhdGgpKSk7XG4gICAgfSBlbHNlIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB3YXJuKGZhbHNlLCBcInJlbGF0aXZlIHBhcmFtcyBuYXZpZ2F0aW9uIHJlcXVpcmVzIGEgY3VycmVudCByb3V0ZS5cIik7XG4gICAgfVxuICAgIHJldHVybiBuZXh0XG4gIH1cblxuICB2YXIgcGFyc2VkUGF0aCA9IHBhcnNlUGF0aChuZXh0LnBhdGggfHwgJycpO1xuICB2YXIgYmFzZVBhdGggPSAoY3VycmVudCAmJiBjdXJyZW50LnBhdGgpIHx8ICcvJztcbiAgdmFyIHBhdGggPSBwYXJzZWRQYXRoLnBhdGhcbiAgICA/IHJlc29sdmVQYXRoKHBhcnNlZFBhdGgucGF0aCwgYmFzZVBhdGgsIGFwcGVuZCB8fCBuZXh0LmFwcGVuZClcbiAgICA6IGJhc2VQYXRoO1xuXG4gIHZhciBxdWVyeSA9IHJlc29sdmVRdWVyeShcbiAgICBwYXJzZWRQYXRoLnF1ZXJ5LFxuICAgIG5leHQucXVlcnksXG4gICAgcm91dGVyICYmIHJvdXRlci5vcHRpb25zLnBhcnNlUXVlcnlcbiAgKTtcblxuICB2YXIgaGFzaCA9IG5leHQuaGFzaCB8fCBwYXJzZWRQYXRoLmhhc2g7XG4gIGlmIChoYXNoICYmIGhhc2guY2hhckF0KDApICE9PSAnIycpIHtcbiAgICBoYXNoID0gXCIjXCIgKyBoYXNoO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBfbm9ybWFsaXplZDogdHJ1ZSxcbiAgICBwYXRoOiBwYXRoLFxuICAgIHF1ZXJ5OiBxdWVyeSxcbiAgICBoYXNoOiBoYXNoXG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzaWduIChhLCBiKSB7XG4gIGZvciAodmFyIGtleSBpbiBiKSB7XG4gICAgYVtrZXldID0gYltrZXldO1xuICB9XG4gIHJldHVybiBhXG59XG5cbi8qICAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZU1hdGNoZXIgKFxuICByb3V0ZXMsXG4gIHJvdXRlclxuKSB7XG4gIHZhciByZWYgPSBjcmVhdGVSb3V0ZU1hcChyb3V0ZXMpO1xuICB2YXIgcGF0aExpc3QgPSByZWYucGF0aExpc3Q7XG4gIHZhciBwYXRoTWFwID0gcmVmLnBhdGhNYXA7XG4gIHZhciBuYW1lTWFwID0gcmVmLm5hbWVNYXA7XG5cbiAgZnVuY3Rpb24gYWRkUm91dGVzIChyb3V0ZXMpIHtcbiAgICBjcmVhdGVSb3V0ZU1hcChyb3V0ZXMsIHBhdGhMaXN0LCBwYXRoTWFwLCBuYW1lTWFwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1hdGNoIChcbiAgICByYXcsXG4gICAgY3VycmVudFJvdXRlLFxuICAgIHJlZGlyZWN0ZWRGcm9tXG4gICkge1xuICAgIHZhciBsb2NhdGlvbiA9IG5vcm1hbGl6ZUxvY2F0aW9uKHJhdywgY3VycmVudFJvdXRlLCBmYWxzZSwgcm91dGVyKTtcbiAgICB2YXIgbmFtZSA9IGxvY2F0aW9uLm5hbWU7XG5cbiAgICBpZiAobmFtZSkge1xuICAgICAgdmFyIHJlY29yZCA9IG5hbWVNYXBbbmFtZV07XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB3YXJuKHJlY29yZCwgKFwiUm91dGUgd2l0aCBuYW1lICdcIiArIG5hbWUgKyBcIicgZG9lcyBub3QgZXhpc3RcIikpO1xuICAgICAgfVxuICAgICAgaWYgKCFyZWNvcmQpIHsgcmV0dXJuIF9jcmVhdGVSb3V0ZShudWxsLCBsb2NhdGlvbikgfVxuICAgICAgdmFyIHBhcmFtTmFtZXMgPSByZWNvcmQucmVnZXgua2V5c1xuICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuICFrZXkub3B0aW9uYWw7IH0pXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4ga2V5Lm5hbWU7IH0pO1xuXG4gICAgICBpZiAodHlwZW9mIGxvY2F0aW9uLnBhcmFtcyAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgbG9jYXRpb24ucGFyYW1zID0ge307XG4gICAgICB9XG5cbiAgICAgIGlmIChjdXJyZW50Um91dGUgJiYgdHlwZW9mIGN1cnJlbnRSb3V0ZS5wYXJhbXMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBjdXJyZW50Um91dGUucGFyYW1zKSB7XG4gICAgICAgICAgaWYgKCEoa2V5IGluIGxvY2F0aW9uLnBhcmFtcykgJiYgcGFyYW1OYW1lcy5pbmRleE9mKGtleSkgPiAtMSkge1xuICAgICAgICAgICAgbG9jYXRpb24ucGFyYW1zW2tleV0gPSBjdXJyZW50Um91dGUucGFyYW1zW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQpIHtcbiAgICAgICAgbG9jYXRpb24ucGF0aCA9IGZpbGxQYXJhbXMocmVjb3JkLnBhdGgsIGxvY2F0aW9uLnBhcmFtcywgKFwibmFtZWQgcm91dGUgXFxcIlwiICsgbmFtZSArIFwiXFxcIlwiKSk7XG4gICAgICAgIHJldHVybiBfY3JlYXRlUm91dGUocmVjb3JkLCBsb2NhdGlvbiwgcmVkaXJlY3RlZEZyb20pXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChsb2NhdGlvbi5wYXRoKSB7XG4gICAgICBsb2NhdGlvbi5wYXJhbXMgPSB7fTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aExpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHBhdGggPSBwYXRoTGlzdFtpXTtcbiAgICAgICAgdmFyIHJlY29yZCQxID0gcGF0aE1hcFtwYXRoXTtcbiAgICAgICAgaWYgKG1hdGNoUm91dGUocmVjb3JkJDEucmVnZXgsIGxvY2F0aW9uLnBhdGgsIGxvY2F0aW9uLnBhcmFtcykpIHtcbiAgICAgICAgICByZXR1cm4gX2NyZWF0ZVJvdXRlKHJlY29yZCQxLCBsb2NhdGlvbiwgcmVkaXJlY3RlZEZyb20pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgLy8gbm8gbWF0Y2hcbiAgICByZXR1cm4gX2NyZWF0ZVJvdXRlKG51bGwsIGxvY2F0aW9uKVxuICB9XG5cbiAgZnVuY3Rpb24gcmVkaXJlY3QgKFxuICAgIHJlY29yZCxcbiAgICBsb2NhdGlvblxuICApIHtcbiAgICB2YXIgb3JpZ2luYWxSZWRpcmVjdCA9IHJlY29yZC5yZWRpcmVjdDtcbiAgICB2YXIgcmVkaXJlY3QgPSB0eXBlb2Ygb3JpZ2luYWxSZWRpcmVjdCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IG9yaWdpbmFsUmVkaXJlY3QoY3JlYXRlUm91dGUocmVjb3JkLCBsb2NhdGlvbiwgbnVsbCwgcm91dGVyKSlcbiAgICAgICAgOiBvcmlnaW5hbFJlZGlyZWN0O1xuXG4gICAgaWYgKHR5cGVvZiByZWRpcmVjdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJlZGlyZWN0ID0geyBwYXRoOiByZWRpcmVjdCB9O1xuICAgIH1cblxuICAgIGlmICghcmVkaXJlY3QgfHwgdHlwZW9mIHJlZGlyZWN0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBmYWxzZSwgKFwiaW52YWxpZCByZWRpcmVjdCBvcHRpb246IFwiICsgKEpTT04uc3RyaW5naWZ5KHJlZGlyZWN0KSkpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gX2NyZWF0ZVJvdXRlKG51bGwsIGxvY2F0aW9uKVxuICAgIH1cblxuICAgIHZhciByZSA9IHJlZGlyZWN0O1xuICAgIHZhciBuYW1lID0gcmUubmFtZTtcbiAgICB2YXIgcGF0aCA9IHJlLnBhdGg7XG4gICAgdmFyIHF1ZXJ5ID0gbG9jYXRpb24ucXVlcnk7XG4gICAgdmFyIGhhc2ggPSBsb2NhdGlvbi5oYXNoO1xuICAgIHZhciBwYXJhbXMgPSBsb2NhdGlvbi5wYXJhbXM7XG4gICAgcXVlcnkgPSByZS5oYXNPd25Qcm9wZXJ0eSgncXVlcnknKSA/IHJlLnF1ZXJ5IDogcXVlcnk7XG4gICAgaGFzaCA9IHJlLmhhc093blByb3BlcnR5KCdoYXNoJykgPyByZS5oYXNoIDogaGFzaDtcbiAgICBwYXJhbXMgPSByZS5oYXNPd25Qcm9wZXJ0eSgncGFyYW1zJykgPyByZS5wYXJhbXMgOiBwYXJhbXM7XG5cbiAgICBpZiAobmFtZSkge1xuICAgICAgLy8gcmVzb2x2ZWQgbmFtZWQgZGlyZWN0XG4gICAgICB2YXIgdGFyZ2V0UmVjb3JkID0gbmFtZU1hcFtuYW1lXTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGFzc2VydCh0YXJnZXRSZWNvcmQsIChcInJlZGlyZWN0IGZhaWxlZDogbmFtZWQgcm91dGUgXFxcIlwiICsgbmFtZSArIFwiXFxcIiBub3QgZm91bmQuXCIpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXRjaCh7XG4gICAgICAgIF9ub3JtYWxpemVkOiB0cnVlLFxuICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICBxdWVyeTogcXVlcnksXG4gICAgICAgIGhhc2g6IGhhc2gsXG4gICAgICAgIHBhcmFtczogcGFyYW1zXG4gICAgICB9LCB1bmRlZmluZWQsIGxvY2F0aW9uKVxuICAgIH0gZWxzZSBpZiAocGF0aCkge1xuICAgICAgLy8gMS4gcmVzb2x2ZSByZWxhdGl2ZSByZWRpcmVjdFxuICAgICAgdmFyIHJhd1BhdGggPSByZXNvbHZlUmVjb3JkUGF0aChwYXRoLCByZWNvcmQpO1xuICAgICAgLy8gMi4gcmVzb2x2ZSBwYXJhbXNcbiAgICAgIHZhciByZXNvbHZlZFBhdGggPSBmaWxsUGFyYW1zKHJhd1BhdGgsIHBhcmFtcywgKFwicmVkaXJlY3Qgcm91dGUgd2l0aCBwYXRoIFxcXCJcIiArIHJhd1BhdGggKyBcIlxcXCJcIikpO1xuICAgICAgLy8gMy4gcmVtYXRjaCB3aXRoIGV4aXN0aW5nIHF1ZXJ5IGFuZCBoYXNoXG4gICAgICByZXR1cm4gbWF0Y2goe1xuICAgICAgICBfbm9ybWFsaXplZDogdHJ1ZSxcbiAgICAgICAgcGF0aDogcmVzb2x2ZWRQYXRoLFxuICAgICAgICBxdWVyeTogcXVlcnksXG4gICAgICAgIGhhc2g6IGhhc2hcbiAgICAgIH0sIHVuZGVmaW5lZCwgbG9jYXRpb24pXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHdhcm4oZmFsc2UsIChcImludmFsaWQgcmVkaXJlY3Qgb3B0aW9uOiBcIiArIChKU09OLnN0cmluZ2lmeShyZWRpcmVjdCkpKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gX2NyZWF0ZVJvdXRlKG51bGwsIGxvY2F0aW9uKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGFsaWFzIChcbiAgICByZWNvcmQsXG4gICAgbG9jYXRpb24sXG4gICAgbWF0Y2hBc1xuICApIHtcbiAgICB2YXIgYWxpYXNlZFBhdGggPSBmaWxsUGFyYW1zKG1hdGNoQXMsIGxvY2F0aW9uLnBhcmFtcywgKFwiYWxpYXNlZCByb3V0ZSB3aXRoIHBhdGggXFxcIlwiICsgbWF0Y2hBcyArIFwiXFxcIlwiKSk7XG4gICAgdmFyIGFsaWFzZWRNYXRjaCA9IG1hdGNoKHtcbiAgICAgIF9ub3JtYWxpemVkOiB0cnVlLFxuICAgICAgcGF0aDogYWxpYXNlZFBhdGhcbiAgICB9KTtcbiAgICBpZiAoYWxpYXNlZE1hdGNoKSB7XG4gICAgICB2YXIgbWF0Y2hlZCA9IGFsaWFzZWRNYXRjaC5tYXRjaGVkO1xuICAgICAgdmFyIGFsaWFzZWRSZWNvcmQgPSBtYXRjaGVkW21hdGNoZWQubGVuZ3RoIC0gMV07XG4gICAgICBsb2NhdGlvbi5wYXJhbXMgPSBhbGlhc2VkTWF0Y2gucGFyYW1zO1xuICAgICAgcmV0dXJuIF9jcmVhdGVSb3V0ZShhbGlhc2VkUmVjb3JkLCBsb2NhdGlvbilcbiAgICB9XG4gICAgcmV0dXJuIF9jcmVhdGVSb3V0ZShudWxsLCBsb2NhdGlvbilcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jcmVhdGVSb3V0ZSAoXG4gICAgcmVjb3JkLFxuICAgIGxvY2F0aW9uLFxuICAgIHJlZGlyZWN0ZWRGcm9tXG4gICkge1xuICAgIGlmIChyZWNvcmQgJiYgcmVjb3JkLnJlZGlyZWN0KSB7XG4gICAgICByZXR1cm4gcmVkaXJlY3QocmVjb3JkLCByZWRpcmVjdGVkRnJvbSB8fCBsb2NhdGlvbilcbiAgICB9XG4gICAgaWYgKHJlY29yZCAmJiByZWNvcmQubWF0Y2hBcykge1xuICAgICAgcmV0dXJuIGFsaWFzKHJlY29yZCwgbG9jYXRpb24sIHJlY29yZC5tYXRjaEFzKVxuICAgIH1cbiAgICByZXR1cm4gY3JlYXRlUm91dGUocmVjb3JkLCBsb2NhdGlvbiwgcmVkaXJlY3RlZEZyb20sIHJvdXRlcilcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbWF0Y2g6IG1hdGNoLFxuICAgIGFkZFJvdXRlczogYWRkUm91dGVzXG4gIH1cbn1cblxuZnVuY3Rpb24gbWF0Y2hSb3V0ZSAoXG4gIHJlZ2V4LFxuICBwYXRoLFxuICBwYXJhbXNcbikge1xuICB2YXIgbSA9IHBhdGgubWF0Y2gocmVnZXgpO1xuXG4gIGlmICghbSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9IGVsc2UgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDEsIGxlbiA9IG0ubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgICB2YXIga2V5ID0gcmVnZXgua2V5c1tpIC0gMV07XG4gICAgdmFyIHZhbCA9IHR5cGVvZiBtW2ldID09PSAnc3RyaW5nJyA/IGRlY29kZVVSSUNvbXBvbmVudChtW2ldKSA6IG1baV07XG4gICAgaWYgKGtleSkge1xuICAgICAgcGFyYW1zW2tleS5uYW1lXSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZVxufVxuXG5mdW5jdGlvbiByZXNvbHZlUmVjb3JkUGF0aCAocGF0aCwgcmVjb3JkKSB7XG4gIHJldHVybiByZXNvbHZlUGF0aChwYXRoLCByZWNvcmQucGFyZW50ID8gcmVjb3JkLnBhcmVudC5wYXRoIDogJy8nLCB0cnVlKVxufVxuXG4vKiAgKi9cblxuXG52YXIgcG9zaXRpb25TdG9yZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbmZ1bmN0aW9uIHNldHVwU2Nyb2xsICgpIHtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgZnVuY3Rpb24gKGUpIHtcbiAgICBzYXZlU2Nyb2xsUG9zaXRpb24oKTtcbiAgICBpZiAoZS5zdGF0ZSAmJiBlLnN0YXRlLmtleSkge1xuICAgICAgc2V0U3RhdGVLZXkoZS5zdGF0ZS5rZXkpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZVNjcm9sbCAoXG4gIHJvdXRlcixcbiAgdG8sXG4gIGZyb20sXG4gIGlzUG9wXG4pIHtcbiAgaWYgKCFyb3V0ZXIuYXBwKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgYmVoYXZpb3IgPSByb3V0ZXIub3B0aW9ucy5zY3JvbGxCZWhhdmlvcjtcbiAgaWYgKCFiZWhhdmlvcikge1xuICAgIHJldHVyblxuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnQodHlwZW9mIGJlaGF2aW9yID09PSAnZnVuY3Rpb24nLCBcInNjcm9sbEJlaGF2aW9yIG11c3QgYmUgYSBmdW5jdGlvblwiKTtcbiAgfVxuXG4gIC8vIHdhaXQgdW50aWwgcmUtcmVuZGVyIGZpbmlzaGVzIGJlZm9yZSBzY3JvbGxpbmdcbiAgcm91dGVyLmFwcC4kbmV4dFRpY2soZnVuY3Rpb24gKCkge1xuICAgIHZhciBwb3NpdGlvbiA9IGdldFNjcm9sbFBvc2l0aW9uKCk7XG4gICAgdmFyIHNob3VsZFNjcm9sbCA9IGJlaGF2aW9yKHRvLCBmcm9tLCBpc1BvcCA/IHBvc2l0aW9uIDogbnVsbCk7XG4gICAgaWYgKCFzaG91bGRTY3JvbGwpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICB2YXIgaXNPYmplY3QgPSB0eXBlb2Ygc2hvdWxkU2Nyb2xsID09PSAnb2JqZWN0JztcbiAgICBpZiAoaXNPYmplY3QgJiYgdHlwZW9mIHNob3VsZFNjcm9sbC5zZWxlY3RvciA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhciBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2hvdWxkU2Nyb2xsLnNlbGVjdG9yKTtcbiAgICAgIGlmIChlbCkge1xuICAgICAgICB2YXIgb2Zmc2V0ID0gc2hvdWxkU2Nyb2xsLm9mZnNldCAmJiB0eXBlb2Ygc2hvdWxkU2Nyb2xsLm9mZnNldCA9PT0gJ29iamVjdCcgPyBzaG91bGRTY3JvbGwub2Zmc2V0IDoge307XG4gICAgICAgIG9mZnNldCA9IG5vcm1hbGl6ZU9mZnNldChvZmZzZXQpO1xuICAgICAgICBwb3NpdGlvbiA9IGdldEVsZW1lbnRQb3NpdGlvbihlbCwgb2Zmc2V0KTtcbiAgICAgIH0gZWxzZSBpZiAoaXNWYWxpZFBvc2l0aW9uKHNob3VsZFNjcm9sbCkpIHtcbiAgICAgICAgcG9zaXRpb24gPSBub3JtYWxpemVQb3NpdGlvbihzaG91bGRTY3JvbGwpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNPYmplY3QgJiYgaXNWYWxpZFBvc2l0aW9uKHNob3VsZFNjcm9sbCkpIHtcbiAgICAgIHBvc2l0aW9uID0gbm9ybWFsaXplUG9zaXRpb24oc2hvdWxkU2Nyb2xsKTtcbiAgICB9XG5cbiAgICBpZiAocG9zaXRpb24pIHtcbiAgICAgIHdpbmRvdy5zY3JvbGxUbyhwb3NpdGlvbi54LCBwb3NpdGlvbi55KTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzYXZlU2Nyb2xsUG9zaXRpb24gKCkge1xuICB2YXIga2V5ID0gZ2V0U3RhdGVLZXkoKTtcbiAgaWYgKGtleSkge1xuICAgIHBvc2l0aW9uU3RvcmVba2V5XSA9IHtcbiAgICAgIHg6IHdpbmRvdy5wYWdlWE9mZnNldCxcbiAgICAgIHk6IHdpbmRvdy5wYWdlWU9mZnNldFxuICAgIH07XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0U2Nyb2xsUG9zaXRpb24gKCkge1xuICB2YXIga2V5ID0gZ2V0U3RhdGVLZXkoKTtcbiAgaWYgKGtleSkge1xuICAgIHJldHVybiBwb3NpdGlvblN0b3JlW2tleV1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRFbGVtZW50UG9zaXRpb24gKGVsLCBvZmZzZXQpIHtcbiAgdmFyIGRvY0VsID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICB2YXIgZG9jUmVjdCA9IGRvY0VsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB2YXIgZWxSZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHJldHVybiB7XG4gICAgeDogZWxSZWN0LmxlZnQgLSBkb2NSZWN0LmxlZnQgLSBvZmZzZXQueCxcbiAgICB5OiBlbFJlY3QudG9wIC0gZG9jUmVjdC50b3AgLSBvZmZzZXQueVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWRQb3NpdGlvbiAob2JqKSB7XG4gIHJldHVybiBpc051bWJlcihvYmoueCkgfHwgaXNOdW1iZXIob2JqLnkpXG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVBvc2l0aW9uIChvYmopIHtcbiAgcmV0dXJuIHtcbiAgICB4OiBpc051bWJlcihvYmoueCkgPyBvYmoueCA6IHdpbmRvdy5wYWdlWE9mZnNldCxcbiAgICB5OiBpc051bWJlcihvYmoueSkgPyBvYmoueSA6IHdpbmRvdy5wYWdlWU9mZnNldFxuICB9XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZU9mZnNldCAob2JqKSB7XG4gIHJldHVybiB7XG4gICAgeDogaXNOdW1iZXIob2JqLngpID8gb2JqLnggOiAwLFxuICAgIHk6IGlzTnVtYmVyKG9iai55KSA/IG9iai55IDogMFxuICB9XG59XG5cbmZ1bmN0aW9uIGlzTnVtYmVyICh2KSB7XG4gIHJldHVybiB0eXBlb2YgdiA9PT0gJ251bWJlcidcbn1cblxuLyogICovXG5cbnZhciBzdXBwb3J0c1B1c2hTdGF0ZSA9IGluQnJvd3NlciAmJiAoZnVuY3Rpb24gKCkge1xuICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcblxuICBpZiAoXG4gICAgKHVhLmluZGV4T2YoJ0FuZHJvaWQgMi4nKSAhPT0gLTEgfHwgdWEuaW5kZXhPZignQW5kcm9pZCA0LjAnKSAhPT0gLTEpICYmXG4gICAgdWEuaW5kZXhPZignTW9iaWxlIFNhZmFyaScpICE9PSAtMSAmJlxuICAgIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJlxuICAgIHVhLmluZGV4T2YoJ1dpbmRvd3MgUGhvbmUnKSA9PT0gLTFcbiAgKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICByZXR1cm4gd2luZG93Lmhpc3RvcnkgJiYgJ3B1c2hTdGF0ZScgaW4gd2luZG93Lmhpc3Rvcnlcbn0pKCk7XG5cbi8vIHVzZSBVc2VyIFRpbWluZyBhcGkgKGlmIHByZXNlbnQpIGZvciBtb3JlIGFjY3VyYXRlIGtleSBwcmVjaXNpb25cbnZhciBUaW1lID0gaW5Ccm93c2VyICYmIHdpbmRvdy5wZXJmb3JtYW5jZSAmJiB3aW5kb3cucGVyZm9ybWFuY2Uubm93XG4gID8gd2luZG93LnBlcmZvcm1hbmNlXG4gIDogRGF0ZTtcblxudmFyIF9rZXkgPSBnZW5LZXkoKTtcblxuZnVuY3Rpb24gZ2VuS2V5ICgpIHtcbiAgcmV0dXJuIFRpbWUubm93KCkudG9GaXhlZCgzKVxufVxuXG5mdW5jdGlvbiBnZXRTdGF0ZUtleSAoKSB7XG4gIHJldHVybiBfa2V5XG59XG5cbmZ1bmN0aW9uIHNldFN0YXRlS2V5IChrZXkpIHtcbiAgX2tleSA9IGtleTtcbn1cblxuZnVuY3Rpb24gcHVzaFN0YXRlICh1cmwsIHJlcGxhY2UpIHtcbiAgc2F2ZVNjcm9sbFBvc2l0aW9uKCk7XG4gIC8vIHRyeS4uLmNhdGNoIHRoZSBwdXNoU3RhdGUgY2FsbCB0byBnZXQgYXJvdW5kIFNhZmFyaVxuICAvLyBET00gRXhjZXB0aW9uIDE4IHdoZXJlIGl0IGxpbWl0cyB0byAxMDAgcHVzaFN0YXRlIGNhbGxzXG4gIHZhciBoaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHRyeSB7XG4gICAgaWYgKHJlcGxhY2UpIHtcbiAgICAgIGhpc3RvcnkucmVwbGFjZVN0YXRlKHsga2V5OiBfa2V5IH0sICcnLCB1cmwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfa2V5ID0gZ2VuS2V5KCk7XG4gICAgICBoaXN0b3J5LnB1c2hTdGF0ZSh7IGtleTogX2tleSB9LCAnJywgdXJsKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB3aW5kb3cubG9jYXRpb25bcmVwbGFjZSA/ICdyZXBsYWNlJyA6ICdhc3NpZ24nXSh1cmwpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VTdGF0ZSAodXJsKSB7XG4gIHB1c2hTdGF0ZSh1cmwsIHRydWUpO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gcnVuUXVldWUgKHF1ZXVlLCBmbiwgY2IpIHtcbiAgdmFyIHN0ZXAgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICBpZiAoaW5kZXggPj0gcXVldWUubGVuZ3RoKSB7XG4gICAgICBjYigpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocXVldWVbaW5kZXhdKSB7XG4gICAgICAgIGZuKHF1ZXVlW2luZGV4XSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHN0ZXAoaW5kZXggKyAxKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGVwKGluZGV4ICsgMSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBzdGVwKDApO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gcmVzb2x2ZUFzeW5jQ29tcG9uZW50cyAobWF0Y2hlZCkge1xuICByZXR1cm4gZnVuY3Rpb24gKHRvLCBmcm9tLCBuZXh0KSB7XG4gICAgdmFyIGhhc0FzeW5jID0gZmFsc2U7XG4gICAgdmFyIHBlbmRpbmcgPSAwO1xuICAgIHZhciBlcnJvciA9IG51bGw7XG5cbiAgICBmbGF0TWFwQ29tcG9uZW50cyhtYXRjaGVkLCBmdW5jdGlvbiAoZGVmLCBfLCBtYXRjaCwga2V5KSB7XG4gICAgICAvLyBpZiBpdCdzIGEgZnVuY3Rpb24gYW5kIGRvZXNuJ3QgaGF2ZSBjaWQgYXR0YWNoZWQsXG4gICAgICAvLyBhc3N1bWUgaXQncyBhbiBhc3luYyBjb21wb25lbnQgcmVzb2x2ZSBmdW5jdGlvbi5cbiAgICAgIC8vIHdlIGFyZSBub3QgdXNpbmcgVnVlJ3MgZGVmYXVsdCBhc3luYyByZXNvbHZpbmcgbWVjaGFuaXNtIGJlY2F1c2VcbiAgICAgIC8vIHdlIHdhbnQgdG8gaGFsdCB0aGUgbmF2aWdhdGlvbiB1bnRpbCB0aGUgaW5jb21pbmcgY29tcG9uZW50IGhhcyBiZWVuXG4gICAgICAvLyByZXNvbHZlZC5cbiAgICAgIGlmICh0eXBlb2YgZGVmID09PSAnZnVuY3Rpb24nICYmIGRlZi5jaWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBoYXNBc3luYyA9IHRydWU7XG4gICAgICAgIHBlbmRpbmcrKztcblxuICAgICAgICB2YXIgcmVzb2x2ZSA9IG9uY2UoZnVuY3Rpb24gKHJlc29sdmVkRGVmKSB7XG4gICAgICAgICAgaWYgKHJlc29sdmVkRGVmLl9fZXNNb2R1bGUgJiYgcmVzb2x2ZWREZWYuZGVmYXVsdCkge1xuICAgICAgICAgICAgcmVzb2x2ZWREZWYgPSByZXNvbHZlZERlZi5kZWZhdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBzYXZlIHJlc29sdmVkIG9uIGFzeW5jIGZhY3RvcnkgaW4gY2FzZSBpdCdzIHVzZWQgZWxzZXdoZXJlXG4gICAgICAgICAgZGVmLnJlc29sdmVkID0gdHlwZW9mIHJlc29sdmVkRGVmID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICA/IHJlc29sdmVkRGVmXG4gICAgICAgICAgICA6IF9WdWUuZXh0ZW5kKHJlc29sdmVkRGVmKTtcbiAgICAgICAgICBtYXRjaC5jb21wb25lbnRzW2tleV0gPSByZXNvbHZlZERlZjtcbiAgICAgICAgICBwZW5kaW5nLS07XG4gICAgICAgICAgaWYgKHBlbmRpbmcgPD0gMCkge1xuICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIHJlamVjdCA9IG9uY2UoZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgICAgIHZhciBtc2cgPSBcIkZhaWxlZCB0byByZXNvbHZlIGFzeW5jIGNvbXBvbmVudCBcIiArIGtleSArIFwiOiBcIiArIHJlYXNvbjtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oZmFsc2UsIG1zZyk7XG4gICAgICAgICAgaWYgKCFlcnJvcikge1xuICAgICAgICAgICAgZXJyb3IgPSBpc0Vycm9yKHJlYXNvbilcbiAgICAgICAgICAgICAgPyByZWFzb25cbiAgICAgICAgICAgICAgOiBuZXcgRXJyb3IobXNnKTtcbiAgICAgICAgICAgIG5leHQoZXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIHJlcztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXMgPSBkZWYocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiByZXMudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcmVzLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gbmV3IHN5bnRheCBpbiBWdWUgMi4zXG4gICAgICAgICAgICB2YXIgY29tcCA9IHJlcy5jb21wb25lbnQ7XG4gICAgICAgICAgICBpZiAoY29tcCAmJiB0eXBlb2YgY29tcC50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIGNvbXAudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKCFoYXNBc3luYykgeyBuZXh0KCk7IH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmbGF0TWFwQ29tcG9uZW50cyAoXG4gIG1hdGNoZWQsXG4gIGZuXG4pIHtcbiAgcmV0dXJuIGZsYXR0ZW4obWF0Y2hlZC5tYXAoZnVuY3Rpb24gKG0pIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMobS5jb21wb25lbnRzKS5tYXAoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4gZm4oXG4gICAgICBtLmNvbXBvbmVudHNba2V5XSxcbiAgICAgIG0uaW5zdGFuY2VzW2tleV0sXG4gICAgICBtLCBrZXlcbiAgICApOyB9KVxuICB9KSlcbn1cblxuZnVuY3Rpb24gZmxhdHRlbiAoYXJyKSB7XG4gIHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLCBhcnIpXG59XG5cbi8vIGluIFdlYnBhY2sgMiwgcmVxdWlyZS5lbnN1cmUgbm93IGFsc28gcmV0dXJucyBhIFByb21pc2Vcbi8vIHNvIHRoZSByZXNvbHZlL3JlamVjdCBmdW5jdGlvbnMgbWF5IGdldCBjYWxsZWQgYW4gZXh0cmEgdGltZVxuLy8gaWYgdGhlIHVzZXIgdXNlcyBhbiBhcnJvdyBmdW5jdGlvbiBzaG9ydGhhbmQgdGhhdCBoYXBwZW5zIHRvXG4vLyByZXR1cm4gdGhhdCBQcm9taXNlLlxuZnVuY3Rpb24gb25jZSAoZm4pIHtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgIGlmIChjYWxsZWQpIHsgcmV0dXJuIH1cbiAgICBjYWxsZWQgPSB0cnVlO1xuICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmdzKVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgSGlzdG9yeSA9IGZ1bmN0aW9uIEhpc3RvcnkgKHJvdXRlciwgYmFzZSkge1xuICB0aGlzLnJvdXRlciA9IHJvdXRlcjtcbiAgdGhpcy5iYXNlID0gbm9ybWFsaXplQmFzZShiYXNlKTtcbiAgLy8gc3RhcnQgd2l0aCBhIHJvdXRlIG9iamVjdCB0aGF0IHN0YW5kcyBmb3IgXCJub3doZXJlXCJcbiAgdGhpcy5jdXJyZW50ID0gU1RBUlQ7XG4gIHRoaXMucGVuZGluZyA9IG51bGw7XG4gIHRoaXMucmVhZHkgPSBmYWxzZTtcbiAgdGhpcy5yZWFkeUNicyA9IFtdO1xuICB0aGlzLnJlYWR5RXJyb3JDYnMgPSBbXTtcbiAgdGhpcy5lcnJvckNicyA9IFtdO1xufTtcblxuSGlzdG9yeS5wcm90b3R5cGUubGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuIChjYikge1xuICB0aGlzLmNiID0gY2I7XG59O1xuXG5IaXN0b3J5LnByb3RvdHlwZS5vblJlYWR5ID0gZnVuY3Rpb24gb25SZWFkeSAoY2IsIGVycm9yQ2IpIHtcbiAgaWYgKHRoaXMucmVhZHkpIHtcbiAgICBjYigpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMucmVhZHlDYnMucHVzaChjYik7XG4gICAgaWYgKGVycm9yQ2IpIHtcbiAgICAgIHRoaXMucmVhZHlFcnJvckNicy5wdXNoKGVycm9yQ2IpO1xuICAgIH1cbiAgfVxufTtcblxuSGlzdG9yeS5wcm90b3R5cGUub25FcnJvciA9IGZ1bmN0aW9uIG9uRXJyb3IgKGVycm9yQ2IpIHtcbiAgdGhpcy5lcnJvckNicy5wdXNoKGVycm9yQ2IpO1xufTtcblxuSGlzdG9yeS5wcm90b3R5cGUudHJhbnNpdGlvblRvID0gZnVuY3Rpb24gdHJhbnNpdGlvblRvIChsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciByb3V0ZSA9IHRoaXMucm91dGVyLm1hdGNoKGxvY2F0aW9uLCB0aGlzLmN1cnJlbnQpO1xuICB0aGlzLmNvbmZpcm1UcmFuc2l0aW9uKHJvdXRlLCBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcyQxLnVwZGF0ZVJvdXRlKHJvdXRlKTtcbiAgICBvbkNvbXBsZXRlICYmIG9uQ29tcGxldGUocm91dGUpO1xuICAgIHRoaXMkMS5lbnN1cmVVUkwoKTtcblxuICAgIC8vIGZpcmUgcmVhZHkgY2JzIG9uY2VcbiAgICBpZiAoIXRoaXMkMS5yZWFkeSkge1xuICAgICAgdGhpcyQxLnJlYWR5ID0gdHJ1ZTtcbiAgICAgIHRoaXMkMS5yZWFkeUNicy5mb3JFYWNoKGZ1bmN0aW9uIChjYikgeyBjYihyb3V0ZSk7IH0pO1xuICAgIH1cbiAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgIGlmIChvbkFib3J0KSB7XG4gICAgICBvbkFib3J0KGVycik7XG4gICAgfVxuICAgIGlmIChlcnIgJiYgIXRoaXMkMS5yZWFkeSkge1xuICAgICAgdGhpcyQxLnJlYWR5ID0gdHJ1ZTtcbiAgICAgIHRoaXMkMS5yZWFkeUVycm9yQ2JzLmZvckVhY2goZnVuY3Rpb24gKGNiKSB7IGNiKGVycik7IH0pO1xuICAgIH1cbiAgfSk7XG59O1xuXG5IaXN0b3J5LnByb3RvdHlwZS5jb25maXJtVHJhbnNpdGlvbiA9IGZ1bmN0aW9uIGNvbmZpcm1UcmFuc2l0aW9uIChyb3V0ZSwgb25Db21wbGV0ZSwgb25BYm9ydCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBjdXJyZW50ID0gdGhpcy5jdXJyZW50O1xuICB2YXIgYWJvcnQgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgaWYgKGlzRXJyb3IoZXJyKSkge1xuICAgICAgaWYgKHRoaXMkMS5lcnJvckNicy5sZW5ndGgpIHtcbiAgICAgICAgdGhpcyQxLmVycm9yQ2JzLmZvckVhY2goZnVuY3Rpb24gKGNiKSB7IGNiKGVycik7IH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybihmYWxzZSwgJ3VuY2F1Z2h0IGVycm9yIGR1cmluZyByb3V0ZSBuYXZpZ2F0aW9uOicpO1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICB9XG4gICAgfVxuICAgIG9uQWJvcnQgJiYgb25BYm9ydChlcnIpO1xuICB9O1xuICBpZiAoXG4gICAgaXNTYW1lUm91dGUocm91dGUsIGN1cnJlbnQpICYmXG4gICAgLy8gaW4gdGhlIGNhc2UgdGhlIHJvdXRlIG1hcCBoYXMgYmVlbiBkeW5hbWljYWxseSBhcHBlbmRlZCB0b1xuICAgIHJvdXRlLm1hdGNoZWQubGVuZ3RoID09PSBjdXJyZW50Lm1hdGNoZWQubGVuZ3RoXG4gICkge1xuICAgIHRoaXMuZW5zdXJlVVJMKCk7XG4gICAgcmV0dXJuIGFib3J0KClcbiAgfVxuXG4gIHZhciByZWYgPSByZXNvbHZlUXVldWUodGhpcy5jdXJyZW50Lm1hdGNoZWQsIHJvdXRlLm1hdGNoZWQpO1xuICAgIHZhciB1cGRhdGVkID0gcmVmLnVwZGF0ZWQ7XG4gICAgdmFyIGRlYWN0aXZhdGVkID0gcmVmLmRlYWN0aXZhdGVkO1xuICAgIHZhciBhY3RpdmF0ZWQgPSByZWYuYWN0aXZhdGVkO1xuXG4gIHZhciBxdWV1ZSA9IFtdLmNvbmNhdChcbiAgICAvLyBpbi1jb21wb25lbnQgbGVhdmUgZ3VhcmRzXG4gICAgZXh0cmFjdExlYXZlR3VhcmRzKGRlYWN0aXZhdGVkKSxcbiAgICAvLyBnbG9iYWwgYmVmb3JlIGhvb2tzXG4gICAgdGhpcy5yb3V0ZXIuYmVmb3JlSG9va3MsXG4gICAgLy8gaW4tY29tcG9uZW50IHVwZGF0ZSBob29rc1xuICAgIGV4dHJhY3RVcGRhdGVIb29rcyh1cGRhdGVkKSxcbiAgICAvLyBpbi1jb25maWcgZW50ZXIgZ3VhcmRzXG4gICAgYWN0aXZhdGVkLm1hcChmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5iZWZvcmVFbnRlcjsgfSksXG4gICAgLy8gYXN5bmMgY29tcG9uZW50c1xuICAgIHJlc29sdmVBc3luY0NvbXBvbmVudHMoYWN0aXZhdGVkKVxuICApO1xuXG4gIHRoaXMucGVuZGluZyA9IHJvdXRlO1xuICB2YXIgaXRlcmF0b3IgPSBmdW5jdGlvbiAoaG9vaywgbmV4dCkge1xuICAgIGlmICh0aGlzJDEucGVuZGluZyAhPT0gcm91dGUpIHtcbiAgICAgIHJldHVybiBhYm9ydCgpXG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBob29rKHJvdXRlLCBjdXJyZW50LCBmdW5jdGlvbiAodG8pIHtcbiAgICAgICAgaWYgKHRvID09PSBmYWxzZSB8fCBpc0Vycm9yKHRvKSkge1xuICAgICAgICAgIC8vIG5leHQoZmFsc2UpIC0+IGFib3J0IG5hdmlnYXRpb24sIGVuc3VyZSBjdXJyZW50IFVSTFxuICAgICAgICAgIHRoaXMkMS5lbnN1cmVVUkwodHJ1ZSk7XG4gICAgICAgICAgYWJvcnQodG8pO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIHR5cGVvZiB0byA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAodHlwZW9mIHRvID09PSAnb2JqZWN0JyAmJiAoXG4gICAgICAgICAgICB0eXBlb2YgdG8ucGF0aCA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAgIHR5cGVvZiB0by5uYW1lID09PSAnc3RyaW5nJ1xuICAgICAgICAgICkpXG4gICAgICAgICkge1xuICAgICAgICAgIC8vIG5leHQoJy8nKSBvciBuZXh0KHsgcGF0aDogJy8nIH0pIC0+IHJlZGlyZWN0XG4gICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICBpZiAodHlwZW9mIHRvID09PSAnb2JqZWN0JyAmJiB0by5yZXBsYWNlKSB7XG4gICAgICAgICAgICB0aGlzJDEucmVwbGFjZSh0byk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMkMS5wdXNoKHRvKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gY29uZmlybSB0cmFuc2l0aW9uIGFuZCBwYXNzIG9uIHRoZSB2YWx1ZVxuICAgICAgICAgIG5leHQodG8pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBhYm9ydChlKTtcbiAgICB9XG4gIH07XG5cbiAgcnVuUXVldWUocXVldWUsIGl0ZXJhdG9yLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBvc3RFbnRlckNicyA9IFtdO1xuICAgIHZhciBpc1ZhbGlkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcyQxLmN1cnJlbnQgPT09IHJvdXRlOyB9O1xuICAgIC8vIHdhaXQgdW50aWwgYXN5bmMgY29tcG9uZW50cyBhcmUgcmVzb2x2ZWQgYmVmb3JlXG4gICAgLy8gZXh0cmFjdGluZyBpbi1jb21wb25lbnQgZW50ZXIgZ3VhcmRzXG4gICAgdmFyIGVudGVyR3VhcmRzID0gZXh0cmFjdEVudGVyR3VhcmRzKGFjdGl2YXRlZCwgcG9zdEVudGVyQ2JzLCBpc1ZhbGlkKTtcbiAgICB2YXIgcXVldWUgPSBlbnRlckd1YXJkcy5jb25jYXQodGhpcyQxLnJvdXRlci5yZXNvbHZlSG9va3MpO1xuICAgIHJ1blF1ZXVlKHF1ZXVlLCBpdGVyYXRvciwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHRoaXMkMS5wZW5kaW5nICE9PSByb3V0ZSkge1xuICAgICAgICByZXR1cm4gYWJvcnQoKVxuICAgICAgfVxuICAgICAgdGhpcyQxLnBlbmRpbmcgPSBudWxsO1xuICAgICAgb25Db21wbGV0ZShyb3V0ZSk7XG4gICAgICBpZiAodGhpcyQxLnJvdXRlci5hcHApIHtcbiAgICAgICAgdGhpcyQxLnJvdXRlci5hcHAuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBwb3N0RW50ZXJDYnMuZm9yRWFjaChmdW5jdGlvbiAoY2IpIHsgY2IoKTsgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn07XG5cbkhpc3RvcnkucHJvdG90eXBlLnVwZGF0ZVJvdXRlID0gZnVuY3Rpb24gdXBkYXRlUm91dGUgKHJvdXRlKSB7XG4gIHZhciBwcmV2ID0gdGhpcy5jdXJyZW50O1xuICB0aGlzLmN1cnJlbnQgPSByb3V0ZTtcbiAgdGhpcy5jYiAmJiB0aGlzLmNiKHJvdXRlKTtcbiAgdGhpcy5yb3V0ZXIuYWZ0ZXJIb29rcy5mb3JFYWNoKGZ1bmN0aW9uIChob29rKSB7XG4gICAgaG9vayAmJiBob29rKHJvdXRlLCBwcmV2KTtcbiAgfSk7XG59O1xuXG5mdW5jdGlvbiBub3JtYWxpemVCYXNlIChiYXNlKSB7XG4gIGlmICghYmFzZSkge1xuICAgIGlmIChpbkJyb3dzZXIpIHtcbiAgICAgIC8vIHJlc3BlY3QgPGJhc2U+IHRhZ1xuICAgICAgdmFyIGJhc2VFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2Jhc2UnKTtcbiAgICAgIGJhc2UgPSAoYmFzZUVsICYmIGJhc2VFbC5nZXRBdHRyaWJ1dGUoJ2hyZWYnKSkgfHwgJy8nO1xuICAgICAgLy8gc3RyaXAgZnVsbCBVUkwgb3JpZ2luXG4gICAgICBiYXNlID0gYmFzZS5yZXBsYWNlKC9eaHR0cHM/OlxcL1xcL1teXFwvXSsvLCAnJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJhc2UgPSAnLyc7XG4gICAgfVxuICB9XG4gIC8vIG1ha2Ugc3VyZSB0aGVyZSdzIHRoZSBzdGFydGluZyBzbGFzaFxuICBpZiAoYmFzZS5jaGFyQXQoMCkgIT09ICcvJykge1xuICAgIGJhc2UgPSAnLycgKyBiYXNlO1xuICB9XG4gIC8vIHJlbW92ZSB0cmFpbGluZyBzbGFzaFxuICByZXR1cm4gYmFzZS5yZXBsYWNlKC9cXC8kLywgJycpXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVRdWV1ZSAoXG4gIGN1cnJlbnQsXG4gIG5leHRcbikge1xuICB2YXIgaTtcbiAgdmFyIG1heCA9IE1hdGgubWF4KGN1cnJlbnQubGVuZ3RoLCBuZXh0Lmxlbmd0aCk7XG4gIGZvciAoaSA9IDA7IGkgPCBtYXg7IGkrKykge1xuICAgIGlmIChjdXJyZW50W2ldICE9PSBuZXh0W2ldKSB7XG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIHVwZGF0ZWQ6IG5leHQuc2xpY2UoMCwgaSksXG4gICAgYWN0aXZhdGVkOiBuZXh0LnNsaWNlKGkpLFxuICAgIGRlYWN0aXZhdGVkOiBjdXJyZW50LnNsaWNlKGkpXG4gIH1cbn1cblxuZnVuY3Rpb24gZXh0cmFjdEd1YXJkcyAoXG4gIHJlY29yZHMsXG4gIG5hbWUsXG4gIGJpbmQsXG4gIHJldmVyc2Vcbikge1xuICB2YXIgZ3VhcmRzID0gZmxhdE1hcENvbXBvbmVudHMocmVjb3JkcywgZnVuY3Rpb24gKGRlZiwgaW5zdGFuY2UsIG1hdGNoLCBrZXkpIHtcbiAgICB2YXIgZ3VhcmQgPSBleHRyYWN0R3VhcmQoZGVmLCBuYW1lKTtcbiAgICBpZiAoZ3VhcmQpIHtcbiAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KGd1YXJkKVxuICAgICAgICA/IGd1YXJkLm1hcChmdW5jdGlvbiAoZ3VhcmQpIHsgcmV0dXJuIGJpbmQoZ3VhcmQsIGluc3RhbmNlLCBtYXRjaCwga2V5KTsgfSlcbiAgICAgICAgOiBiaW5kKGd1YXJkLCBpbnN0YW5jZSwgbWF0Y2gsIGtleSlcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gZmxhdHRlbihyZXZlcnNlID8gZ3VhcmRzLnJldmVyc2UoKSA6IGd1YXJkcylcbn1cblxuZnVuY3Rpb24gZXh0cmFjdEd1YXJkIChcbiAgZGVmLFxuICBrZXlcbikge1xuICBpZiAodHlwZW9mIGRlZiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIGV4dGVuZCBub3cgc28gdGhhdCBnbG9iYWwgbWl4aW5zIGFyZSBhcHBsaWVkLlxuICAgIGRlZiA9IF9WdWUuZXh0ZW5kKGRlZik7XG4gIH1cbiAgcmV0dXJuIGRlZi5vcHRpb25zW2tleV1cbn1cblxuZnVuY3Rpb24gZXh0cmFjdExlYXZlR3VhcmRzIChkZWFjdGl2YXRlZCkge1xuICByZXR1cm4gZXh0cmFjdEd1YXJkcyhkZWFjdGl2YXRlZCwgJ2JlZm9yZVJvdXRlTGVhdmUnLCBiaW5kR3VhcmQsIHRydWUpXG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RVcGRhdGVIb29rcyAodXBkYXRlZCkge1xuICByZXR1cm4gZXh0cmFjdEd1YXJkcyh1cGRhdGVkLCAnYmVmb3JlUm91dGVVcGRhdGUnLCBiaW5kR3VhcmQpXG59XG5cbmZ1bmN0aW9uIGJpbmRHdWFyZCAoZ3VhcmQsIGluc3RhbmNlKSB7XG4gIGlmIChpbnN0YW5jZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiBib3VuZFJvdXRlR3VhcmQgKCkge1xuICAgICAgcmV0dXJuIGd1YXJkLmFwcGx5KGluc3RhbmNlLCBhcmd1bWVudHMpXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RFbnRlckd1YXJkcyAoXG4gIGFjdGl2YXRlZCxcbiAgY2JzLFxuICBpc1ZhbGlkXG4pIHtcbiAgcmV0dXJuIGV4dHJhY3RHdWFyZHMoYWN0aXZhdGVkLCAnYmVmb3JlUm91dGVFbnRlcicsIGZ1bmN0aW9uIChndWFyZCwgXywgbWF0Y2gsIGtleSkge1xuICAgIHJldHVybiBiaW5kRW50ZXJHdWFyZChndWFyZCwgbWF0Y2gsIGtleSwgY2JzLCBpc1ZhbGlkKVxuICB9KVxufVxuXG5mdW5jdGlvbiBiaW5kRW50ZXJHdWFyZCAoXG4gIGd1YXJkLFxuICBtYXRjaCxcbiAga2V5LFxuICBjYnMsXG4gIGlzVmFsaWRcbikge1xuICByZXR1cm4gZnVuY3Rpb24gcm91dGVFbnRlckd1YXJkICh0bywgZnJvbSwgbmV4dCkge1xuICAgIHJldHVybiBndWFyZCh0bywgZnJvbSwgZnVuY3Rpb24gKGNiKSB7XG4gICAgICBuZXh0KGNiKTtcbiAgICAgIGlmICh0eXBlb2YgY2IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY2JzLnB1c2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgIC8vICM3NTBcbiAgICAgICAgICAvLyBpZiBhIHJvdXRlci12aWV3IGlzIHdyYXBwZWQgd2l0aCBhbiBvdXQtaW4gdHJhbnNpdGlvbixcbiAgICAgICAgICAvLyB0aGUgaW5zdGFuY2UgbWF5IG5vdCBoYXZlIGJlZW4gcmVnaXN0ZXJlZCBhdCB0aGlzIHRpbWUuXG4gICAgICAgICAgLy8gd2Ugd2lsbCBuZWVkIHRvIHBvbGwgZm9yIHJlZ2lzdHJhdGlvbiB1bnRpbCBjdXJyZW50IHJvdXRlXG4gICAgICAgICAgLy8gaXMgbm8gbG9uZ2VyIHZhbGlkLlxuICAgICAgICAgIHBvbGwoY2IsIG1hdGNoLmluc3RhbmNlcywga2V5LCBpc1ZhbGlkKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBwb2xsIChcbiAgY2IsIC8vIHNvbWVob3cgZmxvdyBjYW5ub3QgaW5mZXIgdGhpcyBpcyBhIGZ1bmN0aW9uXG4gIGluc3RhbmNlcyxcbiAga2V5LFxuICBpc1ZhbGlkXG4pIHtcbiAgaWYgKGluc3RhbmNlc1trZXldKSB7XG4gICAgY2IoaW5zdGFuY2VzW2tleV0pO1xuICB9IGVsc2UgaWYgKGlzVmFsaWQoKSkge1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgcG9sbChjYiwgaW5zdGFuY2VzLCBrZXksIGlzVmFsaWQpO1xuICAgIH0sIDE2KTtcbiAgfVxufVxuXG4vKiAgKi9cblxuXG52YXIgSFRNTDVIaXN0b3J5ID0gKGZ1bmN0aW9uIChIaXN0b3J5JCQxKSB7XG4gIGZ1bmN0aW9uIEhUTUw1SGlzdG9yeSAocm91dGVyLCBiYXNlKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICBIaXN0b3J5JCQxLmNhbGwodGhpcywgcm91dGVyLCBiYXNlKTtcblxuICAgIHZhciBleHBlY3RTY3JvbGwgPSByb3V0ZXIub3B0aW9ucy5zY3JvbGxCZWhhdmlvcjtcblxuICAgIGlmIChleHBlY3RTY3JvbGwpIHtcbiAgICAgIHNldHVwU2Nyb2xsKCk7XG4gICAgfVxuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBjdXJyZW50ID0gdGhpcyQxLmN1cnJlbnQ7XG4gICAgICB0aGlzJDEudHJhbnNpdGlvblRvKGdldExvY2F0aW9uKHRoaXMkMS5iYXNlKSwgZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgICAgIGlmIChleHBlY3RTY3JvbGwpIHtcbiAgICAgICAgICBoYW5kbGVTY3JvbGwocm91dGVyLCByb3V0ZSwgY3VycmVudCwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKCBIaXN0b3J5JCQxICkgSFRNTDVIaXN0b3J5Ll9fcHJvdG9fXyA9IEhpc3RvcnkkJDE7XG4gIEhUTUw1SGlzdG9yeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBIaXN0b3J5JCQxICYmIEhpc3RvcnkkJDEucHJvdG90eXBlICk7XG4gIEhUTUw1SGlzdG9yeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBIVE1MNUhpc3Rvcnk7XG5cbiAgSFRNTDVIaXN0b3J5LnByb3RvdHlwZS5nbyA9IGZ1bmN0aW9uIGdvIChuKSB7XG4gICAgd2luZG93Lmhpc3RvcnkuZ28obik7XG4gIH07XG5cbiAgSFRNTDVIaXN0b3J5LnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gcHVzaCAobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciByZWYgPSB0aGlzO1xuICAgIHZhciBmcm9tUm91dGUgPSByZWYuY3VycmVudDtcbiAgICB0aGlzLnRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgICBwdXNoU3RhdGUoY2xlYW5QYXRoKHRoaXMkMS5iYXNlICsgcm91dGUuZnVsbFBhdGgpKTtcbiAgICAgIGhhbmRsZVNjcm9sbCh0aGlzJDEucm91dGVyLCByb3V0ZSwgZnJvbVJvdXRlLCBmYWxzZSk7XG4gICAgICBvbkNvbXBsZXRlICYmIG9uQ29tcGxldGUocm91dGUpO1xuICAgIH0sIG9uQWJvcnQpO1xuICB9O1xuXG4gIEhUTUw1SGlzdG9yeS5wcm90b3R5cGUucmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UgKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgcmVmID0gdGhpcztcbiAgICB2YXIgZnJvbVJvdXRlID0gcmVmLmN1cnJlbnQ7XG4gICAgdGhpcy50cmFuc2l0aW9uVG8obG9jYXRpb24sIGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgICAgcmVwbGFjZVN0YXRlKGNsZWFuUGF0aCh0aGlzJDEuYmFzZSArIHJvdXRlLmZ1bGxQYXRoKSk7XG4gICAgICBoYW5kbGVTY3JvbGwodGhpcyQxLnJvdXRlciwgcm91dGUsIGZyb21Sb3V0ZSwgZmFsc2UpO1xuICAgICAgb25Db21wbGV0ZSAmJiBvbkNvbXBsZXRlKHJvdXRlKTtcbiAgICB9LCBvbkFib3J0KTtcbiAgfTtcblxuICBIVE1MNUhpc3RvcnkucHJvdG90eXBlLmVuc3VyZVVSTCA9IGZ1bmN0aW9uIGVuc3VyZVVSTCAocHVzaCkge1xuICAgIGlmIChnZXRMb2NhdGlvbih0aGlzLmJhc2UpICE9PSB0aGlzLmN1cnJlbnQuZnVsbFBhdGgpIHtcbiAgICAgIHZhciBjdXJyZW50ID0gY2xlYW5QYXRoKHRoaXMuYmFzZSArIHRoaXMuY3VycmVudC5mdWxsUGF0aCk7XG4gICAgICBwdXNoID8gcHVzaFN0YXRlKGN1cnJlbnQpIDogcmVwbGFjZVN0YXRlKGN1cnJlbnQpO1xuICAgIH1cbiAgfTtcblxuICBIVE1MNUhpc3RvcnkucHJvdG90eXBlLmdldEN1cnJlbnRMb2NhdGlvbiA9IGZ1bmN0aW9uIGdldEN1cnJlbnRMb2NhdGlvbiAoKSB7XG4gICAgcmV0dXJuIGdldExvY2F0aW9uKHRoaXMuYmFzZSlcbiAgfTtcblxuICByZXR1cm4gSFRNTDVIaXN0b3J5O1xufShIaXN0b3J5KSk7XG5cbmZ1bmN0aW9uIGdldExvY2F0aW9uIChiYXNlKSB7XG4gIHZhciBwYXRoID0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lO1xuICBpZiAoYmFzZSAmJiBwYXRoLmluZGV4T2YoYmFzZSkgPT09IDApIHtcbiAgICBwYXRoID0gcGF0aC5zbGljZShiYXNlLmxlbmd0aCk7XG4gIH1cbiAgcmV0dXJuIChwYXRoIHx8ICcvJykgKyB3aW5kb3cubG9jYXRpb24uc2VhcmNoICsgd2luZG93LmxvY2F0aW9uLmhhc2hcbn1cblxuLyogICovXG5cblxudmFyIEhhc2hIaXN0b3J5ID0gKGZ1bmN0aW9uIChIaXN0b3J5JCQxKSB7XG4gIGZ1bmN0aW9uIEhhc2hIaXN0b3J5IChyb3V0ZXIsIGJhc2UsIGZhbGxiYWNrKSB7XG4gICAgSGlzdG9yeSQkMS5jYWxsKHRoaXMsIHJvdXRlciwgYmFzZSk7XG4gICAgLy8gY2hlY2sgaGlzdG9yeSBmYWxsYmFjayBkZWVwbGlua2luZ1xuICAgIGlmIChmYWxsYmFjayAmJiBjaGVja0ZhbGxiYWNrKHRoaXMuYmFzZSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBlbnN1cmVTbGFzaCgpO1xuICB9XG5cbiAgaWYgKCBIaXN0b3J5JCQxICkgSGFzaEhpc3RvcnkuX19wcm90b19fID0gSGlzdG9yeSQkMTtcbiAgSGFzaEhpc3RvcnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggSGlzdG9yeSQkMSAmJiBIaXN0b3J5JCQxLnByb3RvdHlwZSApO1xuICBIYXNoSGlzdG9yeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBIYXNoSGlzdG9yeTtcblxuICAvLyB0aGlzIGlzIGRlbGF5ZWQgdW50aWwgdGhlIGFwcCBtb3VudHNcbiAgLy8gdG8gYXZvaWQgdGhlIGhhc2hjaGFuZ2UgbGlzdGVuZXIgYmVpbmcgZmlyZWQgdG9vIGVhcmx5XG4gIEhhc2hIaXN0b3J5LnByb3RvdHlwZS5zZXR1cExpc3RlbmVycyA9IGZ1bmN0aW9uIHNldHVwTGlzdGVuZXJzICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdoYXNoY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFlbnN1cmVTbGFzaCgpKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgdGhpcyQxLnRyYW5zaXRpb25UbyhnZXRIYXNoKCksIGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgICAgICByZXBsYWNlSGFzaChyb3V0ZS5mdWxsUGF0aCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBIYXNoSGlzdG9yeS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIHB1c2ggKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7XG4gICAgdGhpcy50cmFuc2l0aW9uVG8obG9jYXRpb24sIGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgICAgcHVzaEhhc2gocm91dGUuZnVsbFBhdGgpO1xuICAgICAgb25Db21wbGV0ZSAmJiBvbkNvbXBsZXRlKHJvdXRlKTtcbiAgICB9LCBvbkFib3J0KTtcbiAgfTtcblxuICBIYXNoSGlzdG9yeS5wcm90b3R5cGUucmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UgKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7XG4gICAgdGhpcy50cmFuc2l0aW9uVG8obG9jYXRpb24sIGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgICAgcmVwbGFjZUhhc2gocm91dGUuZnVsbFBhdGgpO1xuICAgICAgb25Db21wbGV0ZSAmJiBvbkNvbXBsZXRlKHJvdXRlKTtcbiAgICB9LCBvbkFib3J0KTtcbiAgfTtcblxuICBIYXNoSGlzdG9yeS5wcm90b3R5cGUuZ28gPSBmdW5jdGlvbiBnbyAobikge1xuICAgIHdpbmRvdy5oaXN0b3J5LmdvKG4pO1xuICB9O1xuXG4gIEhhc2hIaXN0b3J5LnByb3RvdHlwZS5lbnN1cmVVUkwgPSBmdW5jdGlvbiBlbnN1cmVVUkwgKHB1c2gpIHtcbiAgICB2YXIgY3VycmVudCA9IHRoaXMuY3VycmVudC5mdWxsUGF0aDtcbiAgICBpZiAoZ2V0SGFzaCgpICE9PSBjdXJyZW50KSB7XG4gICAgICBwdXNoID8gcHVzaEhhc2goY3VycmVudCkgOiByZXBsYWNlSGFzaChjdXJyZW50KTtcbiAgICB9XG4gIH07XG5cbiAgSGFzaEhpc3RvcnkucHJvdG90eXBlLmdldEN1cnJlbnRMb2NhdGlvbiA9IGZ1bmN0aW9uIGdldEN1cnJlbnRMb2NhdGlvbiAoKSB7XG4gICAgcmV0dXJuIGdldEhhc2goKVxuICB9O1xuXG4gIHJldHVybiBIYXNoSGlzdG9yeTtcbn0oSGlzdG9yeSkpO1xuXG5mdW5jdGlvbiBjaGVja0ZhbGxiYWNrIChiYXNlKSB7XG4gIHZhciBsb2NhdGlvbiA9IGdldExvY2F0aW9uKGJhc2UpO1xuICBpZiAoIS9eXFwvIy8udGVzdChsb2NhdGlvbikpIHtcbiAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShcbiAgICAgIGNsZWFuUGF0aChiYXNlICsgJy8jJyArIGxvY2F0aW9uKVxuICAgICk7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxufVxuXG5mdW5jdGlvbiBlbnN1cmVTbGFzaCAoKSB7XG4gIHZhciBwYXRoID0gZ2V0SGFzaCgpO1xuICBpZiAocGF0aC5jaGFyQXQoMCkgPT09ICcvJykge1xuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgcmVwbGFjZUhhc2goJy8nICsgcGF0aCk7XG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBnZXRIYXNoICgpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHdpbmRvdy5sb2NhdGlvbi5oYXNoIGhlcmUgYmVjYXVzZSBpdCdzIG5vdFxuICAvLyBjb25zaXN0ZW50IGFjcm9zcyBicm93c2VycyAtIEZpcmVmb3ggd2lsbCBwcmUtZGVjb2RlIGl0IVxuICB2YXIgaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICB2YXIgaW5kZXggPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGluZGV4ID09PSAtMSA/ICcnIDogaHJlZi5zbGljZShpbmRleCArIDEpXG59XG5cbmZ1bmN0aW9uIHB1c2hIYXNoIChwYXRoKSB7XG4gIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gcGF0aDtcbn1cblxuZnVuY3Rpb24gcmVwbGFjZUhhc2ggKHBhdGgpIHtcbiAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgdmFyIGkgPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgdmFyIGJhc2UgPSBpID49IDAgPyBocmVmLnNsaWNlKDAsIGkpIDogaHJlZjtcbiAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoKGJhc2UgKyBcIiNcIiArIHBhdGgpKTtcbn1cblxuLyogICovXG5cblxudmFyIEFic3RyYWN0SGlzdG9yeSA9IChmdW5jdGlvbiAoSGlzdG9yeSQkMSkge1xuICBmdW5jdGlvbiBBYnN0cmFjdEhpc3RvcnkgKHJvdXRlciwgYmFzZSkge1xuICAgIEhpc3RvcnkkJDEuY2FsbCh0aGlzLCByb3V0ZXIsIGJhc2UpO1xuICAgIHRoaXMuc3RhY2sgPSBbXTtcbiAgICB0aGlzLmluZGV4ID0gLTE7XG4gIH1cblxuICBpZiAoIEhpc3RvcnkkJDEgKSBBYnN0cmFjdEhpc3RvcnkuX19wcm90b19fID0gSGlzdG9yeSQkMTtcbiAgQWJzdHJhY3RIaXN0b3J5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEhpc3RvcnkkJDEgJiYgSGlzdG9yeSQkMS5wcm90b3R5cGUgKTtcbiAgQWJzdHJhY3RIaXN0b3J5LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEFic3RyYWN0SGlzdG9yeTtcblxuICBBYnN0cmFjdEhpc3RvcnkucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiBwdXNoIChsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdGhpcy50cmFuc2l0aW9uVG8obG9jYXRpb24sIGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgICAgdGhpcyQxLnN0YWNrID0gdGhpcyQxLnN0YWNrLnNsaWNlKDAsIHRoaXMkMS5pbmRleCArIDEpLmNvbmNhdChyb3V0ZSk7XG4gICAgICB0aGlzJDEuaW5kZXgrKztcbiAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShyb3V0ZSk7XG4gICAgfSwgb25BYm9ydCk7XG4gIH07XG5cbiAgQWJzdHJhY3RIaXN0b3J5LnByb3RvdHlwZS5yZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZSAobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHRoaXMudHJhbnNpdGlvblRvKGxvY2F0aW9uLCBmdW5jdGlvbiAocm91dGUpIHtcbiAgICAgIHRoaXMkMS5zdGFjayA9IHRoaXMkMS5zdGFjay5zbGljZSgwLCB0aGlzJDEuaW5kZXgpLmNvbmNhdChyb3V0ZSk7XG4gICAgICBvbkNvbXBsZXRlICYmIG9uQ29tcGxldGUocm91dGUpO1xuICAgIH0sIG9uQWJvcnQpO1xuICB9O1xuXG4gIEFic3RyYWN0SGlzdG9yeS5wcm90b3R5cGUuZ28gPSBmdW5jdGlvbiBnbyAobikge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIHRhcmdldEluZGV4ID0gdGhpcy5pbmRleCArIG47XG4gICAgaWYgKHRhcmdldEluZGV4IDwgMCB8fCB0YXJnZXRJbmRleCA+PSB0aGlzLnN0YWNrLmxlbmd0aCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHZhciByb3V0ZSA9IHRoaXMuc3RhY2tbdGFyZ2V0SW5kZXhdO1xuICAgIHRoaXMuY29uZmlybVRyYW5zaXRpb24ocm91dGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMkMS5pbmRleCA9IHRhcmdldEluZGV4O1xuICAgICAgdGhpcyQxLnVwZGF0ZVJvdXRlKHJvdXRlKTtcbiAgICB9KTtcbiAgfTtcblxuICBBYnN0cmFjdEhpc3RvcnkucHJvdG90eXBlLmdldEN1cnJlbnRMb2NhdGlvbiA9IGZ1bmN0aW9uIGdldEN1cnJlbnRMb2NhdGlvbiAoKSB7XG4gICAgdmFyIGN1cnJlbnQgPSB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV07XG4gICAgcmV0dXJuIGN1cnJlbnQgPyBjdXJyZW50LmZ1bGxQYXRoIDogJy8nXG4gIH07XG5cbiAgQWJzdHJhY3RIaXN0b3J5LnByb3RvdHlwZS5lbnN1cmVVUkwgPSBmdW5jdGlvbiBlbnN1cmVVUkwgKCkge1xuICAgIC8vIG5vb3BcbiAgfTtcblxuICByZXR1cm4gQWJzdHJhY3RIaXN0b3J5O1xufShIaXN0b3J5KSk7XG5cbi8qICAqL1xuXG52YXIgVnVlUm91dGVyID0gZnVuY3Rpb24gVnVlUm91dGVyIChvcHRpb25zKSB7XG4gIGlmICggb3B0aW9ucyA9PT0gdm9pZCAwICkgb3B0aW9ucyA9IHt9O1xuXG4gIHRoaXMuYXBwID0gbnVsbDtcbiAgdGhpcy5hcHBzID0gW107XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIHRoaXMuYmVmb3JlSG9va3MgPSBbXTtcbiAgdGhpcy5yZXNvbHZlSG9va3MgPSBbXTtcbiAgdGhpcy5hZnRlckhvb2tzID0gW107XG4gIHRoaXMubWF0Y2hlciA9IGNyZWF0ZU1hdGNoZXIob3B0aW9ucy5yb3V0ZXMgfHwgW10sIHRoaXMpO1xuXG4gIHZhciBtb2RlID0gb3B0aW9ucy5tb2RlIHx8ICdoYXNoJztcbiAgdGhpcy5mYWxsYmFjayA9IG1vZGUgPT09ICdoaXN0b3J5JyAmJiAhc3VwcG9ydHNQdXNoU3RhdGUgJiYgb3B0aW9ucy5mYWxsYmFjayAhPT0gZmFsc2U7XG4gIGlmICh0aGlzLmZhbGxiYWNrKSB7XG4gICAgbW9kZSA9ICdoYXNoJztcbiAgfVxuICBpZiAoIWluQnJvd3Nlcikge1xuICAgIG1vZGUgPSAnYWJzdHJhY3QnO1xuICB9XG4gIHRoaXMubW9kZSA9IG1vZGU7XG5cbiAgc3dpdGNoIChtb2RlKSB7XG4gICAgY2FzZSAnaGlzdG9yeSc6XG4gICAgICB0aGlzLmhpc3RvcnkgPSBuZXcgSFRNTDVIaXN0b3J5KHRoaXMsIG9wdGlvbnMuYmFzZSk7XG4gICAgICBicmVha1xuICAgIGNhc2UgJ2hhc2gnOlxuICAgICAgdGhpcy5oaXN0b3J5ID0gbmV3IEhhc2hIaXN0b3J5KHRoaXMsIG9wdGlvbnMuYmFzZSwgdGhpcy5mYWxsYmFjayk7XG4gICAgICBicmVha1xuICAgIGNhc2UgJ2Fic3RyYWN0JzpcbiAgICAgIHRoaXMuaGlzdG9yeSA9IG5ldyBBYnN0cmFjdEhpc3RvcnkodGhpcywgb3B0aW9ucy5iYXNlKTtcbiAgICAgIGJyZWFrXG4gICAgZGVmYXVsdDpcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGFzc2VydChmYWxzZSwgKFwiaW52YWxpZCBtb2RlOiBcIiArIG1vZGUpKTtcbiAgICAgIH1cbiAgfVxufTtcblxudmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsgY3VycmVudFJvdXRlOiB7fSB9O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLm1hdGNoID0gZnVuY3Rpb24gbWF0Y2ggKFxuICByYXcsXG4gIGN1cnJlbnQsXG4gIHJlZGlyZWN0ZWRGcm9tXG4pIHtcbiAgcmV0dXJuIHRoaXMubWF0Y2hlci5tYXRjaChyYXcsIGN1cnJlbnQsIHJlZGlyZWN0ZWRGcm9tKVxufTtcblxucHJvdG90eXBlQWNjZXNzb3JzLmN1cnJlbnRSb3V0ZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmhpc3RvcnkgJiYgdGhpcy5oaXN0b3J5LmN1cnJlbnRcbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIGluaXQgKGFwcCAvKiBWdWUgY29tcG9uZW50IGluc3RhbmNlICovKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBhc3NlcnQoXG4gICAgaW5zdGFsbC5pbnN0YWxsZWQsXG4gICAgXCJub3QgaW5zdGFsbGVkLiBNYWtlIHN1cmUgdG8gY2FsbCBgVnVlLnVzZShWdWVSb3V0ZXIpYCBcIiArXG4gICAgXCJiZWZvcmUgY3JlYXRpbmcgcm9vdCBpbnN0YW5jZS5cIlxuICApO1xuXG4gIHRoaXMuYXBwcy5wdXNoKGFwcCk7XG5cbiAgLy8gbWFpbiBhcHAgYWxyZWFkeSBpbml0aWFsaXplZC5cbiAgaWYgKHRoaXMuYXBwKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB0aGlzLmFwcCA9IGFwcDtcblxuICB2YXIgaGlzdG9yeSA9IHRoaXMuaGlzdG9yeTtcblxuICBpZiAoaGlzdG9yeSBpbnN0YW5jZW9mIEhUTUw1SGlzdG9yeSkge1xuICAgIGhpc3RvcnkudHJhbnNpdGlvblRvKGhpc3RvcnkuZ2V0Q3VycmVudExvY2F0aW9uKCkpO1xuICB9IGVsc2UgaWYgKGhpc3RvcnkgaW5zdGFuY2VvZiBIYXNoSGlzdG9yeSkge1xuICAgIHZhciBzZXR1cEhhc2hMaXN0ZW5lciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGhpc3Rvcnkuc2V0dXBMaXN0ZW5lcnMoKTtcbiAgICB9O1xuICAgIGhpc3RvcnkudHJhbnNpdGlvblRvKFxuICAgICAgaGlzdG9yeS5nZXRDdXJyZW50TG9jYXRpb24oKSxcbiAgICAgIHNldHVwSGFzaExpc3RlbmVyLFxuICAgICAgc2V0dXBIYXNoTGlzdGVuZXJcbiAgICApO1xuICB9XG5cbiAgaGlzdG9yeS5saXN0ZW4oZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgdGhpcyQxLmFwcHMuZm9yRWFjaChmdW5jdGlvbiAoYXBwKSB7XG4gICAgICBhcHAuX3JvdXRlID0gcm91dGU7XG4gICAgfSk7XG4gIH0pO1xufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5iZWZvcmVFYWNoID0gZnVuY3Rpb24gYmVmb3JlRWFjaCAoZm4pIHtcbiAgcmV0dXJuIHJlZ2lzdGVySG9vayh0aGlzLmJlZm9yZUhvb2tzLCBmbilcbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUuYmVmb3JlUmVzb2x2ZSA9IGZ1bmN0aW9uIGJlZm9yZVJlc29sdmUgKGZuKSB7XG4gIHJldHVybiByZWdpc3Rlckhvb2sodGhpcy5yZXNvbHZlSG9va3MsIGZuKVxufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5hZnRlckVhY2ggPSBmdW5jdGlvbiBhZnRlckVhY2ggKGZuKSB7XG4gIHJldHVybiByZWdpc3Rlckhvb2sodGhpcy5hZnRlckhvb2tzLCBmbilcbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUub25SZWFkeSA9IGZ1bmN0aW9uIG9uUmVhZHkgKGNiLCBlcnJvckNiKSB7XG4gIHRoaXMuaGlzdG9yeS5vblJlYWR5KGNiLCBlcnJvckNiKTtcbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUub25FcnJvciA9IGZ1bmN0aW9uIG9uRXJyb3IgKGVycm9yQ2IpIHtcbiAgdGhpcy5oaXN0b3J5Lm9uRXJyb3IoZXJyb3JDYik7XG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiBwdXNoIChsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCkge1xuICB0aGlzLmhpc3RvcnkucHVzaChsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCk7XG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLnJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlIChsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCkge1xuICB0aGlzLmhpc3RvcnkucmVwbGFjZShsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCk7XG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLmdvID0gZnVuY3Rpb24gZ28gKG4pIHtcbiAgdGhpcy5oaXN0b3J5LmdvKG4pO1xufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5iYWNrID0gZnVuY3Rpb24gYmFjayAoKSB7XG4gIHRoaXMuZ28oLTEpO1xufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5mb3J3YXJkID0gZnVuY3Rpb24gZm9yd2FyZCAoKSB7XG4gIHRoaXMuZ28oMSk7XG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLmdldE1hdGNoZWRDb21wb25lbnRzID0gZnVuY3Rpb24gZ2V0TWF0Y2hlZENvbXBvbmVudHMgKHRvKSB7XG4gIHZhciByb3V0ZSA9IHRvXG4gICAgPyB0by5tYXRjaGVkXG4gICAgICA/IHRvXG4gICAgICA6IHRoaXMucmVzb2x2ZSh0bykucm91dGVcbiAgICA6IHRoaXMuY3VycmVudFJvdXRlO1xuICBpZiAoIXJvdXRlKSB7XG4gICAgcmV0dXJuIFtdXG4gIH1cbiAgcmV0dXJuIFtdLmNvbmNhdC5hcHBseShbXSwgcm91dGUubWF0Y2hlZC5tYXAoZnVuY3Rpb24gKG0pIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMobS5jb21wb25lbnRzKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuIG0uY29tcG9uZW50c1trZXldXG4gICAgfSlcbiAgfSkpXG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLnJlc29sdmUgPSBmdW5jdGlvbiByZXNvbHZlIChcbiAgdG8sXG4gIGN1cnJlbnQsXG4gIGFwcGVuZFxuKSB7XG4gIHZhciBsb2NhdGlvbiA9IG5vcm1hbGl6ZUxvY2F0aW9uKFxuICAgIHRvLFxuICAgIGN1cnJlbnQgfHwgdGhpcy5oaXN0b3J5LmN1cnJlbnQsXG4gICAgYXBwZW5kLFxuICAgIHRoaXNcbiAgKTtcbiAgdmFyIHJvdXRlID0gdGhpcy5tYXRjaChsb2NhdGlvbiwgY3VycmVudCk7XG4gIHZhciBmdWxsUGF0aCA9IHJvdXRlLnJlZGlyZWN0ZWRGcm9tIHx8IHJvdXRlLmZ1bGxQYXRoO1xuICB2YXIgYmFzZSA9IHRoaXMuaGlzdG9yeS5iYXNlO1xuICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYoYmFzZSwgZnVsbFBhdGgsIHRoaXMubW9kZSk7XG4gIHJldHVybiB7XG4gICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgIHJvdXRlOiByb3V0ZSxcbiAgICBocmVmOiBocmVmLFxuICAgIC8vIGZvciBiYWNrd2FyZHMgY29tcGF0XG4gICAgbm9ybWFsaXplZFRvOiBsb2NhdGlvbixcbiAgICByZXNvbHZlZDogcm91dGVcbiAgfVxufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5hZGRSb3V0ZXMgPSBmdW5jdGlvbiBhZGRSb3V0ZXMgKHJvdXRlcykge1xuICB0aGlzLm1hdGNoZXIuYWRkUm91dGVzKHJvdXRlcyk7XG4gIGlmICh0aGlzLmhpc3RvcnkuY3VycmVudCAhPT0gU1RBUlQpIHtcbiAgICB0aGlzLmhpc3RvcnkudHJhbnNpdGlvblRvKHRoaXMuaGlzdG9yeS5nZXRDdXJyZW50TG9jYXRpb24oKSk7XG4gIH1cbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBWdWVSb3V0ZXIucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMgKTtcblxuZnVuY3Rpb24gcmVnaXN0ZXJIb29rIChsaXN0LCBmbikge1xuICBsaXN0LnB1c2goZm4pO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpID0gbGlzdC5pbmRleE9mKGZuKTtcbiAgICBpZiAoaSA+IC0xKSB7IGxpc3Quc3BsaWNlKGksIDEpOyB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlSHJlZiAoYmFzZSwgZnVsbFBhdGgsIG1vZGUpIHtcbiAgdmFyIHBhdGggPSBtb2RlID09PSAnaGFzaCcgPyAnIycgKyBmdWxsUGF0aCA6IGZ1bGxQYXRoO1xuICByZXR1cm4gYmFzZSA/IGNsZWFuUGF0aChiYXNlICsgJy8nICsgcGF0aCkgOiBwYXRoXG59XG5cblZ1ZVJvdXRlci5pbnN0YWxsID0gaW5zdGFsbDtcblZ1ZVJvdXRlci52ZXJzaW9uID0gJzIuNy4wJztcblxuaWYgKGluQnJvd3NlciAmJiB3aW5kb3cuVnVlKSB7XG4gIHdpbmRvdy5WdWUudXNlKFZ1ZVJvdXRlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVnVlUm91dGVyO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L3Z1ZS1yb3V0ZXIvZGlzdC92dWUtcm91dGVyLmNvbW1vbi5qc1xuLy8gbW9kdWxlIGlkID0gM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 4 */
/***/ (function(module, exports) {

	eval("\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n/**\r\n * Created by Leon.Revill on 06/09/2017.\r\n */\nvar __style__ = Symbol();\n\nvar Img2 = exports.Img2 = function (_HTMLElement) {\n    _inherits(Img2, _HTMLElement);\n\n    function Img2() {\n        _classCallCheck(this, Img2);\n\n        var _this = _possibleConstructorReturn(this, (Img2.__proto__ || Object.getPrototypeOf(Img2)).call(this));\n\n        _this._$img = null;\n        _this._$preview = null;\n        _this._preview = null;\n        _this._src = null;\n        _this._width = null;\n        _this._height = null;\n        _this._rendered = false;\n        _this._loading = false;\n        _this._loaded = false;\n        _this._preloading = false;\n        _this._preloaded = false;\n        _this._srcReady = false;\n\n        _this._preload = _this._preload.bind(_this);\n        _this._onImgLoad = _this._onImgLoad.bind(_this);\n        return _this;\n    }\n\n    _createClass(Img2, [{\n        key: __style__,\n        value: function value() {\n            return \"\\n            <style>\\n                :host {\\n                    position: relative;\\n                    overflow: hidden;\\n                    display: inline-block;\\n                    outline: none;\\n                }\\n                img {\\n                    position: absolute;\\n                }\\n                img.img2-src {\\n                    z-index: 1;\\n                }\\n                img.img2-preview {\\n                    z-index: 2;\\n                    filter: blur(2vw);\\n                    transform: scale(1.1);\\n                    width: 100%;\\n                    height: 100%;\\n                    top: 0;\\n                    left: 0;\\n                }\\n            </style>\\n        \";\n        }\n    }, {\n        key: \"connectedCallback\",\n        value: function connectedCallback() {\n            var _this2 = this;\n\n            // Check to see if we have a src, if not return and do nothing else\n            this._src = this.getAttribute(\"src\");\n            // Grab the initial attribute values\n            this._preview = this.getAttribute(\"src-preview\");\n            this._width = this.getAttribute(\"width\");\n            this._height = this.getAttribute(\"height\");\n\n            if (!this._src || !this._width || !this._height) return;\n\n            // Set the height and width of the element so that we can figure out if it is on the screen or not\n            this.style.width = this._width + \"px\";\n            this.style.height = this._height + \"px\";\n\n            // Figure out if this image is within view\n            Img2.addIntersectListener(this, function () {\n                Img2._removePreloadListener(_this2._preload);\n                _this2._render();\n                _this2._$preview.src = _this2._preview;\n                _this2._load();\n                Img2.removeIntersectListener(_this2);\n            });\n\n            // Listen for preload instruction\n            Img2._addPreloadListener(this._preload);\n        }\n    }, {\n        key: \"_load\",\n        value: function _load() {\n            if (this._preloaded === false) Img2._priorityCount += 1;\n            this._$img.onload = this._onImgLoad;\n            this._loading = true;\n            this._$img.src = this._src;\n        }\n    }, {\n        key: \"_onImgLoad\",\n        value: function _onImgLoad() {\n            this._loading = false;\n            this._loaded = true;\n            this.shadowRoot.removeChild(this._$preview);\n            this._$img.onload = null;\n            if (this._preloaded === false) Img2._priorityCount -= 1;\n        }\n    }, {\n        key: \"_onImgPreload\",\n        value: function _onImgPreload() {\n            this._preloading = false;\n            this._preloaded = true;\n            this._load();\n        }\n    }, {\n        key: \"attributeChangedCallback\",\n        value: function attributeChangedCallback(name) {\n            switch (name) {\n                case \"src\":\n                    break;\n                case \"src-preview\":\n                    break;\n            }\n        }\n    }, {\n        key: \"_render\",\n        value: function _render() {\n\n            if (this._rendered === true) return;\n\n            // Attach the Shadow Root to the element\n            this.attachShadow({ mode: \"open\" });\n            // Create the initial template with styles\n            this.shadowRoot.innerHTML = \"\" + this[__style__]();\n            if (this._preview !== null) {\n                this._$preview = document.createElement(\"img\");\n                this._$preview.classList.add(\"img2-preview\");\n                this.shadowRoot.appendChild(this._$preview);\n            }\n            // Create the actual image element to be used to display the image\n            this._$img = document.createElement(\"img\");\n            this._$img.classList.add(\"img2-src\");\n            // Add the image to the Shadow Root\n            this.shadowRoot.appendChild(this._$img);\n\n            // If some dimensions have been specified then add them to the image element\n            this._$img.width = this._width;\n            this._$img.height = this._height;\n            this._$preview.width = this._width;\n            this._$preview.height = this._height;\n\n            this._rendered = true;\n        }\n    }, {\n        key: \"_preload\",\n        value: function _preload() {\n            this._preloading = true;\n            console.log(\"START PRELOAD:\", this);\n        }\n    }], [{\n        key: \"_addPreloadListener\",\n        value: function _addPreloadListener(cb) {\n            Img2._preloadListeners.set(cb, null);\n        }\n    }, {\n        key: \"_removePreloadListener\",\n        value: function _removePreloadListener(cb) {\n            Img2._preloadListeners.delete(cb);\n        }\n    }, {\n        key: \"_startPreload\",\n        value: function _startPreload() {\n            var _iteratorNormalCompletion = true;\n            var _didIteratorError = false;\n            var _iteratorError = undefined;\n\n            try {\n                for (var _iterator = Img2._preloadListeners.keys()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                    var cb = _step.value;\n\n                    cb();\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally {\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return) {\n                        _iterator.return();\n                    }\n                } finally {\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n        }\n\n        /**\r\n         * Methods used to determine when currently visible (priority) elements have finished download to then inform other elements to preload\r\n         */\n\n    }, {\n        key: \"addIntersectListener\",\n        value: function addIntersectListener($element, intersectCallback) {\n            Img2._intersectListeners.set($element, intersectCallback);\n            Img2._observer.observe($element);\n        }\n    }, {\n        key: \"removeIntersectListener\",\n        value: function removeIntersectListener($element) {\n            if ($element) Img2._observer.unobserve($element);\n        }\n    }, {\n        key: \"handleIntersect\",\n        value: function handleIntersect(entries) {\n            entries.forEach(function (entry) {\n                if (entry.isIntersecting === true) {\n                    var cb = Img2._intersectListeners.get(entry.target);\n                    if (cb !== undefined) cb(entry);\n                }\n            });\n        }\n    }, {\n        key: \"observedAttributes\",\n        get: function get() {\n            return [\"src\", \"src-preview\"];\n        }\n    }, {\n        key: \"_priorityCount\",\n        get: function get() {\n            return Img2.__priorityCount;\n        },\n        set: function set(value) {\n            Img2.__priorityCount = value;\n            if (Img2.__priorityCount < 1) {\n                // Inform components that they can start to preload their images\n                // Debounce in case the user scrolls because then there will be more priority images\n                if (Img2._startPreloadDebounce !== null) {\n                    clearTimeout(Img2._startPreloadDebounce);\n                    Img2._startPreloadDebounce = null;\n                }\n                Img2._startPreloadDebounce = setTimeout(function () {\n                    if (Img2.__priorityCount < 1) Img2._startPreload();\n                }, 500);\n            }\n        }\n\n        /**\r\n         * Methods used to determine when this element is in the visible viewport\r\n         */\n\n    }]);\n\n    return Img2;\n}(HTMLElement);\n\nImg2._preloadListeners = new Map();\nImg2.__priorityCount = 0;\nImg2._startPreloadDebounce = null;\nImg2._intersectListeners = new Map();\nImg2._observer = new IntersectionObserver(Img2.handleIntersect, {\n    root: null,\n    rootMargin: \"0px\",\n    threshold: 0\n});\n\n\nwindow.customElements.define(\"img-2\", Img2);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	eval("var __vue_exports__, __vue_options__\nvar __vue_styles__ = {}\n\n/* styles */\n__webpack_require__(6)\n\n/* script */\n__vue_exports__ = __webpack_require__(10)\n\n/* template */\nvar __vue_template__ = __webpack_require__(16)\n__vue_options__ = __vue_exports__ = __vue_exports__ || {}\nif (\n  typeof __vue_exports__.default === \"object\" ||\n  typeof __vue_exports__.default === \"function\"\n) {\nif (Object.keys(__vue_exports__).some(function (key) { return key !== \"default\" && key !== \"__esModule\" })) {console.error(\"named exports are not supported in *.vue files.\")}\n__vue_options__ = __vue_exports__ = __vue_exports__.default\n}\nif (typeof __vue_options__ === \"function\") {\n  __vue_options__ = __vue_options__.options\n}\n__vue_options__.__file = \"C:\\\\Users\\\\leon\\\\Code\\\\img-2-playground\\\\src\\\\pages\\\\Search.vue\"\n__vue_options__.render = __vue_template__.render\n__vue_options__.staticRenderFns = __vue_template__.staticRenderFns\n__vue_options__._scopeId = \"data-v-bc497c84\"\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-bc497c84\", __vue_options__)\n  } else {\n    hotAPI.reload(\"data-v-bc497c84\", __vue_options__)\n  }\n})()}\nif (__vue_options__.functional) {console.error(\"[vue-loader] Search.vue: functional components are not supported and should be defined in plain js files using render functions.\")}\n\nmodule.exports = __vue_exports__\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvU2VhcmNoLnZ1ZT84M2QwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELG1EQUFtRCxJQUFJO0FBQzdHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFlBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsQ0FBQztBQUNELGlDQUFpQzs7QUFFakMiLCJmaWxlIjoiNS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBfX3Z1ZV9leHBvcnRzX18sIF9fdnVlX29wdGlvbnNfX1xudmFyIF9fdnVlX3N0eWxlc19fID0ge31cblxuLyogc3R5bGVzICovXG5yZXF1aXJlKFwiISF2dWUtc3R5bGUtbG9hZGVyIWNzcy1sb2FkZXI/c291cmNlTWFwIXZ1ZS1sb2FkZXIvbGliL3N0eWxlLXJld3JpdGVyP2lkPWRhdGEtdi1iYzQ5N2M4NCZzY29wZWQ9dHJ1ZSF2dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXN0eWxlcyZpbmRleD0wIS4vU2VhcmNoLnZ1ZVwiKVxuXG4vKiBzY3JpcHQgKi9cbl9fdnVlX2V4cG9ydHNfXyA9IHJlcXVpcmUoXCIhIWJhYmVsLWxvYWRlciF2dWUtbG9hZGVyL2xpYi9zZWxlY3Rvcj90eXBlPXNjcmlwdCZpbmRleD0wIS4vU2VhcmNoLnZ1ZVwiKVxuXG4vKiB0ZW1wbGF0ZSAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlcj9pZD1kYXRhLXYtYmM0OTdjODQhdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vU2VhcmNoLnZ1ZVwiKVxuX192dWVfb3B0aW9uc19fID0gX192dWVfZXhwb3J0c19fID0gX192dWVfZXhwb3J0c19fIHx8IHt9XG5pZiAoXG4gIHR5cGVvZiBfX3Z1ZV9leHBvcnRzX18uZGVmYXVsdCA9PT0gXCJvYmplY3RcIiB8fFxuICB0eXBlb2YgX192dWVfZXhwb3J0c19fLmRlZmF1bHQgPT09IFwiZnVuY3Rpb25cIlxuKSB7XG5pZiAoT2JqZWN0LmtleXMoX192dWVfZXhwb3J0c19fKS5zb21lKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGtleSAhPT0gXCJkZWZhdWx0XCIgJiYga2V5ICE9PSBcIl9fZXNNb2R1bGVcIiB9KSkge2NvbnNvbGUuZXJyb3IoXCJuYW1lZCBleHBvcnRzIGFyZSBub3Qgc3VwcG9ydGVkIGluICoudnVlIGZpbGVzLlwiKX1cbl9fdnVlX29wdGlvbnNfXyA9IF9fdnVlX2V4cG9ydHNfXyA9IF9fdnVlX2V4cG9ydHNfXy5kZWZhdWx0XG59XG5pZiAodHlwZW9mIF9fdnVlX29wdGlvbnNfXyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gIF9fdnVlX29wdGlvbnNfXyA9IF9fdnVlX29wdGlvbnNfXy5vcHRpb25zXG59XG5fX3Z1ZV9vcHRpb25zX18uX19maWxlID0gXCJDOlxcXFxVc2Vyc1xcXFxsZW9uXFxcXENvZGVcXFxcaW1nLTItcGxheWdyb3VuZFxcXFxzcmNcXFxccGFnZXNcXFxcU2VhcmNoLnZ1ZVwiXG5fX3Z1ZV9vcHRpb25zX18ucmVuZGVyID0gX192dWVfdGVtcGxhdGVfXy5yZW5kZXJcbl9fdnVlX29wdGlvbnNfXy5zdGF0aWNSZW5kZXJGbnMgPSBfX3Z1ZV90ZW1wbGF0ZV9fLnN0YXRpY1JlbmRlckZuc1xuX192dWVfb3B0aW9uc19fLl9zY29wZUlkID0gXCJkYXRhLXYtYmM0OTdjODRcIlxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkgeyhmdW5jdGlvbiAoKSB7XG4gIHZhciBob3RBUEkgPSByZXF1aXJlKFwidnVlLWhvdC1yZWxvYWQtYXBpXCIpXG4gIGhvdEFQSS5pbnN0YWxsKHJlcXVpcmUoXCJ2dWVcIiksIGZhbHNlKVxuICBpZiAoIWhvdEFQSS5jb21wYXRpYmxlKSByZXR1cm5cbiAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICBpZiAoIW1vZHVsZS5ob3QuZGF0YSkge1xuICAgIGhvdEFQSS5jcmVhdGVSZWNvcmQoXCJkYXRhLXYtYmM0OTdjODRcIiwgX192dWVfb3B0aW9uc19fKVxuICB9IGVsc2Uge1xuICAgIGhvdEFQSS5yZWxvYWQoXCJkYXRhLXYtYmM0OTdjODRcIiwgX192dWVfb3B0aW9uc19fKVxuICB9XG59KSgpfVxuaWYgKF9fdnVlX29wdGlvbnNfXy5mdW5jdGlvbmFsKSB7Y29uc29sZS5lcnJvcihcIlt2dWUtbG9hZGVyXSBTZWFyY2gudnVlOiBmdW5jdGlvbmFsIGNvbXBvbmVudHMgYXJlIG5vdCBzdXBwb3J0ZWQgYW5kIHNob3VsZCBiZSBkZWZpbmVkIGluIHBsYWluIGpzIGZpbGVzIHVzaW5nIHJlbmRlciBmdW5jdGlvbnMuXCIpfVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9fdnVlX2V4cG9ydHNfX1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvcGFnZXMvU2VhcmNoLnZ1ZVxuLy8gbW9kdWxlIGlkID0gNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(7);\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = __webpack_require__(9)(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(false) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../node_modules/css-loader/index.js?sourceMap!../../node_modules/vue-loader/lib/style-rewriter.js?id=data-v-bc497c84&scoped=true!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./Search.vue\", function() {\n\t\t\tvar newContent = require(\"!!../../node_modules/css-loader/index.js?sourceMap!../../node_modules/vue-loader/lib/style-rewriter.js?id=data-v-bc497c84&scoped=true!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./Search.vue\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvU2VhcmNoLnZ1ZT85OGJiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQXFGO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsZ0NBQWdDLFVBQVUsRUFBRTtBQUM1QyIsImZpbGUiOiI2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzP3NvdXJjZU1hcCEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtcmV3cml0ZXIuanM/aWQ9ZGF0YS12LWJjNDk3Yzg0JnNjb3BlZD10cnVlIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vU2VhcmNoLnZ1ZVwiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIHt9KTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuXHQvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuXHRpZighY29udGVudC5sb2NhbHMpIHtcblx0XHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/c291cmNlTWFwIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1yZXdyaXRlci5qcz9pZD1kYXRhLXYtYmM0OTdjODQmc2NvcGVkPXRydWUhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9TZWFyY2gudnVlXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9zb3VyY2VNYXAhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLXJld3JpdGVyLmpzP2lkPWRhdGEtdi1iYzQ5N2M4NCZzY29wZWQ9dHJ1ZSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL1NlYXJjaC52dWVcIik7XG5cdFx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblx0XHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0XHR9KTtcblx0fVxuXHQvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtc3R5bGUtbG9hZGVyIS4vfi9jc3MtbG9hZGVyP3NvdXJjZU1hcCEuL34vdnVlLWxvYWRlci9saWIvc3R5bGUtcmV3cml0ZXIuanM/aWQ9ZGF0YS12LWJjNDk3Yzg0JnNjb3BlZD10cnVlIS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vc3JjL3BhZ2VzL1NlYXJjaC52dWVcbi8vIG1vZHVsZSBpZCA9IDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	eval("exports = module.exports = __webpack_require__(8)();\n// imports\n\n\n// module\nexports.push([module.id, \"\\n.search-input-frame[data-v-bc497c84] {\\n    margin: auto;\\n    width: 600px;\\n    display: flex;\\n    align-items: center;\\n    justify-content: center;\\n    padding: 2rem 0 0 0;\\n}\\n.settings[data-v-bc497c84] {\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    padding: 1rem 0;\\n}\\n.search-input-frame .btn[data-v-bc497c84] {\\n    border-bottom-left-radius: 0;\\n    border-top-left-radius: 0;\\n    background-color: #a55d39;\\n    color: #FFF;\\n}\\n#search_input[data-v-bc497c84] {\\n    box-sizing: border-box;\\n    width: 100%;\\n    height: 50px;\\n    border-bottom-left-radius: 5px;\\n    border-top-left-radius: 5px;\\n    border: none;\\n    font-size: 1.5rem;\\n    padding: 0 .5rem;\\n}\\n#container[data-v-bc497c84] {\\n    display: flex;\\n    flex-wrap: wrap;\\n    align-content: flex-start;\\n    justify-content: space-around;\\n    height: 100vh;\\n}\\n#container .item[data-v-bc497c84] {\\n    flex-grow: 0;\\n    flex-shrink: 0;\\n    margin: .5rem;\\n    padding: .5rem;\\n    display: flex;\\n    justify-content: center;\\n    align-items: center;\\n    background-color: rgba(241, 241, 241, 0.5);\\n    border-radius: 10px;\\n}\\n#container .item img[data-v-bc497c84] {\\n    /*height: 100%;*/\\n    /*width: 100%;*/\\n}\\n\\n\", \"\", {\"version\":3,\"sources\":[\"/./src/pages/Search.vue?240fef10\"],\"names\":[],\"mappings\":\";AA4DA;IACA,aAAA;IACA,aAAA;IACA,cAAA;IACA,oBAAA;IACA,wBAAA;IACA,oBAAA;CACA;AACA;IACA,cAAA;IACA,wBAAA;IACA,oBAAA;IACA,gBAAA;CACA;AACA;IACA,6BAAA;IACA,0BAAA;IACA,0BAAA;IACA,YAAA;CACA;AACA;IACA,uBAAA;IACA,YAAA;IACA,aAAA;IACA,+BAAA;IACA,4BAAA;IACA,aAAA;IACA,kBAAA;IACA,iBAAA;CACA;AACA;IACA,cAAA;IACA,gBAAA;IACA,0BAAA;IACA,8BAAA;IACA,cAAA;CACA;AACA;IACA,aAAA;IACA,eAAA;IACA,cAAA;IACA,eAAA;IACA,cAAA;IACA,wBAAA;IACA,oBAAA;IACA,2CAAA;IACA,oBAAA;CACA;AACA;IACA,iBAAA;IACA,gBAAA;CACA\",\"file\":\"Search.vue\",\"sourcesContent\":[\"<template>\\r\\n    <main-layout>\\r\\n        <div class=\\\"search-input-frame\\\">\\r\\n            <input type=\\\"text\\\" id=\\\"search_input\\\" v-model=\\\"searchText\\\" />\\r\\n            <button class=\\\"btn\\\" v-on:click=\\\"submitSearch()\\\">Search</button>\\r\\n        </div>\\r\\n        <div class=\\\"settings\\\">\\r\\n            <label>Use Img-2: <input type=\\\"checkbox\\\" ref=\\\"img2enabled\\\" checked /></label>\\r\\n        </div>\\r\\n        <div id=\\\"container\\\">\\r\\n            <div class=\\\"item\\\" v-for=\\\"photo in photos\\\" v-html=\\\"renderPhoto(photo)\\\"></div>\\r\\n        </div>\\r\\n    </main-layout>\\r\\n</template>\\r\\n\\r\\n<script>\\r\\n    import MainLayout from \\\"../layouts/Main.vue\\\"\\r\\n    export default {\\r\\n        components: {\\r\\n            MainLayout\\r\\n        },\\r\\n        data: function () {\\r\\n            return  {\\r\\n                img2enabled: true,\\r\\n                searchText: \\\"forest\\\",\\r\\n                photos: []\\r\\n            };\\r\\n        },\\r\\n        methods: {\\r\\n            submitSearch: function () {\\r\\n\\r\\n                this.photos = [{\\\"id\\\":\\\"4dRyVyXN6Lg123\\\",\\\"created_at\\\":\\\"2016-02-16T16:05:00-05:00\\\",\\\"updated_at\\\":\\\"2017-10-07T03:01:12-04:00\\\",\\\"width\\\":6016,\\\"height\\\":4016,\\\"color\\\":\\\"#D3E5E9\\\",\\\"likes\\\":352,\\\"liked_by_user\\\":false,\\\"description\\\":\\\"Mist in an evergreen forest in Šumava National Park\\\",\\\"user\\\":{\\\"id\\\":\\\"OdzrCRYp48E\\\",\\\"updated_at\\\":\\\"2017-09-24T17:24:37-04:00\\\",\\\"username\\\":\\\"lukasneasi\\\",\\\"name\\\":\\\"Lukas Neasi\\\",\\\"first_name\\\":\\\"Lukas\\\",\\\"last_name\\\":\\\"Neasi\\\",\\\"twitter_username\\\":null,\\\"portfolio_url\\\":\\\"http://lukasneasi.com\\\",\\\"bio\\\":\\\"\\\",\\\"location\\\":\\\"Prague\\\",\\\"total_likes\\\":14,\\\"total_photos\\\":10,\\\"total_collections\\\":1,\\\"profile_image\\\":{\\\"small\\\":\\\"https://images.unsplash.com/placeholder-avatars/extra-large.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=0ad68f44c4725d5a3fda019bab9d3edc\\\",\\\"medium\\\":\\\"https://images.unsplash.com/placeholder-avatars/extra-large.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=356bd4b76a3d4eb97d63f45b818dd358\\\",\\\"large\\\":\\\"https://images.unsplash.com/placeholder-avatars/extra-large.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=ee8bbf5fb8d6e43aaaa238feae2fe90d\\\"},\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/users/lukasneasi\\\",\\\"html\\\":\\\"https://unsplash.com/@lukasneasi\\\",\\\"photos\\\":\\\"https://api.unsplash.com/users/lukasneasi/photos\\\",\\\"likes\\\":\\\"https://api.unsplash.com/users/lukasneasi/likes\\\",\\\"portfolio\\\":\\\"https://api.unsplash.com/users/lukasneasi/portfolio\\\",\\\"following\\\":\\\"https://api.unsplash.com/users/lukasneasi/following\\\",\\\"followers\\\":\\\"https://api.unsplash.com/users/lukasneasi/followers\\\"}},\\\"current_user_collections\\\":[],\\\"urls\\\":{\\\"raw\\\":\\\"https://images.unsplash.com/photo-1455656678494-4d1b5f3e7ad4\\\",\\\"full\\\":\\\"https://images.unsplash.com/photo-1455656678494-4d1b5f3e7ad4?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=cafefc6876afa4fbbd51a4ad6f89a52c\\\",\\\"regular\\\":\\\"https://images.unsplash.com/photo-1455656678494-4d1b5f3e7ad4?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=97265bd5a97f601d1ef04fd474dae3cf\\\",\\\"small\\\":\\\"https://images.unsplash.com/photo-1455656678494-4d1b5f3e7ad4?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=01aae142a733540b0ed6302397960a6c\\\",\\\"thumb\\\":\\\"https://images.unsplash.com/photo-1455656678494-4d1b5f3e7ad4?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=36f502d952f795ebaf93362d67484878\\\"},\\\"categories\\\":[],\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/photos/4dRyVyXN6Lg\\\",\\\"html\\\":\\\"https://unsplash.com/photos/4dRyVyXN6Lg\\\",\\\"download\\\":\\\"https://unsplash.com/photos/4dRyVyXN6Lg/download\\\",\\\"download_location\\\":\\\"https://api.unsplash.com/photos/4dRyVyXN6Lg/download\\\"}},{\\\"id\\\":\\\"4dRyVyXN6Lg\\\",\\\"created_at\\\":\\\"2016-02-16T16:05:00-05:00\\\",\\\"updated_at\\\":\\\"2017-10-07T03:01:12-04:00\\\",\\\"width\\\":6016,\\\"height\\\":4016,\\\"color\\\":\\\"#D3E5E9\\\",\\\"likes\\\":352,\\\"liked_by_user\\\":false,\\\"description\\\":\\\"Mist in an evergreen forest in Šumava National Park\\\",\\\"user\\\":{\\\"id\\\":\\\"OdzrCRYp48E\\\",\\\"updated_at\\\":\\\"2017-09-24T17:24:37-04:00\\\",\\\"username\\\":\\\"lukasneasi\\\",\\\"name\\\":\\\"Lukas Neasi\\\",\\\"first_name\\\":\\\"Lukas\\\",\\\"last_name\\\":\\\"Neasi\\\",\\\"twitter_username\\\":null,\\\"portfolio_url\\\":\\\"http://lukasneasi.com\\\",\\\"bio\\\":\\\"\\\",\\\"location\\\":\\\"Prague\\\",\\\"total_likes\\\":14,\\\"total_photos\\\":10,\\\"total_collections\\\":1,\\\"profile_image\\\":{\\\"small\\\":\\\"https://images.unsplash.com/placeholder-avatars/extra-large.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=0ad68f44c4725d5a3fda019bab9d3edc\\\",\\\"medium\\\":\\\"https://images.unsplash.com/placeholder-avatars/extra-large.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=356bd4b76a3d4eb97d63f45b818dd358\\\",\\\"large\\\":\\\"https://images.unsplash.com/placeholder-avatars/extra-large.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=ee8bbf5fb8d6e43aaaa238feae2fe90d\\\"},\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/users/lukasneasi\\\",\\\"html\\\":\\\"https://unsplash.com/@lukasneasi\\\",\\\"photos\\\":\\\"https://api.unsplash.com/users/lukasneasi/photos\\\",\\\"likes\\\":\\\"https://api.unsplash.com/users/lukasneasi/likes\\\",\\\"portfolio\\\":\\\"https://api.unsplash.com/users/lukasneasi/portfolio\\\",\\\"following\\\":\\\"https://api.unsplash.com/users/lukasneasi/following\\\",\\\"followers\\\":\\\"https://api.unsplash.com/users/lukasneasi/followers\\\"}},\\\"current_user_collections\\\":[],\\\"urls\\\":{\\\"raw\\\":\\\"https://images.unsplash.com/photo-1455656678494-4d1b5f3e7ad4\\\",\\\"full\\\":\\\"https://images.unsplash.com/photo-1455656678494-4d1b5f3e7ad4?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=cafefc6876afa4fbbd51a4ad6f89a52c\\\",\\\"regular\\\":\\\"https://images.unsplash.com/photo-1455656678494-4d1b5f3e7ad4?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=97265bd5a97f601d1ef04fd474dae3cf\\\",\\\"small\\\":\\\"https://images.unsplash.com/photo-1455656678494-4d1b5f3e7ad4?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=01aae142a733540b0ed6302397960a6c\\\",\\\"thumb\\\":\\\"https://images.unsplash.com/photo-1455656678494-4d1b5f3e7ad4?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=36f502d952f795ebaf93362d67484878\\\"},\\\"categories\\\":[],\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/photos/4dRyVyXN6Lg\\\",\\\"html\\\":\\\"https://unsplash.com/photos/4dRyVyXN6Lg\\\",\\\"download\\\":\\\"https://unsplash.com/photos/4dRyVyXN6Lg/download\\\",\\\"download_location\\\":\\\"https://api.unsplash.com/photos/4dRyVyXN6Lg/download\\\"}},{\\\"id\\\":\\\"TFyi0QOx08c\\\",\\\"created_at\\\":\\\"2014-12-08T14:04:48-05:00\\\",\\\"updated_at\\\":\\\"2017-10-06T16:31:15-04:00\\\",\\\"width\\\":2200,\\\"height\\\":1467,\\\"color\\\":\\\"#929794\\\",\\\"likes\\\":1268,\\\"liked_by_user\\\":false,\\\"description\\\":\\\"A pine forest shrouded in a dense fog descending from above\\\",\\\"user\\\":{\\\"id\\\":\\\"-rcrJA1bVtQ\\\",\\\"updated_at\\\":\\\"2017-10-05T14:34:38-04:00\\\",\\\"username\\\":\\\"jaymantri\\\",\\\"name\\\":\\\"Jay Mantri\\\",\\\"first_name\\\":\\\"Jay\\\",\\\"last_name\\\":\\\"Mantri\\\",\\\"twitter_username\\\":\\\"jaymantri\\\",\\\"portfolio_url\\\":\\\"http://jaymantri.com/\\\",\\\"bio\\\":\\\"Designer by day, burger monster by night.\\\",\\\"location\\\":\\\"Los Angeles, California\\\",\\\"total_likes\\\":0,\\\"total_photos\\\":5,\\\"total_collections\\\":0,\\\"profile_image\\\":{\\\"small\\\":\\\"https://images.unsplash.com/profile-1503027684826-c9c642529b92?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=79a040d28c55609e74afab8c51b2856b\\\",\\\"medium\\\":\\\"https://images.unsplash.com/profile-1503027684826-c9c642529b92?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=29f24b986f22a6e49fb8a776717bc79e\\\",\\\"large\\\":\\\"https://images.unsplash.com/profile-1503027684826-c9c642529b92?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=d5c52153d40ec3d66a93cd3d913dd612\\\"},\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/users/jaymantri\\\",\\\"html\\\":\\\"https://unsplash.com/@jaymantri\\\",\\\"photos\\\":\\\"https://api.unsplash.com/users/jaymantri/photos\\\",\\\"likes\\\":\\\"https://api.unsplash.com/users/jaymantri/likes\\\",\\\"portfolio\\\":\\\"https://api.unsplash.com/users/jaymantri/portfolio\\\",\\\"following\\\":\\\"https://api.unsplash.com/users/jaymantri/following\\\",\\\"followers\\\":\\\"https://api.unsplash.com/users/jaymantri/followers\\\"}},\\\"current_user_collections\\\":[],\\\"urls\\\":{\\\"raw\\\":\\\"https://images.unsplash.com/photo-1418065460487-3e41a6c84dc5\\\",\\\"full\\\":\\\"https://images.unsplash.com/photo-1418065460487-3e41a6c84dc5?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=10a68627b31e390a0b30cca13c891ad3\\\",\\\"regular\\\":\\\"https://images.unsplash.com/photo-1418065460487-3e41a6c84dc5?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=6dff6e3c57f5cda4e14cd1d2988c5083\\\",\\\"small\\\":\\\"https://images.unsplash.com/photo-1418065460487-3e41a6c84dc5?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=da76a54b6b17756c64dfcba6de5d7cd2\\\",\\\"thumb\\\":\\\"https://images.unsplash.com/photo-1418065460487-3e41a6c84dc5?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=b273ac7816a7a92fcfdf8b51e6476ee2\\\"},\\\"categories\\\":[],\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/photos/TFyi0QOx08c\\\",\\\"html\\\":\\\"https://unsplash.com/photos/TFyi0QOx08c\\\",\\\"download\\\":\\\"https://unsplash.com/photos/TFyi0QOx08c/download\\\",\\\"download_location\\\":\\\"https://api.unsplash.com/photos/TFyi0QOx08c/download\\\"}},{\\\"id\\\":\\\"sp-p7uuT0tw\\\",\\\"created_at\\\":\\\"2015-11-24T09:30:49-05:00\\\",\\\"updated_at\\\":\\\"2017-10-05T21:25:42-04:00\\\",\\\"width\\\":6000,\\\"height\\\":4000,\\\"color\\\":\\\"#4A464B\\\",\\\"likes\\\":489,\\\"liked_by_user\\\":false,\\\"description\\\":null,\\\"user\\\":{\\\"id\\\":\\\"9LR8U8xfNug\\\",\\\"updated_at\\\":\\\"2017-10-02T14:13:23-04:00\\\",\\\"username\\\":\\\"sebastian_unrau\\\",\\\"name\\\":\\\"Sebastian Unrau\\\",\\\"first_name\\\":\\\"Sebastian\\\",\\\"last_name\\\":\\\"Unrau\\\",\\\"twitter_username\\\":\\\"BastiUnrau\\\",\\\"portfolio_url\\\":\\\"https://www.instagram.com/sebastian_unrau\\\",\\\"bio\\\":\\\"\\\",\\\"location\\\":\\\"Bad Pyrmont, Germany\\\",\\\"total_likes\\\":34,\\\"total_photos\\\":13,\\\"total_collections\\\":1,\\\"profile_image\\\":{\\\"small\\\":\\\"https://images.unsplash.com/profile-1461334411402-27384bf39c3a?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=c948e02c54e790bcd36e9be01253506d\\\",\\\"medium\\\":\\\"https://images.unsplash.com/profile-1461334411402-27384bf39c3a?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=34a70e2d4db221e9830eff1feaff4834\\\",\\\"large\\\":\\\"https://images.unsplash.com/profile-1461334411402-27384bf39c3a?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=0b2292454d71868bd8c8bcc7b7374d59\\\"},\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/users/sebastian_unrau\\\",\\\"html\\\":\\\"https://unsplash.com/@sebastian_unrau\\\",\\\"photos\\\":\\\"https://api.unsplash.com/users/sebastian_unrau/photos\\\",\\\"likes\\\":\\\"https://api.unsplash.com/users/sebastian_unrau/likes\\\",\\\"portfolio\\\":\\\"https://api.unsplash.com/users/sebastian_unrau/portfolio\\\",\\\"following\\\":\\\"https://api.unsplash.com/users/sebastian_unrau/following\\\",\\\"followers\\\":\\\"https://api.unsplash.com/users/sebastian_unrau/followers\\\"}},\\\"current_user_collections\\\":[],\\\"urls\\\":{\\\"raw\\\":\\\"https://images.unsplash.com/photo-1448375240586-882707db888b\\\",\\\"full\\\":\\\"https://images.unsplash.com/photo-1448375240586-882707db888b?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=14d4705d865e5fb239e6eef3b625828e\\\",\\\"regular\\\":\\\"https://images.unsplash.com/photo-1448375240586-882707db888b?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=67ccb50e35865caef60ea779e38359cf\\\",\\\"small\\\":\\\"https://images.unsplash.com/photo-1448375240586-882707db888b?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=47d6884d58a136b96a1e42fc793112bd\\\",\\\"thumb\\\":\\\"https://images.unsplash.com/photo-1448375240586-882707db888b?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=c42ea4a036f9abf14ffaa3ecd286c1dd\\\"},\\\"categories\\\":[],\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/photos/sp-p7uuT0tw\\\",\\\"html\\\":\\\"https://unsplash.com/photos/sp-p7uuT0tw\\\",\\\"download\\\":\\\"https://unsplash.com/photos/sp-p7uuT0tw/download\\\",\\\"download_location\\\":\\\"https://api.unsplash.com/photos/sp-p7uuT0tw/download\\\"}},{\\\"id\\\":\\\"3ytjETpQMNY\\\",\\\"created_at\\\":\\\"2015-08-27T12:15:20-04:00\\\",\\\"updated_at\\\":\\\"2017-10-07T04:17:05-04:00\\\",\\\"width\\\":6016,\\\"height\\\":4016,\\\"color\\\":\\\"#535452\\\",\\\"likes\\\":1857,\\\"liked_by_user\\\":false,\\\"description\\\":\\\"A dim shot of fog over a forest in Decollatura\\\",\\\"user\\\":{\\\"id\\\":\\\"mPbowYWnZ1c\\\",\\\"updated_at\\\":\\\"2017-09-22T19:25:04-04:00\\\",\\\"username\\\":\\\"carminu\\\",\\\"name\\\":\\\"Carmine De Fazio\\\",\\\"first_name\\\":\\\"Carmine\\\",\\\"last_name\\\":\\\"De Fazio\\\",\\\"twitter_username\\\":\\\"Carmins\\\",\\\"portfolio_url\\\":\\\"https://instagram.com/carminu/\\\",\\\"bio\\\":\\\"\\\",\\\"location\\\":null,\\\"total_likes\\\":78,\\\"total_photos\\\":4,\\\"total_collections\\\":0,\\\"profile_image\\\":{\\\"small\\\":\\\"https://images.unsplash.com/profile-1443895110997-346376a065f1?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=97c440951a5bfe1b0eb137894527f07c\\\",\\\"medium\\\":\\\"https://images.unsplash.com/profile-1443895110997-346376a065f1?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=7e1ea34b0d62ac02bb71571955c646e9\\\",\\\"large\\\":\\\"https://images.unsplash.com/profile-1443895110997-346376a065f1?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=f68308380f60f936b14770a2ddc092c4\\\"},\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/users/carminu\\\",\\\"html\\\":\\\"https://unsplash.com/@carminu\\\",\\\"photos\\\":\\\"https://api.unsplash.com/users/carminu/photos\\\",\\\"likes\\\":\\\"https://api.unsplash.com/users/carminu/likes\\\",\\\"portfolio\\\":\\\"https://api.unsplash.com/users/carminu/portfolio\\\",\\\"following\\\":\\\"https://api.unsplash.com/users/carminu/following\\\",\\\"followers\\\":\\\"https://api.unsplash.com/users/carminu/followers\\\"}},\\\"current_user_collections\\\":[],\\\"urls\\\":{\\\"raw\\\":\\\"https://images.unsplash.com/photo-1440688807730-73e4e2169fb8\\\",\\\"full\\\":\\\"https://images.unsplash.com/photo-1440688807730-73e4e2169fb8?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=02acce01a61211632055bc5fce8d012f\\\",\\\"regular\\\":\\\"https://images.unsplash.com/photo-1440688807730-73e4e2169fb8?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=977cf757fa1f24f2d1e864a4aa58aae8\\\",\\\"small\\\":\\\"https://images.unsplash.com/photo-1440688807730-73e4e2169fb8?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=d2a7b137e7d0fa1cd584d7d796e00697\\\",\\\"thumb\\\":\\\"https://images.unsplash.com/photo-1440688807730-73e4e2169fb8?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=80268e61d1db62a7e38d7be9a30591be\\\"},\\\"categories\\\":[],\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/photos/3ytjETpQMNY\\\",\\\"html\\\":\\\"https://unsplash.com/photos/3ytjETpQMNY\\\",\\\"download\\\":\\\"https://unsplash.com/photos/3ytjETpQMNY/download\\\",\\\"download_location\\\":\\\"https://api.unsplash.com/photos/3ytjETpQMNY/download\\\"}},{\\\"id\\\":\\\"x48QL8gNYZ8\\\",\\\"created_at\\\":\\\"2015-10-29T03:48:26-04:00\\\",\\\"updated_at\\\":\\\"2017-10-02T11:02:08-04:00\\\",\\\"width\\\":4928,\\\"height\\\":3264,\\\"color\\\":\\\"#474842\\\",\\\"likes\\\":372,\\\"liked_by_user\\\":false,\\\"description\\\":\\\"A light fog on the trail through the forest in Muszyna Zdrój\\\",\\\"user\\\":{\\\"id\\\":\\\"S4T8zxLq1vI\\\",\\\"updated_at\\\":\\\"2017-10-01T16:31:23-04:00\\\",\\\"username\\\":\\\"alienowicz\\\",\\\"name\\\":\\\"Artur Rutkowski\\\",\\\"first_name\\\":\\\"Artur\\\",\\\"last_name\\\":\\\"Rutkowski\\\",\\\"twitter_username\\\":null,\\\"portfolio_url\\\":\\\"http://www.arturrro.pl/\\\",\\\"bio\\\":\\\"Hi, \\\\r\\\\nI'm Graphic Designer and Amateur Photographer forom Warsaw, Poland.\\\\r\\\\n\\\",\\\"location\\\":\\\"Warsaw, Poland\\\",\\\"total_likes\\\":47,\\\"total_photos\\\":8,\\\"total_collections\\\":0,\\\"profile_image\\\":{\\\"small\\\":\\\"https://images.unsplash.com/profile-1501416126626-f70dd4367617?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=ad8138a13a2489a034058ed78c0588cd\\\",\\\"medium\\\":\\\"https://images.unsplash.com/profile-1501416126626-f70dd4367617?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=a5471a904f1cc3f05f9a8afc3a9973f6\\\",\\\"large\\\":\\\"https://images.unsplash.com/profile-1501416126626-f70dd4367617?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=d0abcd179e658f33dc4d3f0e76c62bac\\\"},\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/users/alienowicz\\\",\\\"html\\\":\\\"https://unsplash.com/@alienowicz\\\",\\\"photos\\\":\\\"https://api.unsplash.com/users/alienowicz/photos\\\",\\\"likes\\\":\\\"https://api.unsplash.com/users/alienowicz/likes\\\",\\\"portfolio\\\":\\\"https://api.unsplash.com/users/alienowicz/portfolio\\\",\\\"following\\\":\\\"https://api.unsplash.com/users/alienowicz/following\\\",\\\"followers\\\":\\\"https://api.unsplash.com/users/alienowicz/followers\\\"}},\\\"current_user_collections\\\":[],\\\"urls\\\":{\\\"raw\\\":\\\"https://images.unsplash.com/photo-1446104838475-bc6508184f08\\\",\\\"full\\\":\\\"https://images.unsplash.com/photo-1446104838475-bc6508184f08?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=26f4bbe8b28ff1d87278a4af5f9e255a\\\",\\\"regular\\\":\\\"https://images.unsplash.com/photo-1446104838475-bc6508184f08?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=914acdc119c68bff5eba3e26152c5e3a\\\",\\\"small\\\":\\\"https://images.unsplash.com/photo-1446104838475-bc6508184f08?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=dbea367d21339d07ce1cd13069ab73e8\\\",\\\"thumb\\\":\\\"https://images.unsplash.com/photo-1446104838475-bc6508184f08?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=e803963d08c969665a8bbb9ab04f65c7\\\"},\\\"categories\\\":[],\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/photos/x48QL8gNYZ8\\\",\\\"html\\\":\\\"https://unsplash.com/photos/x48QL8gNYZ8\\\",\\\"download\\\":\\\"https://unsplash.com/photos/x48QL8gNYZ8/download\\\",\\\"download_location\\\":\\\"https://api.unsplash.com/photos/x48QL8gNYZ8/download\\\"}},{\\\"id\\\":\\\"dkzlTpMYYMQ\\\",\\\"created_at\\\":\\\"2015-10-23T07:43:38-04:00\\\",\\\"updated_at\\\":\\\"2017-10-02T20:59:23-04:00\\\",\\\"width\\\":5760,\\\"height\\\":3840,\\\"color\\\":\\\"#3F5850\\\",\\\"likes\\\":199,\\\"liked_by_user\\\":false,\\\"description\\\":null,\\\"user\\\":{\\\"id\\\":\\\"6hh7fFmCplk\\\",\\\"updated_at\\\":\\\"2017-09-22T13:44:00-04:00\\\",\\\"username\\\":\\\"wfuller\\\",\\\"name\\\":\\\"Will Fuller\\\",\\\"first_name\\\":\\\"Will\\\",\\\"last_name\\\":\\\"Fuller\\\",\\\"twitter_username\\\":\\\"will_fuller\\\",\\\"portfolio_url\\\":\\\"http://willfullerphotography.com/\\\",\\\"bio\\\":\\\"\\\",\\\"location\\\":null,\\\"total_likes\\\":32,\\\"total_photos\\\":3,\\\"total_collections\\\":0,\\\"profile_image\\\":{\\\"small\\\":\\\"https://images.unsplash.com/profile-fb-1445555189-9be131ac477d.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=ca85abe97dbc84fed8a9615309842a28\\\",\\\"medium\\\":\\\"https://images.unsplash.com/profile-fb-1445555189-9be131ac477d.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=5073c24ff6669d5c78b74509928fd3c6\\\",\\\"large\\\":\\\"https://images.unsplash.com/profile-fb-1445555189-9be131ac477d.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=72ea55ca0fac1438b8b833c731587781\\\"},\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/users/wfuller\\\",\\\"html\\\":\\\"https://unsplash.com/@wfuller\\\",\\\"photos\\\":\\\"https://api.unsplash.com/users/wfuller/photos\\\",\\\"likes\\\":\\\"https://api.unsplash.com/users/wfuller/likes\\\",\\\"portfolio\\\":\\\"https://api.unsplash.com/users/wfuller/portfolio\\\",\\\"following\\\":\\\"https://api.unsplash.com/users/wfuller/following\\\",\\\"followers\\\":\\\"https://api.unsplash.com/users/wfuller/followers\\\"}},\\\"current_user_collections\\\":[],\\\"urls\\\":{\\\"raw\\\":\\\"https://images.unsplash.com/photo-1445600523100-d5b99b664bda\\\",\\\"full\\\":\\\"https://images.unsplash.com/photo-1445600523100-d5b99b664bda?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=d23c17350365b555b97b38c1affc5959\\\",\\\"regular\\\":\\\"https://images.unsplash.com/photo-1445600523100-d5b99b664bda?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=b12697857c5272774e3cb9bbbeb2b18e\\\",\\\"small\\\":\\\"https://images.unsplash.com/photo-1445600523100-d5b99b664bda?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=fe15d3afead71632135db1378cd46f81\\\",\\\"thumb\\\":\\\"https://images.unsplash.com/photo-1445600523100-d5b99b664bda?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=44caefcc5cb830d5a00cac2965b22042\\\"},\\\"categories\\\":[],\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/photos/dkzlTpMYYMQ\\\",\\\"html\\\":\\\"https://unsplash.com/photos/dkzlTpMYYMQ\\\",\\\"download\\\":\\\"https://unsplash.com/photos/dkzlTpMYYMQ/download\\\",\\\"download_location\\\":\\\"https://api.unsplash.com/photos/dkzlTpMYYMQ/download\\\"}},{\\\"id\\\":\\\"P8PlK2nGwqA\\\",\\\"created_at\\\":\\\"2016-10-24T11:23:18-04:00\\\",\\\"updated_at\\\":\\\"2017-10-06T15:50:33-04:00\\\",\\\"width\\\":2329,\\\"height\\\":1639,\\\"color\\\":\\\"#EFF1F2\\\",\\\"likes\\\":534,\\\"liked_by_user\\\":false,\\\"description\\\":\\\"A small island with a clump of evergreen trees on a lake\\\",\\\"user\\\":{\\\"id\\\":\\\"qbkkNqEAHh8\\\",\\\"updated_at\\\":\\\"2017-09-22T12:54:47-04:00\\\",\\\"username\\\":\\\"juanster\\\",\\\"name\\\":\\\"Juan Davila\\\",\\\"first_name\\\":\\\"Juan\\\",\\\"last_name\\\":\\\"Davila\\\",\\\"twitter_username\\\":\\\"juanstermonster\\\",\\\"portfolio_url\\\":\\\"http://onedavila.com/\\\",\\\"bio\\\":\\\"I’m a Toronto based photographer and designer. \\\\r\\\\n\\\\r\\\\n\\\\r\\\\n\\\\r\\\\n\\\\r\\\\n\\\\r\\\\nSay hello!\\\\r\\\\n\\\\r\\\\n\\\\r\\\\n\\\\r\\\\n\\\\r\\\\n\\\\r\\\\nEMAIL: hello@onedavila.com\\\\r\\\\n\\\\r\\\\n\\\\r\\\\n\\\",\\\"location\\\":\\\"Toronto, Canada\\\",\\\"total_likes\\\":1,\\\"total_photos\\\":15,\\\"total_collections\\\":0,\\\"profile_image\\\":{\\\"small\\\":\\\"https://images.unsplash.com/profile-1446242087925-6b291fa7de5f?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=aeab740b8403c1c62835112789d8909d\\\",\\\"medium\\\":\\\"https://images.unsplash.com/profile-1446242087925-6b291fa7de5f?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=20c0f15a81c67a33ee638b1a43b5acd3\\\",\\\"large\\\":\\\"https://images.unsplash.com/profile-1446242087925-6b291fa7de5f?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=42b3144cb851930778741de7148ca919\\\"},\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/users/juanster\\\",\\\"html\\\":\\\"https://unsplash.com/@juanster\\\",\\\"photos\\\":\\\"https://api.unsplash.com/users/juanster/photos\\\",\\\"likes\\\":\\\"https://api.unsplash.com/users/juanster/likes\\\",\\\"portfolio\\\":\\\"https://api.unsplash.com/users/juanster/portfolio\\\",\\\"following\\\":\\\"https://api.unsplash.com/users/juanster/following\\\",\\\"followers\\\":\\\"https://api.unsplash.com/users/juanster/followers\\\"}},\\\"current_user_collections\\\":[],\\\"urls\\\":{\\\"raw\\\":\\\"https://images.unsplash.com/photo-1477322524744-0eece9e79640\\\",\\\"full\\\":\\\"https://images.unsplash.com/photo-1477322524744-0eece9e79640?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=2fef9e5c67cbee95a5b77430517f31f2\\\",\\\"regular\\\":\\\"https://images.unsplash.com/photo-1477322524744-0eece9e79640?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=5bef3c529882f2b9d072c01593a34673\\\",\\\"small\\\":\\\"https://images.unsplash.com/photo-1477322524744-0eece9e79640?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=d899d785ea1a104300e859a15fc2941f\\\",\\\"thumb\\\":\\\"https://images.unsplash.com/photo-1477322524744-0eece9e79640?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=200c05b7df707c523b853d05ed2cac51\\\"},\\\"categories\\\":[],\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/photos/P8PlK2nGwqA\\\",\\\"html\\\":\\\"https://unsplash.com/photos/P8PlK2nGwqA\\\",\\\"download\\\":\\\"https://unsplash.com/photos/P8PlK2nGwqA/download\\\",\\\"download_location\\\":\\\"https://api.unsplash.com/photos/P8PlK2nGwqA/download\\\"}},{\\\"id\\\":\\\"WH4e0NVslsc\\\",\\\"created_at\\\":\\\"2015-08-02T07:27:21-04:00\\\",\\\"updated_at\\\":\\\"2017-10-03T09:13:19-04:00\\\",\\\"width\\\":5184,\\\"height\\\":3456,\\\"color\\\":\\\"#413C2A\\\",\\\"likes\\\":96,\\\"liked_by_user\\\":false,\\\"description\\\":\\\"An overgrown path through a coniferous forest\\\",\\\"user\\\":{\\\"id\\\":\\\"nfZyTM0R_TI\\\",\\\"updated_at\\\":\\\"2017-09-21T10:17:07-04:00\\\",\\\"username\\\":\\\"nech\\\",\\\"name\\\":\\\"Kirill Nechmonya\\\",\\\"first_name\\\":\\\"Kirill\\\",\\\"last_name\\\":\\\"Nechmonya\\\",\\\"twitter_username\\\":null,\\\"portfolio_url\\\":\\\"http://mircoproduction.com/\\\",\\\"bio\\\":\\\"\\\",\\\"location\\\":null,\\\"total_likes\\\":3,\\\"total_photos\\\":11,\\\"total_collections\\\":0,\\\"profile_image\\\":{\\\"small\\\":\\\"https://images.unsplash.com/placeholder-avatars/extra-large.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=0ad68f44c4725d5a3fda019bab9d3edc\\\",\\\"medium\\\":\\\"https://images.unsplash.com/placeholder-avatars/extra-large.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=356bd4b76a3d4eb97d63f45b818dd358\\\",\\\"large\\\":\\\"https://images.unsplash.com/placeholder-avatars/extra-large.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=ee8bbf5fb8d6e43aaaa238feae2fe90d\\\"},\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/users/nech\\\",\\\"html\\\":\\\"https://unsplash.com/@nech\\\",\\\"photos\\\":\\\"https://api.unsplash.com/users/nech/photos\\\",\\\"likes\\\":\\\"https://api.unsplash.com/users/nech/likes\\\",\\\"portfolio\\\":\\\"https://api.unsplash.com/users/nech/portfolio\\\",\\\"following\\\":\\\"https://api.unsplash.com/users/nech/following\\\",\\\"followers\\\":\\\"https://api.unsplash.com/users/nech/followers\\\"}},\\\"current_user_collections\\\":[],\\\"urls\\\":{\\\"raw\\\":\\\"https://images.unsplash.com/photo-1438514794628-6ad25147b1d4\\\",\\\"full\\\":\\\"https://images.unsplash.com/photo-1438514794628-6ad25147b1d4?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=853d7df16686fee9d944cf3d27efb7ee\\\",\\\"regular\\\":\\\"https://images.unsplash.com/photo-1438514794628-6ad25147b1d4?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=6e828b26b077994c123897346cda4b11\\\",\\\"small\\\":\\\"https://images.unsplash.com/photo-1438514794628-6ad25147b1d4?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=87871981649f7aaf6edb31e660f0b6ba\\\",\\\"thumb\\\":\\\"https://images.unsplash.com/photo-1438514794628-6ad25147b1d4?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=829285fa4b469b6f299070df32c4d626\\\"},\\\"categories\\\":[],\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/photos/WH4e0NVslsc\\\",\\\"html\\\":\\\"https://unsplash.com/photos/WH4e0NVslsc\\\",\\\"download\\\":\\\"https://unsplash.com/photos/WH4e0NVslsc/download\\\",\\\"download_location\\\":\\\"https://api.unsplash.com/photos/WH4e0NVslsc/download\\\"}},{\\\"id\\\":\\\"9F22zHd6dmM\\\",\\\"created_at\\\":\\\"2016-03-25T15:51:00-04:00\\\",\\\"updated_at\\\":\\\"2017-10-02T19:14:28-04:00\\\",\\\"width\\\":4900,\\\"height\\\":3267,\\\"color\\\":\\\"#131313\\\",\\\"likes\\\":139,\\\"liked_by_user\\\":false,\\\"description\\\":null,\\\"user\\\":{\\\"id\\\":\\\"xqiscbtGdPc\\\",\\\"updated_at\\\":\\\"2017-10-05T07:45:18-04:00\\\",\\\"username\\\":\\\"teddykelley\\\",\\\"name\\\":\\\"Teddy Kelley\\\",\\\"first_name\\\":\\\"Teddy\\\",\\\"last_name\\\":\\\"Kelley\\\",\\\"twitter_username\\\":null,\\\"portfolio_url\\\":\\\"https://teddykelley.smugmug.com\\\",\\\"bio\\\":\\\"Instagram @Simpler.Times\\\\r\\\\n\\\\r\\\\nteddykelley@gmail.com\\\",\\\"location\\\":null,\\\"total_likes\\\":44,\\\"total_photos\\\":41,\\\"total_collections\\\":0,\\\"profile_image\\\":{\\\"small\\\":\\\"https://images.unsplash.com/profile-1454994701248-ea5cee4726f4?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=d05a497a978036e6df242f12860ae60a\\\",\\\"medium\\\":\\\"https://images.unsplash.com/profile-1454994701248-ea5cee4726f4?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=821db6a091b23e57ea3c6a7533674996\\\",\\\"large\\\":\\\"https://images.unsplash.com/profile-1454994701248-ea5cee4726f4?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=77429ab0384f8625cc780c7a87c71c41\\\"},\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/users/teddykelley\\\",\\\"html\\\":\\\"https://unsplash.com/@teddykelley\\\",\\\"photos\\\":\\\"https://api.unsplash.com/users/teddykelley/photos\\\",\\\"likes\\\":\\\"https://api.unsplash.com/users/teddykelley/likes\\\",\\\"portfolio\\\":\\\"https://api.unsplash.com/users/teddykelley/portfolio\\\",\\\"following\\\":\\\"https://api.unsplash.com/users/teddykelley/following\\\",\\\"followers\\\":\\\"https://api.unsplash.com/users/teddykelley/followers\\\"}},\\\"current_user_collections\\\":[],\\\"urls\\\":{\\\"raw\\\":\\\"https://images.unsplash.com/photo-1458935416903-006892a9d8ca\\\",\\\"full\\\":\\\"https://images.unsplash.com/photo-1458935416903-006892a9d8ca?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=a643fef5100bc96a90edef31f5f050a1\\\",\\\"regular\\\":\\\"https://images.unsplash.com/photo-1458935416903-006892a9d8ca?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=6ec0e7f7fc94f3ffddfed4235f427621\\\",\\\"small\\\":\\\"https://images.unsplash.com/photo-1458935416903-006892a9d8ca?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=442a5766727822d894badf5af465eb67\\\",\\\"thumb\\\":\\\"https://images.unsplash.com/photo-1458935416903-006892a9d8ca?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=e844531e51834b67d5b84e7da48e4f40\\\"},\\\"categories\\\":[],\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/photos/9F22zHd6dmM\\\",\\\"html\\\":\\\"https://unsplash.com/photos/9F22zHd6dmM\\\",\\\"download\\\":\\\"https://unsplash.com/photos/9F22zHd6dmM/download\\\",\\\"download_location\\\":\\\"https://api.unsplash.com/photos/9F22zHd6dmM/download\\\"}},{\\\"id\\\":\\\"d6kSvT2xZQo\\\",\\\"created_at\\\":\\\"2015-08-26T05:35:50-04:00\\\",\\\"updated_at\\\":\\\"2017-10-04T02:41:54-04:00\\\",\\\"width\\\":3264,\\\"height\\\":2448,\\\"color\\\":\\\"#534F33\\\",\\\"likes\\\":94,\\\"liked_by_user\\\":false,\\\"description\\\":null,\\\"user\\\":{\\\"id\\\":\\\"uXQY0WJDRvo\\\",\\\"updated_at\\\":\\\"2017-09-22T09:02:54-04:00\\\",\\\"username\\\":\\\"outoforbit\\\",\\\"name\\\":\\\"Gustav Gullstrand\\\",\\\"first_name\\\":\\\"Gustav\\\",\\\"last_name\\\":\\\"Gullstrand\\\",\\\"twitter_username\\\":null,\\\"portfolio_url\\\":null,\\\"bio\\\":\\\"\\\",\\\"location\\\":null,\\\"total_likes\\\":0,\\\"total_photos\\\":1,\\\"total_collections\\\":0,\\\"profile_image\\\":{\\\"small\\\":\\\"https://images.unsplash.com/placeholder-avatars/extra-large.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=0ad68f44c4725d5a3fda019bab9d3edc\\\",\\\"medium\\\":\\\"https://images.unsplash.com/placeholder-avatars/extra-large.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=356bd4b76a3d4eb97d63f45b818dd358\\\",\\\"large\\\":\\\"https://images.unsplash.com/placeholder-avatars/extra-large.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=ee8bbf5fb8d6e43aaaa238feae2fe90d\\\"},\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/users/outoforbit\\\",\\\"html\\\":\\\"https://unsplash.com/@outoforbit\\\",\\\"photos\\\":\\\"https://api.unsplash.com/users/outoforbit/photos\\\",\\\"likes\\\":\\\"https://api.unsplash.com/users/outoforbit/likes\\\",\\\"portfolio\\\":\\\"https://api.unsplash.com/users/outoforbit/portfolio\\\",\\\"following\\\":\\\"https://api.unsplash.com/users/outoforbit/following\\\",\\\"followers\\\":\\\"https://api.unsplash.com/users/outoforbit/followers\\\"}},\\\"current_user_collections\\\":[],\\\"urls\\\":{\\\"raw\\\":\\\"https://images.unsplash.com/photo-1440581572325-0bea30075d9d\\\",\\\"full\\\":\\\"https://images.unsplash.com/photo-1440581572325-0bea30075d9d?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=84d3d09f8ac1338adf4546278856ddac\\\",\\\"regular\\\":\\\"https://images.unsplash.com/photo-1440581572325-0bea30075d9d?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=8359a43c03f2ee0e0a50502e583a2934\\\",\\\"small\\\":\\\"https://images.unsplash.com/photo-1440581572325-0bea30075d9d?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=1bebeb99491936b1392807d3679587d8\\\",\\\"thumb\\\":\\\"https://images.unsplash.com/photo-1440581572325-0bea30075d9d?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=676465e79c18f1788039801288ec3e24\\\"},\\\"categories\\\":[],\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/photos/d6kSvT2xZQo\\\",\\\"html\\\":\\\"https://unsplash.com/photos/d6kSvT2xZQo\\\",\\\"download\\\":\\\"https://unsplash.com/photos/d6kSvT2xZQo/download\\\",\\\"download_location\\\":\\\"https://api.unsplash.com/photos/d6kSvT2xZQo/download\\\"}},{\\\"id\\\":\\\"5KvErlbdeyo\\\",\\\"created_at\\\":\\\"2016-06-23T10:02:53-04:00\\\",\\\"updated_at\\\":\\\"2017-10-06T02:04:21-04:00\\\",\\\"width\\\":5760,\\\"height\\\":3840,\\\"color\\\":\\\"#C0B87C\\\",\\\"likes\\\":146,\\\"liked_by_user\\\":false,\\\"description\\\":null,\\\"user\\\":{\\\"id\\\":\\\"A7mKxgipFc8\\\",\\\"updated_at\\\":\\\"2017-10-07T05:18:37-04:00\\\",\\\"username\\\":\\\"markusspiske\\\",\\\"name\\\":\\\"Markus Spiske\\\",\\\"first_name\\\":\\\"Markus\\\",\\\"last_name\\\":\\\"Spiske\\\",\\\"twitter_username\\\":null,\\\"portfolio_url\\\":\\\"http://freeforcommercialuse.net/\\\",\\\"bio\\\":\\\"Authentic #unstock photos for commercial use. Stunning lifestyle imagery for modern creatives.\\\",\\\"location\\\":\\\"Erlangen, Bavaria, Germany\\\",\\\"total_likes\\\":821,\\\"total_photos\\\":335,\\\"total_collections\\\":18,\\\"profile_image\\\":{\\\"small\\\":\\\"https://images.unsplash.com/profile-1468003870880-1d44bae203c5?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=35a08b101a4d88f1dcb14e78d68721c9\\\",\\\"medium\\\":\\\"https://images.unsplash.com/profile-1468003870880-1d44bae203c5?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=266b89f88f8132cecdf3b0e8c53335fb\\\",\\\"large\\\":\\\"https://images.unsplash.com/profile-1468003870880-1d44bae203c5?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=8ff6442ed89750b7d7367672547cbff3\\\"},\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/users/markusspiske\\\",\\\"html\\\":\\\"https://unsplash.com/@markusspiske\\\",\\\"photos\\\":\\\"https://api.unsplash.com/users/markusspiske/photos\\\",\\\"likes\\\":\\\"https://api.unsplash.com/users/markusspiske/likes\\\",\\\"portfolio\\\":\\\"https://api.unsplash.com/users/markusspiske/portfolio\\\",\\\"following\\\":\\\"https://api.unsplash.com/users/markusspiske/following\\\",\\\"followers\\\":\\\"https://api.unsplash.com/users/markusspiske/followers\\\"}},\\\"current_user_collections\\\":[],\\\"urls\\\":{\\\"raw\\\":\\\"https://images.unsplash.com/photo-1466690519659-283ca81adf97\\\",\\\"full\\\":\\\"https://images.unsplash.com/photo-1466690519659-283ca81adf97?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=36530fbd96d3955e48a6976fe729298a\\\",\\\"regular\\\":\\\"https://images.unsplash.com/photo-1466690519659-283ca81adf97?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=17d4e7659bc857c2ff20a39ed2acc660\\\",\\\"small\\\":\\\"https://images.unsplash.com/photo-1466690519659-283ca81adf97?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=a4ed40db64a2ee9bd0de26f10d26bba7\\\",\\\"thumb\\\":\\\"https://images.unsplash.com/photo-1466690519659-283ca81adf97?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=2acc7e54461b533a366f0f35623e20d4\\\"},\\\"categories\\\":[],\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/photos/5KvErlbdeyo\\\",\\\"html\\\":\\\"https://unsplash.com/photos/5KvErlbdeyo\\\",\\\"download\\\":\\\"https://unsplash.com/photos/5KvErlbdeyo/download\\\",\\\"download_location\\\":\\\"https://api.unsplash.com/photos/5KvErlbdeyo/download\\\"}},{\\\"id\\\":\\\"B2KgTWnNBd4\\\",\\\"created_at\\\":\\\"2015-01-25T17:29:46-05:00\\\",\\\"updated_at\\\":\\\"2017-10-03T14:00:55-04:00\\\",\\\"width\\\":4368,\\\"height\\\":2912,\\\"color\\\":\\\"#74755A\\\",\\\"likes\\\":71,\\\"liked_by_user\\\":false,\\\"description\\\":null,\\\"user\\\":{\\\"id\\\":\\\"T4DYyWhpUZw\\\",\\\"updated_at\\\":\\\"2017-10-06T07:53:41-04:00\\\",\\\"username\\\":\\\"redevo\\\",\\\"name\\\":\\\"Dave Robinson\\\",\\\"first_name\\\":\\\"Dave\\\",\\\"last_name\\\":\\\"Robinson\\\",\\\"twitter_username\\\":\\\"davefrombarrow\\\",\\\"portfolio_url\\\":\\\"http://twitter.com/davefrombarrow\\\",\\\"bio\\\":\\\"Inbound agency owner, retained firefighter, ballroom dancer and drummer.\\\",\\\"location\\\":\\\"Aboyne, Scotland\\\",\\\"total_likes\\\":0,\\\"total_photos\\\":49,\\\"total_collections\\\":0,\\\"profile_image\\\":{\\\"small\\\":\\\"https://images.unsplash.com/profile-1495554831880-c3e0f0c53075?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=49549d48244c5e2c614d1230882c13a6\\\",\\\"medium\\\":\\\"https://images.unsplash.com/profile-1495554831880-c3e0f0c53075?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=0d61d06e20b5266a32e1db37bf71c211\\\",\\\"large\\\":\\\"https://images.unsplash.com/profile-1495554831880-c3e0f0c53075?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=8489df33d86740a8ed88c99382a0f5f0\\\"},\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/users/redevo\\\",\\\"html\\\":\\\"https://unsplash.com/@redevo\\\",\\\"photos\\\":\\\"https://api.unsplash.com/users/redevo/photos\\\",\\\"likes\\\":\\\"https://api.unsplash.com/users/redevo/likes\\\",\\\"portfolio\\\":\\\"https://api.unsplash.com/users/redevo/portfolio\\\",\\\"following\\\":\\\"https://api.unsplash.com/users/redevo/following\\\",\\\"followers\\\":\\\"https://api.unsplash.com/users/redevo/followers\\\"}},\\\"current_user_collections\\\":[],\\\"urls\\\":{\\\"raw\\\":\\\"https://images.unsplash.com/photo-1422224832140-0e546210efc3\\\",\\\"full\\\":\\\"https://images.unsplash.com/photo-1422224832140-0e546210efc3?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=a5f80b56c6a957fb53b08004192d8fb7\\\",\\\"regular\\\":\\\"https://images.unsplash.com/photo-1422224832140-0e546210efc3?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=bb0478264ac2720d028b790d77538323\\\",\\\"small\\\":\\\"https://images.unsplash.com/photo-1422224832140-0e546210efc3?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=f323466ff99823f9946860dfed4196a1\\\",\\\"thumb\\\":\\\"https://images.unsplash.com/photo-1422224832140-0e546210efc3?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=282fcaa48a9b2042b8508977a120ef99\\\"},\\\"categories\\\":[],\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/photos/B2KgTWnNBd4\\\",\\\"html\\\":\\\"https://unsplash.com/photos/B2KgTWnNBd4\\\",\\\"download\\\":\\\"https://unsplash.com/photos/B2KgTWnNBd4/download\\\",\\\"download_location\\\":\\\"https://api.unsplash.com/photos/B2KgTWnNBd4/download\\\"}},{\\\"id\\\":\\\"Gc7Ahec__XQ\\\",\\\"created_at\\\":\\\"2017-07-31T16:32:34-04:00\\\",\\\"updated_at\\\":\\\"2017-10-07T04:23:26-04:00\\\",\\\"width\\\":3961,\\\"height\\\":5941,\\\"color\\\":\\\"#FEF7FB\\\",\\\"likes\\\":89,\\\"liked_by_user\\\":false,\\\"description\\\":null,\\\"user\\\":{\\\"id\\\":\\\"mygX5zA-01o\\\",\\\"updated_at\\\":\\\"2017-10-06T11:58:05-04:00\\\",\\\"username\\\":\\\"ckirby\\\",\\\"name\\\":\\\"Cameron Kirby\\\",\\\"first_name\\\":\\\"Cameron\\\",\\\"last_name\\\":\\\"Kirby\\\",\\\"twitter_username\\\":\\\"cameronmkirby\\\",\\\"portfolio_url\\\":\\\"http://www.cameronmkirby.com/digitaldownloads\\\",\\\"bio\\\":\\\"You're great. \\\",\\\"location\\\":\\\"SLC, UT\\\",\\\"total_likes\\\":53,\\\"total_photos\\\":94,\\\"total_collections\\\":0,\\\"profile_image\\\":{\\\"small\\\":\\\"https://images.unsplash.com/profile-1507257293189-39b0b24922fe?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=6c06558390a8eabf4526d67226f39784\\\",\\\"medium\\\":\\\"https://images.unsplash.com/profile-1507257293189-39b0b24922fe?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=2965983be9522d7dbdd3eeb4973ca60c\\\",\\\"large\\\":\\\"https://images.unsplash.com/profile-1507257293189-39b0b24922fe?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=66f8f3929a6feb6b0938efde9b57472d\\\"},\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/users/ckirby\\\",\\\"html\\\":\\\"https://unsplash.com/@ckirby\\\",\\\"photos\\\":\\\"https://api.unsplash.com/users/ckirby/photos\\\",\\\"likes\\\":\\\"https://api.unsplash.com/users/ckirby/likes\\\",\\\"portfolio\\\":\\\"https://api.unsplash.com/users/ckirby/portfolio\\\",\\\"following\\\":\\\"https://api.unsplash.com/users/ckirby/following\\\",\\\"followers\\\":\\\"https://api.unsplash.com/users/ckirby/followers\\\"}},\\\"current_user_collections\\\":[],\\\"urls\\\":{\\\"raw\\\":\\\"https://images.unsplash.com/photo-1501533123-e62013cabb4f\\\",\\\"full\\\":\\\"https://images.unsplash.com/photo-1501533123-e62013cabb4f?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=b9113e3ab1db2e5cdea56e73178feb4c\\\",\\\"regular\\\":\\\"https://images.unsplash.com/photo-1501533123-e62013cabb4f?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=2f949dbd1379410869552799864e9886\\\",\\\"small\\\":\\\"https://images.unsplash.com/photo-1501533123-e62013cabb4f?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=dbfc175c935d72f57acf7798862e922b\\\",\\\"thumb\\\":\\\"https://images.unsplash.com/photo-1501533123-e62013cabb4f?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=512f925f7e8b03b6603e0f82d19d95bd\\\"},\\\"categories\\\":[],\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/photos/Gc7Ahec__XQ\\\",\\\"html\\\":\\\"https://unsplash.com/photos/Gc7Ahec__XQ\\\",\\\"download\\\":\\\"https://unsplash.com/photos/Gc7Ahec__XQ/download\\\",\\\"download_location\\\":\\\"https://api.unsplash.com/photos/Gc7Ahec__XQ/download\\\"}},{\\\"id\\\":\\\"01Qqkfz-ck8\\\",\\\"created_at\\\":\\\"2016-10-28T19:22:52-04:00\\\",\\\"updated_at\\\":\\\"2017-10-05T06:39:52-04:00\\\",\\\"width\\\":5184,\\\"height\\\":3456,\\\"color\\\":\\\"#BBB9C6\\\",\\\"likes\\\":173,\\\"liked_by_user\\\":false,\\\"description\\\":\\\"A drone shot of the treetops in a coniferous forest\\\",\\\"user\\\":{\\\"id\\\":\\\"fxhATpS_SgQ\\\",\\\"updated_at\\\":\\\"2017-10-07T08:19:35-04:00\\\",\\\"username\\\":\\\"noahsilliman\\\",\\\"name\\\":\\\"Noah Silliman\\\",\\\"first_name\\\":\\\"Noah\\\",\\\"last_name\\\":\\\"Silliman\\\",\\\"twitter_username\\\":\\\"DanielThorndyk1\\\",\\\"portfolio_url\\\":\\\"https://soundcloud.com/user-388635053\\\",\\\"bio\\\":\\\"Welcome to Noah Silliman Photography! If you like my photography be sure to check out my instrgram page: @NoahSilliman and my music in the link above. Thank you, and Enjoy!\\\",\\\"location\\\":null,\\\"total_likes\\\":324,\\\"total_photos\\\":45,\\\"total_collections\\\":0,\\\"profile_image\\\":{\\\"small\\\":\\\"https://images.unsplash.com/profile-1504297927268-15a68a102765?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=c639c77ca15436fe928ec2014fd2fc65\\\",\\\"medium\\\":\\\"https://images.unsplash.com/profile-1504297927268-15a68a102765?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=c7a7f6e41d40643d40288a714300176a\\\",\\\"large\\\":\\\"https://images.unsplash.com/profile-1504297927268-15a68a102765?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=110b794ae846d849d408edec30964cc8\\\"},\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/users/noahsilliman\\\",\\\"html\\\":\\\"https://unsplash.com/@noahsilliman\\\",\\\"photos\\\":\\\"https://api.unsplash.com/users/noahsilliman/photos\\\",\\\"likes\\\":\\\"https://api.unsplash.com/users/noahsilliman/likes\\\",\\\"portfolio\\\":\\\"https://api.unsplash.com/users/noahsilliman/portfolio\\\",\\\"following\\\":\\\"https://api.unsplash.com/users/noahsilliman/following\\\",\\\"followers\\\":\\\"https://api.unsplash.com/users/noahsilliman/followers\\\"}},\\\"current_user_collections\\\":[],\\\"urls\\\":{\\\"raw\\\":\\\"https://images.unsplash.com/photo-1477696957384-3b1d731c4cff\\\",\\\"full\\\":\\\"https://images.unsplash.com/photo-1477696957384-3b1d731c4cff?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=b39b330aa10a485f612e2c22f0122759\\\",\\\"regular\\\":\\\"https://images.unsplash.com/photo-1477696957384-3b1d731c4cff?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=348b8399aa950ad48e99ace7d9592b37\\\",\\\"small\\\":\\\"https://images.unsplash.com/photo-1477696957384-3b1d731c4cff?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=8da15f22bfc5f7da6b83fc80b5337e22\\\",\\\"thumb\\\":\\\"https://images.unsplash.com/photo-1477696957384-3b1d731c4cff?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=5bcc4dd7d530087e6e9d1d6bb4326bb2\\\"},\\\"categories\\\":[],\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/photos/01Qqkfz-ck8\\\",\\\"html\\\":\\\"https://unsplash.com/photos/01Qqkfz-ck8\\\",\\\"download\\\":\\\"https://unsplash.com/photos/01Qqkfz-ck8/download\\\",\\\"download_location\\\":\\\"https://api.unsplash.com/photos/01Qqkfz-ck8/download\\\"}},{\\\"id\\\":\\\"15d_4S2tJsQ\\\",\\\"created_at\\\":\\\"2016-01-14T22:57:54-05:00\\\",\\\"updated_at\\\":\\\"2017-10-06T08:05:42-04:00\\\",\\\"width\\\":5760,\\\"height\\\":3840,\\\"color\\\":\\\"#D3D1C7\\\",\\\"likes\\\":89,\\\"liked_by_user\\\":false,\\\"description\\\":null,\\\"user\\\":{\\\"id\\\":\\\"Org6rBPeeAQ\\\",\\\"updated_at\\\":\\\"2017-10-07T08:25:50-04:00\\\",\\\"username\\\":\\\"garciasaldana_\\\",\\\"name\\\":\\\"Pablo Garcia Saldaña\\\",\\\"first_name\\\":\\\"Pablo\\\",\\\"last_name\\\":\\\"Garcia Saldaña\\\",\\\"twitter_username\\\":\\\"pagsa__\\\",\\\"portfolio_url\\\":\\\"http://www.garciasaldana.com\\\",\\\"bio\\\":\\\"Self taught cinematographer and landscape photographer. \\\\r\\\\nFound love in photography thanks to the revolution of DSLR´s.\\\\r\\\\nCurrently living in Mexico City, he works as an \\\\r\\\\nindependent filmmaker and a photography instructor,  feel free to contact me.\\\",\\\"location\\\":\\\"Mexico,City\\\",\\\"total_likes\\\":84,\\\"total_photos\\\":84,\\\"total_collections\\\":1,\\\"profile_image\\\":{\\\"small\\\":\\\"https://images.unsplash.com/profile-1463699072698-7e90bcd253f6?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=55bcfd54d3c4194e10b4b4605554ecbe\\\",\\\"medium\\\":\\\"https://images.unsplash.com/profile-1463699072698-7e90bcd253f6?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=ef196da84273dd247a483dfe32ed5507\\\",\\\"large\\\":\\\"https://images.unsplash.com/profile-1463699072698-7e90bcd253f6?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=b6e6e6925b91cb6c8059dde0e9b3341f\\\"},\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/users/garciasaldana_\\\",\\\"html\\\":\\\"https://unsplash.com/@garciasaldana_\\\",\\\"photos\\\":\\\"https://api.unsplash.com/users/garciasaldana_/photos\\\",\\\"likes\\\":\\\"https://api.unsplash.com/users/garciasaldana_/likes\\\",\\\"portfolio\\\":\\\"https://api.unsplash.com/users/garciasaldana_/portfolio\\\",\\\"following\\\":\\\"https://api.unsplash.com/users/garciasaldana_/following\\\",\\\"followers\\\":\\\"https://api.unsplash.com/users/garciasaldana_/followers\\\"}},\\\"current_user_collections\\\":[],\\\"urls\\\":{\\\"raw\\\":\\\"https://images.unsplash.com/photo-1452830015922-20ec8cfc86be\\\",\\\"full\\\":\\\"https://images.unsplash.com/photo-1452830015922-20ec8cfc86be?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=40a32c25dee561d6fddb5904778dfbd3\\\",\\\"regular\\\":\\\"https://images.unsplash.com/photo-1452830015922-20ec8cfc86be?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=3a09edd18a98966cfeb2c8132b9be263\\\",\\\"small\\\":\\\"https://images.unsplash.com/photo-1452830015922-20ec8cfc86be?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=1523a8d8e4399db0c8858293fc6fb9ec\\\",\\\"thumb\\\":\\\"https://images.unsplash.com/photo-1452830015922-20ec8cfc86be?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=6919001f6b60aba21d688a6c73fff03f\\\"},\\\"categories\\\":[],\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/photos/15d_4S2tJsQ\\\",\\\"html\\\":\\\"https://unsplash.com/photos/15d_4S2tJsQ\\\",\\\"download\\\":\\\"https://unsplash.com/photos/15d_4S2tJsQ/download\\\",\\\"download_location\\\":\\\"https://api.unsplash.com/photos/15d_4S2tJsQ/download\\\"}},{\\\"id\\\":\\\"2ShvY8Lf6l0\\\",\\\"created_at\\\":\\\"2015-03-12T10:20:52-04:00\\\",\\\"updated_at\\\":\\\"2017-10-04T02:42:24-04:00\\\",\\\"width\\\":2560,\\\"height\\\":1440,\\\"color\\\":\\\"#4A3A21\\\",\\\"likes\\\":276,\\\"liked_by_user\\\":false,\\\"description\\\":\\\"Grass and trees in a forest with rays of sunlight peeking through\\\",\\\"user\\\":{\\\"id\\\":\\\"X_PlSruZcfs\\\",\\\"updated_at\\\":\\\"2017-09-28T05:22:55-04:00\\\",\\\"username\\\":\\\"szmigieldesign\\\",\\\"name\\\":\\\"Lukasz Szmigiel\\\",\\\"first_name\\\":\\\"Lukasz\\\",\\\"last_name\\\":\\\"Szmigiel\\\",\\\"twitter_username\\\":null,\\\"portfolio_url\\\":\\\"http://photography.szmigieldesign.pl\\\",\\\"bio\\\":\\\"Spectator, anthropologist, introvert, atheist. Takes photographs from the need of exploration. Deeply fascinated by culture. Privately - a perfectionist whose quest in life is to seek peace, good coffee and chocolate covered cookies. \\\",\\\"location\\\":\\\"Poland\\\",\\\"total_likes\\\":79,\\\"total_photos\\\":110,\\\"total_collections\\\":0,\\\"profile_image\\\":{\\\"small\\\":\\\"https://images.unsplash.com/profile-1441974180349-689b9b920fea?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=0e8a8022daeae1a79649afe1db35f85c\\\",\\\"medium\\\":\\\"https://images.unsplash.com/profile-1441974180349-689b9b920fea?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=e8b9ef70b38e76c9ffd349c57bc7f3fa\\\",\\\"large\\\":\\\"https://images.unsplash.com/profile-1441974180349-689b9b920fea?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=30da3e1447fc48279f9171e08dcc2aa8\\\"},\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/users/szmigieldesign\\\",\\\"html\\\":\\\"https://unsplash.com/@szmigieldesign\\\",\\\"photos\\\":\\\"https://api.unsplash.com/users/szmigieldesign/photos\\\",\\\"likes\\\":\\\"https://api.unsplash.com/users/szmigieldesign/likes\\\",\\\"portfolio\\\":\\\"https://api.unsplash.com/users/szmigieldesign/portfolio\\\",\\\"following\\\":\\\"https://api.unsplash.com/users/szmigieldesign/following\\\",\\\"followers\\\":\\\"https://api.unsplash.com/users/szmigieldesign/followers\\\"}},\\\"current_user_collections\\\":[],\\\"urls\\\":{\\\"raw\\\":\\\"https://images.unsplash.com/photo-1426170042593-200f250dfdaf\\\",\\\"full\\\":\\\"https://images.unsplash.com/photo-1426170042593-200f250dfdaf?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=6487e7bd0efc74ea522287c03103228f\\\",\\\"regular\\\":\\\"https://images.unsplash.com/photo-1426170042593-200f250dfdaf?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=8183c45b5a6187b6674f4dfa8d0a644b\\\",\\\"small\\\":\\\"https://images.unsplash.com/photo-1426170042593-200f250dfdaf?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=4c10f3b68479b4e893ceb5e67e378931\\\",\\\"thumb\\\":\\\"https://images.unsplash.com/photo-1426170042593-200f250dfdaf?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=bc5b5ce14a71185bda5894ab3e1ebd21\\\"},\\\"categories\\\":[],\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/photos/2ShvY8Lf6l0\\\",\\\"html\\\":\\\"https://unsplash.com/photos/2ShvY8Lf6l0\\\",\\\"download\\\":\\\"https://unsplash.com/photos/2ShvY8Lf6l0/download\\\",\\\"download_location\\\":\\\"https://api.unsplash.com/photos/2ShvY8Lf6l0/download\\\"}},{\\\"id\\\":\\\"GmL0s_u6H9E\\\",\\\"created_at\\\":\\\"2015-08-11T00:14:21-04:00\\\",\\\"updated_at\\\":\\\"2017-10-02T20:59:33-04:00\\\",\\\"width\\\":5472,\\\"height\\\":3382,\\\"color\\\":\\\"#3F341C\\\",\\\"likes\\\":51,\\\"liked_by_user\\\":false,\\\"description\\\":\\\"A pond in a forest in Kuitpo Forest Reserve\\\",\\\"user\\\":{\\\"id\\\":\\\"kMNkot28eOU\\\",\\\"updated_at\\\":\\\"2017-10-07T08:22:20-04:00\\\",\\\"username\\\":\\\"mkwlsn\\\",\\\"name\\\":\\\"Mike Wilson\\\",\\\"first_name\\\":\\\"Mike\\\",\\\"last_name\\\":\\\"Wilson\\\",\\\"twitter_username\\\":\\\"savilleknight\\\",\\\"portfolio_url\\\":\\\"http://mikewilson.com.au\\\",\\\"bio\\\":\\\"Street Photography | New Topography  | Unsplash Featured Photographer | See more on Instagram at @mkwlsn\\\",\\\"location\\\":\\\"Australia\\\",\\\"total_likes\\\":690,\\\"total_photos\\\":478,\\\"total_collections\\\":0,\\\"profile_image\\\":{\\\"small\\\":\\\"https://images.unsplash.com/profile-1500855728366-723cb2ce843b?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=afd1ef7be01d91d280a9e64e3f048016\\\",\\\"medium\\\":\\\"https://images.unsplash.com/profile-1500855728366-723cb2ce843b?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=929665d6ed5dd95416340b4eadea72dd\\\",\\\"large\\\":\\\"https://images.unsplash.com/profile-1500855728366-723cb2ce843b?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=d72e71c6c3bc5e1acc46dd2b44e599e2\\\"},\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/users/mkwlsn\\\",\\\"html\\\":\\\"https://unsplash.com/@mkwlsn\\\",\\\"photos\\\":\\\"https://api.unsplash.com/users/mkwlsn/photos\\\",\\\"likes\\\":\\\"https://api.unsplash.com/users/mkwlsn/likes\\\",\\\"portfolio\\\":\\\"https://api.unsplash.com/users/mkwlsn/portfolio\\\",\\\"following\\\":\\\"https://api.unsplash.com/users/mkwlsn/following\\\",\\\"followers\\\":\\\"https://api.unsplash.com/users/mkwlsn/followers\\\"}},\\\"current_user_collections\\\":[],\\\"urls\\\":{\\\"raw\\\":\\\"https://images.unsplash.com/photo-1439266347198-c9449544ac7d\\\",\\\"full\\\":\\\"https://images.unsplash.com/photo-1439266347198-c9449544ac7d?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=e1c8dac27afcc73c8c6cd451acfe0cce\\\",\\\"regular\\\":\\\"https://images.unsplash.com/photo-1439266347198-c9449544ac7d?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=a75b98b6cb96d5dc79ba79233ecfc3d4\\\",\\\"small\\\":\\\"https://images.unsplash.com/photo-1439266347198-c9449544ac7d?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=268a102379723a1e3c8e7708985caab7\\\",\\\"thumb\\\":\\\"https://images.unsplash.com/photo-1439266347198-c9449544ac7d?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=a354f97d5cb7e0315f48cad45dd32f4e\\\"},\\\"categories\\\":[],\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/photos/GmL0s_u6H9E\\\",\\\"html\\\":\\\"https://unsplash.com/photos/GmL0s_u6H9E\\\",\\\"download\\\":\\\"https://unsplash.com/photos/GmL0s_u6H9E/download\\\",\\\"download_location\\\":\\\"https://api.unsplash.com/photos/GmL0s_u6H9E/download\\\"}},{\\\"id\\\":\\\"qKFxQ3X-YbI\\\",\\\"created_at\\\":\\\"2014-12-08T14:06:50-05:00\\\",\\\"updated_at\\\":\\\"2017-10-07T08:23:49-04:00\\\",\\\"width\\\":2200,\\\"height\\\":1467,\\\"color\\\":\\\"#6E7C82\\\",\\\"likes\\\":260,\\\"liked_by_user\\\":false,\\\"description\\\":\\\"A pale shot of tall conifers in thick fog\\\",\\\"user\\\":{\\\"id\\\":\\\"-rcrJA1bVtQ\\\",\\\"updated_at\\\":\\\"2017-10-05T14:34:38-04:00\\\",\\\"username\\\":\\\"jaymantri\\\",\\\"name\\\":\\\"Jay Mantri\\\",\\\"first_name\\\":\\\"Jay\\\",\\\"last_name\\\":\\\"Mantri\\\",\\\"twitter_username\\\":\\\"jaymantri\\\",\\\"portfolio_url\\\":\\\"http://jaymantri.com/\\\",\\\"bio\\\":\\\"Designer by day, burger monster by night.\\\",\\\"location\\\":\\\"Los Angeles, California\\\",\\\"total_likes\\\":0,\\\"total_photos\\\":5,\\\"total_collections\\\":0,\\\"profile_image\\\":{\\\"small\\\":\\\"https://images.unsplash.com/profile-1503027684826-c9c642529b92?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=79a040d28c55609e74afab8c51b2856b\\\",\\\"medium\\\":\\\"https://images.unsplash.com/profile-1503027684826-c9c642529b92?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=29f24b986f22a6e49fb8a776717bc79e\\\",\\\"large\\\":\\\"https://images.unsplash.com/profile-1503027684826-c9c642529b92?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=d5c52153d40ec3d66a93cd3d913dd612\\\"},\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/users/jaymantri\\\",\\\"html\\\":\\\"https://unsplash.com/@jaymantri\\\",\\\"photos\\\":\\\"https://api.unsplash.com/users/jaymantri/photos\\\",\\\"likes\\\":\\\"https://api.unsplash.com/users/jaymantri/likes\\\",\\\"portfolio\\\":\\\"https://api.unsplash.com/users/jaymantri/portfolio\\\",\\\"following\\\":\\\"https://api.unsplash.com/users/jaymantri/following\\\",\\\"followers\\\":\\\"https://api.unsplash.com/users/jaymantri/followers\\\"}},\\\"current_user_collections\\\":[],\\\"urls\\\":{\\\"raw\\\":\\\"https://images.unsplash.com/photo-1418065514041-ace6539f65cf\\\",\\\"full\\\":\\\"https://images.unsplash.com/photo-1418065514041-ace6539f65cf?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=a62a4d447ae1a50b288a94caba64a786\\\",\\\"regular\\\":\\\"https://images.unsplash.com/photo-1418065514041-ace6539f65cf?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=31fe42a62c7b19bbaedccdb547cff287\\\",\\\"small\\\":\\\"https://images.unsplash.com/photo-1418065514041-ace6539f65cf?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=840fd3436593da7b10f574a7c188377b\\\",\\\"thumb\\\":\\\"https://images.unsplash.com/photo-1418065514041-ace6539f65cf?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=aac1d3febf911d4f311311dc7eba827c\\\"},\\\"categories\\\":[],\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/photos/qKFxQ3X-YbI\\\",\\\"html\\\":\\\"https://unsplash.com/photos/qKFxQ3X-YbI\\\",\\\"download\\\":\\\"https://unsplash.com/photos/qKFxQ3X-YbI/download\\\",\\\"download_location\\\":\\\"https://api.unsplash.com/photos/qKFxQ3X-YbI/download\\\"}},{\\\"id\\\":\\\"y1fcIQhSu7Q\\\",\\\"created_at\\\":\\\"2015-09-04T23:08:21-04:00\\\",\\\"updated_at\\\":\\\"2017-10-05T13:28:42-04:00\\\",\\\"width\\\":3840,\\\"height\\\":2160,\\\"color\\\":\\\"#5E6051\\\",\\\"likes\\\":193,\\\"liked_by_user\\\":false,\\\"description\\\":\\\"A low-angle shot of a foggy forest\\\",\\\"user\\\":{\\\"id\\\":\\\"w7sRH2QJ60U\\\",\\\"updated_at\\\":\\\"2017-09-22T08:44:15-04:00\\\",\\\"username\\\":\\\"evondeveloper\\\",\\\"name\\\":\\\"Trần Anh Tuấn\\\",\\\"first_name\\\":\\\"Trần Anh\\\",\\\"last_name\\\":\\\"Tuấn\\\",\\\"twitter_username\\\":null,\\\"portfolio_url\\\":null,\\\"bio\\\":\\\"\\\",\\\"location\\\":null,\\\"total_likes\\\":0,\\\"total_photos\\\":2,\\\"total_collections\\\":0,\\\"profile_image\\\":{\\\"small\\\":\\\"https://images.unsplash.com/profile-fb-1441422426-f3d0862e9002.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=5d6e076effd59938ba755c5428da815c\\\",\\\"medium\\\":\\\"https://images.unsplash.com/profile-fb-1441422426-f3d0862e9002.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=36d2963bc61d7f9be3d9b5c6e5f5d3c5\\\",\\\"large\\\":\\\"https://images.unsplash.com/profile-fb-1441422426-f3d0862e9002.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=4c9a86b28e7688d5786eaf3baa6b053d\\\"},\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/users/evondeveloper\\\",\\\"html\\\":\\\"https://unsplash.com/@evondeveloper\\\",\\\"photos\\\":\\\"https://api.unsplash.com/users/evondeveloper/photos\\\",\\\"likes\\\":\\\"https://api.unsplash.com/users/evondeveloper/likes\\\",\\\"portfolio\\\":\\\"https://api.unsplash.com/users/evondeveloper/portfolio\\\",\\\"following\\\":\\\"https://api.unsplash.com/users/evondeveloper/following\\\",\\\"followers\\\":\\\"https://api.unsplash.com/users/evondeveloper/followers\\\"}},\\\"current_user_collections\\\":[],\\\"urls\\\":{\\\"raw\\\":\\\"https://images.unsplash.com/photo-1441422454217-519d3ee81350\\\",\\\"full\\\":\\\"https://images.unsplash.com/photo-1441422454217-519d3ee81350?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=d366ff4575a0492bafc1cb477f53e6eb\\\",\\\"regular\\\":\\\"https://images.unsplash.com/photo-1441422454217-519d3ee81350?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=b18319d5a2e69eb7a1e5737cea8184df\\\",\\\"small\\\":\\\"https://images.unsplash.com/photo-1441422454217-519d3ee81350?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=9225d2b71f84087a73cd417568611b81\\\",\\\"thumb\\\":\\\"https://images.unsplash.com/photo-1441422454217-519d3ee81350?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=b5229a58410b23c74a38db8cb4990129\\\"},\\\"categories\\\":[],\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/photos/y1fcIQhSu7Q\\\",\\\"html\\\":\\\"https://unsplash.com/photos/y1fcIQhSu7Q\\\",\\\"download\\\":\\\"https://unsplash.com/photos/y1fcIQhSu7Q/download\\\",\\\"download_location\\\":\\\"https://api.unsplash.com/photos/y1fcIQhSu7Q/download\\\"}},{\\\"id\\\":\\\"P3DxOe-OJGA\\\",\\\"created_at\\\":\\\"2017-04-17T23:31:07-04:00\\\",\\\"updated_at\\\":\\\"2017-10-02T23:41:03-04:00\\\",\\\"width\\\":4000,\\\"height\\\":6000,\\\"color\\\":\\\"#D0CFD5\\\",\\\"likes\\\":252,\\\"liked_by_user\\\":false,\\\"description\\\":\\\"An evergreen forest with moss covering everything from tree trunks to fallen logs on the ground\\\",\\\"user\\\":{\\\"id\\\":\\\"j6QxoEZ0SdY\\\",\\\"updated_at\\\":\\\"2017-09-22T15:33:51-04:00\\\",\\\"username\\\":\\\"dsamps\\\",\\\"name\\\":\\\"Tuce\\\",\\\"first_name\\\":\\\"Tuce \\\",\\\"last_name\\\":null,\\\"twitter_username\\\":null,\\\"portfolio_url\\\":null,\\\"bio\\\":\\\"\\\",\\\"location\\\":\\\"Portland,Oregon\\\",\\\"total_likes\\\":237,\\\"total_photos\\\":57,\\\"total_collections\\\":0,\\\"profile_image\\\":{\\\"small\\\":\\\"https://images.unsplash.com/profile-1492486386449-040748f86c57?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=93d1afdfc6daf337fe1e02b668c27399\\\",\\\"medium\\\":\\\"https://images.unsplash.com/profile-1492486386449-040748f86c57?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=b4e4e525caae257da1d81389664ed704\\\",\\\"large\\\":\\\"https://images.unsplash.com/profile-1492486386449-040748f86c57?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=32621cc08924a9659b4f61abcd656462\\\"},\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/users/dsamps\\\",\\\"html\\\":\\\"https://unsplash.com/@dsamps\\\",\\\"photos\\\":\\\"https://api.unsplash.com/users/dsamps/photos\\\",\\\"likes\\\":\\\"https://api.unsplash.com/users/dsamps/likes\\\",\\\"portfolio\\\":\\\"https://api.unsplash.com/users/dsamps/portfolio\\\",\\\"following\\\":\\\"https://api.unsplash.com/users/dsamps/following\\\",\\\"followers\\\":\\\"https://api.unsplash.com/users/dsamps/followers\\\"}},\\\"current_user_collections\\\":[],\\\"urls\\\":{\\\"raw\\\":\\\"https://images.unsplash.com/photo-1492486169476-8c5dafd9539f\\\",\\\"full\\\":\\\"https://images.unsplash.com/photo-1492486169476-8c5dafd9539f?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=31449365a69e1cb9e9d042f8ddf11027\\\",\\\"regular\\\":\\\"https://images.unsplash.com/photo-1492486169476-8c5dafd9539f?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=a138fe7946d6f028d3ae31e8bbb35176\\\",\\\"small\\\":\\\"https://images.unsplash.com/photo-1492486169476-8c5dafd9539f?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=ab6d05cf92f8420278c1917f9828b39f\\\",\\\"thumb\\\":\\\"https://images.unsplash.com/photo-1492486169476-8c5dafd9539f?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=673f5ff4cc24ce080a7677fa643c578a\\\"},\\\"categories\\\":[],\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/photos/P3DxOe-OJGA\\\",\\\"html\\\":\\\"https://unsplash.com/photos/P3DxOe-OJGA\\\",\\\"download\\\":\\\"https://unsplash.com/photos/P3DxOe-OJGA/download\\\",\\\"download_location\\\":\\\"https://api.unsplash.com/photos/P3DxOe-OJGA/download\\\"}},{\\\"id\\\":\\\"_NM6bXPqaCE\\\",\\\"created_at\\\":\\\"2017-03-02T16:18:25-05:00\\\",\\\"updated_at\\\":\\\"2017-10-05T10:56:23-04:00\\\",\\\"width\\\":4000,\\\"height\\\":3000,\\\"color\\\":\\\"#CDC7D1\\\",\\\"likes\\\":149,\\\"liked_by_user\\\":false,\\\"description\\\":null,\\\"user\\\":{\\\"id\\\":\\\"YnibqGr-KNg\\\",\\\"updated_at\\\":\\\"2017-10-07T07:58:42-04:00\\\",\\\"username\\\":\\\"geran\\\",\\\"name\\\":\\\"Geran de Klerk\\\",\\\"first_name\\\":\\\"Geran\\\",\\\"last_name\\\":\\\"de Klerk\\\",\\\"twitter_username\\\":\\\"gerandeklerk\\\",\\\"portfolio_url\\\":\\\"http://instagram.com/gerandeklerk\\\",\\\"bio\\\":\\\"Pro geek. Terrible dancer. Instagram: @gerandeklerk\\\",\\\"location\\\":\\\"Stockholm\\\",\\\"total_likes\\\":0,\\\"total_photos\\\":27,\\\"total_collections\\\":0,\\\"profile_image\\\":{\\\"small\\\":\\\"https://images.unsplash.com/profile-1473772909536-f17a8ab90189?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=0b1baeab58943038fc51c307a5fcd179\\\",\\\"medium\\\":\\\"https://images.unsplash.com/profile-1473772909536-f17a8ab90189?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=c87e22bae2beabcb5508ad792563db36\\\",\\\"large\\\":\\\"https://images.unsplash.com/profile-1473772909536-f17a8ab90189?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=0ff9a3f929230212d08af0ff442ca010\\\"},\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/users/geran\\\",\\\"html\\\":\\\"https://unsplash.com/@geran\\\",\\\"photos\\\":\\\"https://api.unsplash.com/users/geran/photos\\\",\\\"likes\\\":\\\"https://api.unsplash.com/users/geran/likes\\\",\\\"portfolio\\\":\\\"https://api.unsplash.com/users/geran/portfolio\\\",\\\"following\\\":\\\"https://api.unsplash.com/users/geran/following\\\",\\\"followers\\\":\\\"https://api.unsplash.com/users/geran/followers\\\"}},\\\"current_user_collections\\\":[],\\\"urls\\\":{\\\"raw\\\":\\\"https://images.unsplash.com/photo-1488489153583-89ce18dd4968\\\",\\\"full\\\":\\\"https://images.unsplash.com/photo-1488489153583-89ce18dd4968?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=25a1b12b02decdc46993294c33d681aa\\\",\\\"regular\\\":\\\"https://images.unsplash.com/photo-1488489153583-89ce18dd4968?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=9d153db781a2abad025554eb64369fc2\\\",\\\"small\\\":\\\"https://images.unsplash.com/photo-1488489153583-89ce18dd4968?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=b84a97adc9103543f530ebcc7e985d69\\\",\\\"thumb\\\":\\\"https://images.unsplash.com/photo-1488489153583-89ce18dd4968?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=ad59fa9b105e2364b770f266d72979d3\\\"},\\\"categories\\\":[],\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/photos/_NM6bXPqaCE\\\",\\\"html\\\":\\\"https://unsplash.com/photos/_NM6bXPqaCE\\\",\\\"download\\\":\\\"https://unsplash.com/photos/_NM6bXPqaCE/download\\\",\\\"download_location\\\":\\\"https://api.unsplash.com/photos/_NM6bXPqaCE/download\\\"}},{\\\"id\\\":\\\"Kcxv7Gz7wmw\\\",\\\"created_at\\\":\\\"2017-05-21T15:36:18-04:00\\\",\\\"updated_at\\\":\\\"2017-10-02T14:39:47-04:00\\\",\\\"width\\\":3648,\\\"height\\\":5340,\\\"color\\\":\\\"#FDFDFB\\\",\\\"likes\\\":138,\\\"liked_by_user\\\":false,\\\"description\\\":\\\"A blonde woman strolling along a sunlit path through the forest in Nynäshamn\\\",\\\"user\\\":{\\\"id\\\":\\\"YnibqGr-KNg\\\",\\\"updated_at\\\":\\\"2017-10-07T07:58:42-04:00\\\",\\\"username\\\":\\\"geran\\\",\\\"name\\\":\\\"Geran de Klerk\\\",\\\"first_name\\\":\\\"Geran\\\",\\\"last_name\\\":\\\"de Klerk\\\",\\\"twitter_username\\\":\\\"gerandeklerk\\\",\\\"portfolio_url\\\":\\\"http://instagram.com/gerandeklerk\\\",\\\"bio\\\":\\\"Pro geek. Terrible dancer. Instagram: @gerandeklerk\\\",\\\"location\\\":\\\"Stockholm\\\",\\\"total_likes\\\":0,\\\"total_photos\\\":27,\\\"total_collections\\\":0,\\\"profile_image\\\":{\\\"small\\\":\\\"https://images.unsplash.com/profile-1473772909536-f17a8ab90189?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=0b1baeab58943038fc51c307a5fcd179\\\",\\\"medium\\\":\\\"https://images.unsplash.com/profile-1473772909536-f17a8ab90189?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=c87e22bae2beabcb5508ad792563db36\\\",\\\"large\\\":\\\"https://images.unsplash.com/profile-1473772909536-f17a8ab90189?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=0ff9a3f929230212d08af0ff442ca010\\\"},\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/users/geran\\\",\\\"html\\\":\\\"https://unsplash.com/@geran\\\",\\\"photos\\\":\\\"https://api.unsplash.com/users/geran/photos\\\",\\\"likes\\\":\\\"https://api.unsplash.com/users/geran/likes\\\",\\\"portfolio\\\":\\\"https://api.unsplash.com/users/geran/portfolio\\\",\\\"following\\\":\\\"https://api.unsplash.com/users/geran/following\\\",\\\"followers\\\":\\\"https://api.unsplash.com/users/geran/followers\\\"}},\\\"current_user_collections\\\":[],\\\"urls\\\":{\\\"raw\\\":\\\"https://images.unsplash.com/photo-1495395226200-8fbf6b720b8c\\\",\\\"full\\\":\\\"https://images.unsplash.com/photo-1495395226200-8fbf6b720b8c?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=d932c1caa1af7cd3b45f3f5c20c422e1\\\",\\\"regular\\\":\\\"https://images.unsplash.com/photo-1495395226200-8fbf6b720b8c?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=aecf738cd3881d106e0d43ca804512ca\\\",\\\"small\\\":\\\"https://images.unsplash.com/photo-1495395226200-8fbf6b720b8c?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=a8ea96a3e32a48f4a13be8e5c8b44219\\\",\\\"thumb\\\":\\\"https://images.unsplash.com/photo-1495395226200-8fbf6b720b8c?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=cbe705219ddde2fdf3728d63555c20fd\\\"},\\\"categories\\\":[],\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/photos/Kcxv7Gz7wmw\\\",\\\"html\\\":\\\"https://unsplash.com/photos/Kcxv7Gz7wmw\\\",\\\"download\\\":\\\"https://unsplash.com/photos/Kcxv7Gz7wmw/download\\\",\\\"download_location\\\":\\\"https://api.unsplash.com/photos/Kcxv7Gz7wmw/download\\\"}},{\\\"id\\\":\\\"ArtVJ-217Cw\\\",\\\"created_at\\\":\\\"2015-11-02T11:51:39-05:00\\\",\\\"updated_at\\\":\\\"2017-10-03T14:01:55-04:00\\\",\\\"width\\\":5184,\\\"height\\\":3456,\\\"color\\\":\\\"#656A5D\\\",\\\"likes\\\":103,\\\"liked_by_user\\\":false,\\\"description\\\":null,\\\"user\\\":{\\\"id\\\":\\\"mT7srzn1RWI\\\",\\\"updated_at\\\":\\\"2017-09-21T14:42:08-04:00\\\",\\\"username\\\":\\\"somonesummers\\\",\\\"name\\\":\\\"Paul Summers\\\",\\\"first_name\\\":\\\"Paul\\\",\\\"last_name\\\":\\\"Summers\\\",\\\"twitter_username\\\":null,\\\"portfolio_url\\\":\\\"https://www.flickr.com/photos/paul_summers/\\\",\\\"bio\\\":\\\"\\\",\\\"location\\\":null,\\\"total_likes\\\":0,\\\"total_photos\\\":10,\\\"total_collections\\\":0,\\\"profile_image\\\":{\\\"small\\\":\\\"https://images.unsplash.com/profile-1446483516835-bcb6cca1b02d?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=9b85bf2977f5816c0fb5f691d3beac6d\\\",\\\"medium\\\":\\\"https://images.unsplash.com/profile-1446483516835-bcb6cca1b02d?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=0b4e426581beaabc5a0c7a555f44ca2c\\\",\\\"large\\\":\\\"https://images.unsplash.com/profile-1446483516835-bcb6cca1b02d?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=ee19b7afaa7b1b26e8bdf611c62110be\\\"},\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/users/somonesummers\\\",\\\"html\\\":\\\"https://unsplash.com/@somonesummers\\\",\\\"photos\\\":\\\"https://api.unsplash.com/users/somonesummers/photos\\\",\\\"likes\\\":\\\"https://api.unsplash.com/users/somonesummers/likes\\\",\\\"portfolio\\\":\\\"https://api.unsplash.com/users/somonesummers/portfolio\\\",\\\"following\\\":\\\"https://api.unsplash.com/users/somonesummers/following\\\",\\\"followers\\\":\\\"https://api.unsplash.com/users/somonesummers/followers\\\"}},\\\"current_user_collections\\\":[],\\\"urls\\\":{\\\"raw\\\":\\\"https://images.unsplash.com/photo-1446483050676-bd2fdf3ac2d6\\\",\\\"full\\\":\\\"https://images.unsplash.com/photo-1446483050676-bd2fdf3ac2d6?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=62c018425ac1b0acfb500c38894cf1ac\\\",\\\"regular\\\":\\\"https://images.unsplash.com/photo-1446483050676-bd2fdf3ac2d6?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=905609da20617b96ab373555cdac338e\\\",\\\"small\\\":\\\"https://images.unsplash.com/photo-1446483050676-bd2fdf3ac2d6?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=f27047f4d0d3c8f90a01feb6123eb775\\\",\\\"thumb\\\":\\\"https://images.unsplash.com/photo-1446483050676-bd2fdf3ac2d6?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=0d712f4840c915f83f7671f98a189e2f\\\"},\\\"categories\\\":[],\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/photos/ArtVJ-217Cw\\\",\\\"html\\\":\\\"https://unsplash.com/photos/ArtVJ-217Cw\\\",\\\"download\\\":\\\"https://unsplash.com/photos/ArtVJ-217Cw/download\\\",\\\"download_location\\\":\\\"https://api.unsplash.com/photos/ArtVJ-217Cw/download\\\"}},{\\\"id\\\":\\\"e85qV3NjrUw\\\",\\\"created_at\\\":\\\"2015-04-14T17:12:21-04:00\\\",\\\"updated_at\\\":\\\"2017-09-24T22:46:19-04:00\\\",\\\"width\\\":4096,\\\"height\\\":1821,\\\"color\\\":\\\"#424E3E\\\",\\\"likes\\\":76,\\\"liked_by_user\\\":false,\\\"description\\\":null,\\\"user\\\":{\\\"id\\\":\\\"wgj-0tyVo90\\\",\\\"updated_at\\\":\\\"2017-09-22T17:18:43-04:00\\\",\\\"username\\\":\\\"viktor_m\\\",\\\"name\\\":\\\"Viktor Mogilat\\\",\\\"first_name\\\":\\\"Viktor\\\",\\\"last_name\\\":\\\"Mogilat\\\",\\\"twitter_username\\\":null,\\\"portfolio_url\\\":\\\"https://www.flickr.com/photos/mogilat_v/\\\",\\\"bio\\\":\\\"\\\",\\\"location\\\":null,\\\"total_likes\\\":0,\\\"total_photos\\\":17,\\\"total_collections\\\":0,\\\"profile_image\\\":{\\\"small\\\":\\\"https://images.unsplash.com/placeholder-avatars/extra-large.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=0ad68f44c4725d5a3fda019bab9d3edc\\\",\\\"medium\\\":\\\"https://images.unsplash.com/placeholder-avatars/extra-large.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=356bd4b76a3d4eb97d63f45b818dd358\\\",\\\"large\\\":\\\"https://images.unsplash.com/placeholder-avatars/extra-large.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=ee8bbf5fb8d6e43aaaa238feae2fe90d\\\"},\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/users/viktor_m\\\",\\\"html\\\":\\\"https://unsplash.com/@viktor_m\\\",\\\"photos\\\":\\\"https://api.unsplash.com/users/viktor_m/photos\\\",\\\"likes\\\":\\\"https://api.unsplash.com/users/viktor_m/likes\\\",\\\"portfolio\\\":\\\"https://api.unsplash.com/users/viktor_m/portfolio\\\",\\\"following\\\":\\\"https://api.unsplash.com/users/viktor_m/following\\\",\\\"followers\\\":\\\"https://api.unsplash.com/users/viktor_m/followers\\\"}},\\\"current_user_collections\\\":[],\\\"urls\\\":{\\\"raw\\\":\\\"https://images.unsplash.com/photo-1429042344633-913ea4be5fb7\\\",\\\"full\\\":\\\"https://images.unsplash.com/photo-1429042344633-913ea4be5fb7?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=3ddb3613a369c6be13e38c0a8d2bf2b2\\\",\\\"regular\\\":\\\"https://images.unsplash.com/photo-1429042344633-913ea4be5fb7?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=95f24463b20798349039bf7429bbe3b7\\\",\\\"small\\\":\\\"https://images.unsplash.com/photo-1429042344633-913ea4be5fb7?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=3799f820f87e3b5a5a35d052761717b9\\\",\\\"thumb\\\":\\\"https://images.unsplash.com/photo-1429042344633-913ea4be5fb7?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=29fb8b8c626fd0c282a93fb0232ee11d\\\"},\\\"categories\\\":[],\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/photos/e85qV3NjrUw\\\",\\\"html\\\":\\\"https://unsplash.com/photos/e85qV3NjrUw\\\",\\\"download\\\":\\\"https://unsplash.com/photos/e85qV3NjrUw/download\\\",\\\"download_location\\\":\\\"https://api.unsplash.com/photos/e85qV3NjrUw/download\\\"}},{\\\"id\\\":\\\"a72o8w9HC2w\\\",\\\"created_at\\\":\\\"2017-06-03T17:45:51-04:00\\\",\\\"updated_at\\\":\\\"2017-10-06T09:56:08-04:00\\\",\\\"width\\\":4067,\\\"height\\\":2712,\\\"color\\\":\\\"#CAF9E9\\\",\\\"likes\\\":230,\\\"liked_by_user\\\":false,\\\"description\\\":null,\\\"user\\\":{\\\"id\\\":\\\"N_TyJdM2ptU\\\",\\\"updated_at\\\":\\\"2017-10-06T21:43:06-04:00\\\",\\\"username\\\":\\\"jplenio\\\",\\\"name\\\":\\\"Johannes Plenio\\\",\\\"first_name\\\":\\\"Johannes\\\",\\\"last_name\\\":\\\"Plenio\\\",\\\"twitter_username\\\":null,\\\"portfolio_url\\\":\\\"http://500px.com/jopl\\\",\\\"bio\\\":\\\"\\\",\\\"location\\\":\\\"Munich\\\",\\\"total_likes\\\":76,\\\"total_photos\\\":129,\\\"total_collections\\\":3,\\\"profile_image\\\":{\\\"small\\\":\\\"https://images.unsplash.com/profile-1493320375113-8d776e646fd0?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=f06c6f92d8ec3e2d7f8f979889c5647f\\\",\\\"medium\\\":\\\"https://images.unsplash.com/profile-1493320375113-8d776e646fd0?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=a04e92f7048f760aa1fa5cc5f2a0e108\\\",\\\"large\\\":\\\"https://images.unsplash.com/profile-1493320375113-8d776e646fd0?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=409d2b7c4e1e5f40d2e3fc31e9c04aef\\\"},\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/users/jplenio\\\",\\\"html\\\":\\\"https://unsplash.com/@jplenio\\\",\\\"photos\\\":\\\"https://api.unsplash.com/users/jplenio/photos\\\",\\\"likes\\\":\\\"https://api.unsplash.com/users/jplenio/likes\\\",\\\"portfolio\\\":\\\"https://api.unsplash.com/users/jplenio/portfolio\\\",\\\"following\\\":\\\"https://api.unsplash.com/users/jplenio/following\\\",\\\"followers\\\":\\\"https://api.unsplash.com/users/jplenio/followers\\\"}},\\\"current_user_collections\\\":[],\\\"urls\\\":{\\\"raw\\\":\\\"https://images.unsplash.com/photo-1496526311033-8a80ae14a1f9\\\",\\\"full\\\":\\\"https://images.unsplash.com/photo-1496526311033-8a80ae14a1f9?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=9dfad983294804c803baa84e8b59307f\\\",\\\"regular\\\":\\\"https://images.unsplash.com/photo-1496526311033-8a80ae14a1f9?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=afeb6f61b67bb736feee097658b3fab4\\\",\\\"small\\\":\\\"https://images.unsplash.com/photo-1496526311033-8a80ae14a1f9?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=5478d54c048d29c0da88746aa8fd6f6c\\\",\\\"thumb\\\":\\\"https://images.unsplash.com/photo-1496526311033-8a80ae14a1f9?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=947202c9989269f9ec3c9652c6488a65\\\"},\\\"categories\\\":[],\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/photos/a72o8w9HC2w\\\",\\\"html\\\":\\\"https://unsplash.com/photos/a72o8w9HC2w\\\",\\\"download\\\":\\\"https://unsplash.com/photos/a72o8w9HC2w/download\\\",\\\"download_location\\\":\\\"https://api.unsplash.com/photos/a72o8w9HC2w/download\\\"}},{\\\"id\\\":\\\"dGDmRqzPID0\\\",\\\"created_at\\\":\\\"2017-05-27T22:57:08-04:00\\\",\\\"updated_at\\\":\\\"2017-10-03T12:42:24-04:00\\\",\\\"width\\\":6000,\\\"height\\\":4000,\\\"color\\\":\\\"#F0F2F4\\\",\\\"likes\\\":41,\\\"liked_by_user\\\":false,\\\"description\\\":\\\"A small rocky creek in a forest on a foggy day\\\",\\\"user\\\":{\\\"id\\\":\\\"nbhrE4D_aIA\\\",\\\"updated_at\\\":\\\"2017-10-06T22:44:31-04:00\\\",\\\"username\\\":\\\"ibydesigns\\\",\\\"name\\\":\\\"Alex Iby\\\",\\\"first_name\\\":\\\"Alex\\\",\\\"last_name\\\":\\\"Iby\\\",\\\"twitter_username\\\":null,\\\"portfolio_url\\\":\\\"http://www.alexiby.com\\\",\\\"bio\\\":\\\"I am a professional photographer. Find me on Instagram @alex.iby\\\",\\\"location\\\":\\\"Boston, MA\\\",\\\"total_likes\\\":461,\\\"total_photos\\\":150,\\\"total_collections\\\":0,\\\"profile_image\\\":{\\\"small\\\":\\\"https://images.unsplash.com/profile-1507292222944-5e19c5aa0d48?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=316893a6ac87622d4105781da9f83ce3\\\",\\\"medium\\\":\\\"https://images.unsplash.com/profile-1507292222944-5e19c5aa0d48?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=0f61e81401fdb2e09d489bb5d17d98dc\\\",\\\"large\\\":\\\"https://images.unsplash.com/profile-1507292222944-5e19c5aa0d48?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=86141fee99cd0d4ec251456692a48faf\\\"},\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/users/ibydesigns\\\",\\\"html\\\":\\\"https://unsplash.com/@ibydesigns\\\",\\\"photos\\\":\\\"https://api.unsplash.com/users/ibydesigns/photos\\\",\\\"likes\\\":\\\"https://api.unsplash.com/users/ibydesigns/likes\\\",\\\"portfolio\\\":\\\"https://api.unsplash.com/users/ibydesigns/portfolio\\\",\\\"following\\\":\\\"https://api.unsplash.com/users/ibydesigns/following\\\",\\\"followers\\\":\\\"https://api.unsplash.com/users/ibydesigns/followers\\\"}},\\\"current_user_collections\\\":[],\\\"urls\\\":{\\\"raw\\\":\\\"https://images.unsplash.com/photo-1495940178561-60ecb2447b0e\\\",\\\"full\\\":\\\"https://images.unsplash.com/photo-1495940178561-60ecb2447b0e?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=d1eda51ff3bc338070fbb51987995baf\\\",\\\"regular\\\":\\\"https://images.unsplash.com/photo-1495940178561-60ecb2447b0e?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=a2fd52643d10305f191c1262be502934\\\",\\\"small\\\":\\\"https://images.unsplash.com/photo-1495940178561-60ecb2447b0e?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=0650424972d799ce78f360e2e7fe0dc1\\\",\\\"thumb\\\":\\\"https://images.unsplash.com/photo-1495940178561-60ecb2447b0e?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=21b31567d7ce1793931d0f322ae0a4a8\\\"},\\\"categories\\\":[],\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/photos/dGDmRqzPID0\\\",\\\"html\\\":\\\"https://unsplash.com/photos/dGDmRqzPID0\\\",\\\"download\\\":\\\"https://unsplash.com/photos/dGDmRqzPID0/download\\\",\\\"download_location\\\":\\\"https://api.unsplash.com/photos/dGDmRqzPID0/download\\\"}},{\\\"id\\\":\\\"P4wUyM5DAsc\\\",\\\"created_at\\\":\\\"2015-06-24T11:18:00-04:00\\\",\\\"updated_at\\\":\\\"2017-10-03T13:24:24-04:00\\\",\\\"width\\\":6000,\\\"height\\\":4000,\\\"color\\\":\\\"#27301C\\\",\\\"likes\\\":72,\\\"liked_by_user\\\":false,\\\"description\\\":\\\"Looking up in the middle of a plush, green forest\\\",\\\"user\\\":{\\\"id\\\":\\\"zY8bYOgW308\\\",\\\"updated_at\\\":\\\"2017-10-07T01:39:31-04:00\\\",\\\"username\\\":\\\"usinglight\\\",\\\"name\\\":\\\"Stefan Steinbauer\\\",\\\"first_name\\\":\\\"Stefan\\\",\\\"last_name\\\":\\\"Steinbauer\\\",\\\"twitter_username\\\":\\\"stst31415\\\",\\\"portfolio_url\\\":\\\"http://www.usinglight.com\\\",\\\"bio\\\":\\\"marketing professional, loving photography, architecture, macros and light - geometry and software test are my secret love.\\\",\\\"location\\\":\\\"Vienna (Austria)\\\",\\\"total_likes\\\":251,\\\"total_photos\\\":127,\\\"total_collections\\\":13,\\\"profile_image\\\":{\\\"small\\\":\\\"https://images.unsplash.com/profile-1460375814080-75b2c15d7733?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=8fc8728116918529757ead7893ca8180\\\",\\\"medium\\\":\\\"https://images.unsplash.com/profile-1460375814080-75b2c15d7733?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=27686e4c65bb35c87a880b8770a4ed0b\\\",\\\"large\\\":\\\"https://images.unsplash.com/profile-1460375814080-75b2c15d7733?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=ec366756daa2f7a93612382f69b5c544\\\"},\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/users/usinglight\\\",\\\"html\\\":\\\"https://unsplash.com/@usinglight\\\",\\\"photos\\\":\\\"https://api.unsplash.com/users/usinglight/photos\\\",\\\"likes\\\":\\\"https://api.unsplash.com/users/usinglight/likes\\\",\\\"portfolio\\\":\\\"https://api.unsplash.com/users/usinglight/portfolio\\\",\\\"following\\\":\\\"https://api.unsplash.com/users/usinglight/following\\\",\\\"followers\\\":\\\"https://api.unsplash.com/users/usinglight/followers\\\"}},\\\"current_user_collections\\\":[],\\\"urls\\\":{\\\"raw\\\":\\\"https://images.unsplash.com/photo-1435158988479-e3984c2fd00c\\\",\\\"full\\\":\\\"https://images.unsplash.com/photo-1435158988479-e3984c2fd00c?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=b39778eafe1522a97867ed9c212455f1\\\",\\\"regular\\\":\\\"https://images.unsplash.com/photo-1435158988479-e3984c2fd00c?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=8f9d9a82f7839358c913ce635b225ea1\\\",\\\"small\\\":\\\"https://images.unsplash.com/photo-1435158988479-e3984c2fd00c?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=346867ea57c37cc7e3644b95038c0e6c\\\",\\\"thumb\\\":\\\"https://images.unsplash.com/photo-1435158988479-e3984c2fd00c?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=162d4a37c53710fc773dffc5bf3eb554\\\"},\\\"categories\\\":[],\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/photos/P4wUyM5DAsc\\\",\\\"html\\\":\\\"https://unsplash.com/photos/P4wUyM5DAsc\\\",\\\"download\\\":\\\"https://unsplash.com/photos/P4wUyM5DAsc/download\\\",\\\"download_location\\\":\\\"https://api.unsplash.com/photos/P4wUyM5DAsc/download\\\"}},{\\\"id\\\":\\\"UK29SVDGfUc\\\",\\\"created_at\\\":\\\"2016-06-02T01:51:28-04:00\\\",\\\"updated_at\\\":\\\"2017-10-04T10:58:57-04:00\\\",\\\"width\\\":3000,\\\"height\\\":2000,\\\"color\\\":\\\"#FDFDFE\\\",\\\"likes\\\":84,\\\"liked_by_user\\\":false,\\\"description\\\":null,\\\"user\\\":{\\\"id\\\":\\\"-oXDgMWxc94\\\",\\\"updated_at\\\":\\\"2017-10-07T06:03:19-04:00\\\",\\\"username\\\":\\\"madbyte\\\",\\\"name\\\":\\\"Vladimir Kudinov\\\",\\\"first_name\\\":\\\"Vladimir\\\",\\\"last_name\\\":\\\"Kudinov\\\",\\\"twitter_username\\\":\\\"stSilent\\\",\\\"portfolio_url\\\":\\\"http://vladimirkudinov.com\\\",\\\"bio\\\":\\\"Hang these photos on the wall. Buy prints — https://society6.com/madbyte/prints\\\",\\\"location\\\":\\\"Los Angeles\\\",\\\"total_likes\\\":17,\\\"total_photos\\\":57,\\\"total_collections\\\":0,\\\"profile_image\\\":{\\\"small\\\":\\\"https://images.unsplash.com/profile-1496340928420-7ddb691a24b9?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=1b0957d9c147a0ec840f7bcc4bcc9cd4\\\",\\\"medium\\\":\\\"https://images.unsplash.com/profile-1496340928420-7ddb691a24b9?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=bace05039ad310a034abb57cf51e31cd\\\",\\\"large\\\":\\\"https://images.unsplash.com/profile-1496340928420-7ddb691a24b9?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=b2d79a52e669ba08907eb40ca15f1715\\\"},\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/users/madbyte\\\",\\\"html\\\":\\\"https://unsplash.com/@madbyte\\\",\\\"photos\\\":\\\"https://api.unsplash.com/users/madbyte/photos\\\",\\\"likes\\\":\\\"https://api.unsplash.com/users/madbyte/likes\\\",\\\"portfolio\\\":\\\"https://api.unsplash.com/users/madbyte/portfolio\\\",\\\"following\\\":\\\"https://api.unsplash.com/users/madbyte/following\\\",\\\"followers\\\":\\\"https://api.unsplash.com/users/madbyte/followers\\\"}},\\\"current_user_collections\\\":[],\\\"urls\\\":{\\\"raw\\\":\\\"https://images.unsplash.com/photo-1464846539327-f23d0038c19e\\\",\\\"full\\\":\\\"https://images.unsplash.com/photo-1464846539327-f23d0038c19e?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=579846a6d3edc9a2445cd4dcfc3ec913\\\",\\\"regular\\\":\\\"https://images.unsplash.com/photo-1464846539327-f23d0038c19e?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=d3479a846812283ad5af6623eca5ec34\\\",\\\"small\\\":\\\"https://images.unsplash.com/photo-1464846539327-f23d0038c19e?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=126a8cb209160671f8dd478df15f30cd\\\",\\\"thumb\\\":\\\"https://images.unsplash.com/photo-1464846539327-f23d0038c19e?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=e8d81e40b96e36872ab4cd860d64f555\\\"},\\\"categories\\\":[],\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/photos/UK29SVDGfUc\\\",\\\"html\\\":\\\"https://unsplash.com/photos/UK29SVDGfUc\\\",\\\"download\\\":\\\"https://unsplash.com/photos/UK29SVDGfUc/download\\\",\\\"download_location\\\":\\\"https://api.unsplash.com/photos/UK29SVDGfUc/download\\\"}},{\\\"id\\\":\\\"payOjEt5qYY\\\",\\\"created_at\\\":\\\"2017-08-07T16:17:00-04:00\\\",\\\"updated_at\\\":\\\"2017-10-05T18:49:11-04:00\\\",\\\"width\\\":5184,\\\"height\\\":3456,\\\"color\\\":\\\"#FFFFFF\\\",\\\"likes\\\":128,\\\"liked_by_user\\\":false,\\\"description\\\":\\\"A number of mighty trees on a foggy day in Stanley Park\\\",\\\"user\\\":{\\\"id\\\":\\\"aZLVHucYfig\\\",\\\"updated_at\\\":\\\"2017-10-06T22:12:06-04:00\\\",\\\"username\\\":\\\"juliemarsh\\\",\\\"name\\\":\\\"Julie Marsh\\\",\\\"first_name\\\":\\\"Julie\\\",\\\"last_name\\\":\\\"Marsh\\\",\\\"twitter_username\\\":null,\\\"portfolio_url\\\":null,\\\"bio\\\":\\\"Follow me and say hello on Insta @juliemarshphotography \\\",\\\"location\\\":\\\"Vancouver, British Columbia\\\",\\\"total_likes\\\":34,\\\"total_photos\\\":41,\\\"total_collections\\\":0,\\\"profile_image\\\":{\\\"small\\\":\\\"https://images.unsplash.com/profile-1501794051337-0b49f86803cd?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=3c2fe2b8e1ad67e78a16b9eee7e43315\\\",\\\"medium\\\":\\\"https://images.unsplash.com/profile-1501794051337-0b49f86803cd?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=423cd562dc50ea78040ab8b5e64711f3\\\",\\\"large\\\":\\\"https://images.unsplash.com/profile-1501794051337-0b49f86803cd?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=79607e421db66d699f0548f6ee55cb3c\\\"},\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/users/juliemarsh\\\",\\\"html\\\":\\\"https://unsplash.com/@juliemarsh\\\",\\\"photos\\\":\\\"https://api.unsplash.com/users/juliemarsh/photos\\\",\\\"likes\\\":\\\"https://api.unsplash.com/users/juliemarsh/likes\\\",\\\"portfolio\\\":\\\"https://api.unsplash.com/users/juliemarsh/portfolio\\\",\\\"following\\\":\\\"https://api.unsplash.com/users/juliemarsh/following\\\",\\\"followers\\\":\\\"https://api.unsplash.com/users/juliemarsh/followers\\\"}},\\\"current_user_collections\\\":[],\\\"urls\\\":{\\\"raw\\\":\\\"https://images.unsplash.com/photo-1502136928196-0ebd524bdf97\\\",\\\"full\\\":\\\"https://images.unsplash.com/photo-1502136928196-0ebd524bdf97?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=5a1f2979cd3edc0782251f329b44aa9c\\\",\\\"regular\\\":\\\"https://images.unsplash.com/photo-1502136928196-0ebd524bdf97?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=4a8304cec48603d6c0d3f3592d3e4c3c\\\",\\\"small\\\":\\\"https://images.unsplash.com/photo-1502136928196-0ebd524bdf97?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=b2dbc00e910b431c9cd3b0dcab9d8536\\\",\\\"thumb\\\":\\\"https://images.unsplash.com/photo-1502136928196-0ebd524bdf97?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=4453eace2a49970416b4082f1e9bc0c5\\\"},\\\"categories\\\":[],\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/photos/payOjEt5qYY\\\",\\\"html\\\":\\\"https://unsplash.com/photos/payOjEt5qYY\\\",\\\"download\\\":\\\"https://unsplash.com/photos/payOjEt5qYY/download\\\",\\\"download_location\\\":\\\"https://api.unsplash.com/photos/payOjEt5qYY/download\\\"}},{\\\"id\\\":\\\"U2fnW9DZ2z4\\\",\\\"created_at\\\":\\\"2015-10-16T19:38:24-04:00\\\",\\\"updated_at\\\":\\\"2017-09-27T17:21:20-04:00\\\",\\\"width\\\":5184,\\\"height\\\":3456,\\\"color\\\":\\\"#413E37\\\",\\\"likes\\\":69,\\\"liked_by_user\\\":false,\\\"description\\\":null,\\\"user\\\":{\\\"id\\\":\\\"0dFmVpK_F94\\\",\\\"updated_at\\\":\\\"2017-10-07T08:22:18-04:00\\\",\\\"username\\\":\\\"elijahhenderson\\\",\\\"name\\\":\\\"Elijah Henderson\\\",\\\"first_name\\\":\\\"Elijah\\\",\\\"last_name\\\":\\\"Henderson\\\",\\\"twitter_username\\\":\\\"zwappo\\\",\\\"portfolio_url\\\":null,\\\"bio\\\":\\\"I like to take pictures of my friends and everyday adventures\\\",\\\"location\\\":\\\"Nashville\\\",\\\"total_likes\\\":202,\\\"total_photos\\\":98,\\\"total_collections\\\":2,\\\"profile_image\\\":{\\\"small\\\":\\\"https://images.unsplash.com/profile-1504315841951-e72d86cd3c6c?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=109790bd15ecd9c49c2dc0df19aa7688\\\",\\\"medium\\\":\\\"https://images.unsplash.com/profile-1504315841951-e72d86cd3c6c?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=2f73c3a77680c212b87a8e425d658603\\\",\\\"large\\\":\\\"https://images.unsplash.com/profile-1504315841951-e72d86cd3c6c?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=ca372f9ac8f8ed5329e9925c053764fb\\\"},\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/users/elijahhenderson\\\",\\\"html\\\":\\\"https://unsplash.com/@elijahhenderson\\\",\\\"photos\\\":\\\"https://api.unsplash.com/users/elijahhenderson/photos\\\",\\\"likes\\\":\\\"https://api.unsplash.com/users/elijahhenderson/likes\\\",\\\"portfolio\\\":\\\"https://api.unsplash.com/users/elijahhenderson/portfolio\\\",\\\"following\\\":\\\"https://api.unsplash.com/users/elijahhenderson/following\\\",\\\"followers\\\":\\\"https://api.unsplash.com/users/elijahhenderson/followers\\\"}},\\\"current_user_collections\\\":[],\\\"urls\\\":{\\\"raw\\\":\\\"https://images.unsplash.com/photo-1445038678354-6890ad33bc72\\\",\\\"full\\\":\\\"https://images.unsplash.com/photo-1445038678354-6890ad33bc72?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=22236f87f42322fd2df8f6576bc167b7\\\",\\\"regular\\\":\\\"https://images.unsplash.com/photo-1445038678354-6890ad33bc72?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=70a2b642ca9251efe5b2b706232e5ba9\\\",\\\"small\\\":\\\"https://images.unsplash.com/photo-1445038678354-6890ad33bc72?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=91889cdb4cdcc818f7b112e0f55de99e\\\",\\\"thumb\\\":\\\"https://images.unsplash.com/photo-1445038678354-6890ad33bc72?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=8dad19c961ff81a9c88f29f66e275504\\\"},\\\"categories\\\":[],\\\"links\\\":{\\\"self\\\":\\\"https://api.unsplash.com/photos/U2fnW9DZ2z4\\\",\\\"html\\\":\\\"https://unsplash.com/photos/U2fnW9DZ2z4\\\",\\\"download\\\":\\\"https://unsplash.com/photos/U2fnW9DZ2z4/download\\\",\\\"download_location\\\":\\\"https://api.unsplash.com/photos/U2fnW9DZ2z4/download\\\"}}];\\r\\n\\r\\n//                const request = new Request(`https://api.unsplash.com/search/photos?query=${this.searchText}&per_page=100`, {\\r\\n//                    method: \\\"GET\\\",\\r\\n//                    headers: new Headers({\\r\\n//                        \\\"Authorization\\\": `Client-ID 64f9762c04f94722606706fe60aa8519d76abc2cbbbdc86f321fa8f27d870381`\\r\\n//                    })\\r\\n//                });\\r\\n//\\r\\n//                fetch(request).then(response => {\\r\\n//                    if (response.status !== 200) {\\r\\n//                        console.error(\\\"Looks like there was a problem. Status Code: \\\" + response.status);\\r\\n//                        return;\\r\\n//                    }\\r\\n//                    response.json().then((data) => {\\r\\n//                        this.photos = data.results;\\r\\n//                        console.log(JSON.stringify(this.photos));\\r\\n//                    });\\r\\n//                })\\r\\n            },\\r\\n            renderPhoto: function (photo) {\\r\\n                const ratio = Math.min(400 / photo.width, 600 / photo.height);\\r\\n                return (this.$refs.img2enabled.checked === true) ? `<img-2 src-preview=\\\"${photo.urls.raw}?ixlib=rb-0.3.5&q=1&fm=jpg&crop=entropy&cs=tinysrgb&w=10&height=10&fit=max\\\" src-light=\\\"${photo.urls.thumb}\\\" src=\\\"${photo.urls.small}\\\" width=\\\"${photo.width * ratio}\\\" height=\\\"${photo.height * ratio}\\\"></img-2>` : `<img src=\\\"${photo.urls.regular}\\\" width=\\\"${photo.width * ratio}\\\" height=\\\"${photo.height * ratio}\\\" />`;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n</script>\\r\\n\\r\\n<style scoped>\\r\\n    .search-input-frame {\\r\\n        margin: auto;\\r\\n        width: 600px;\\r\\n        display: flex;\\r\\n        align-items: center;\\r\\n        justify-content: center;\\r\\n        padding: 2rem 0 0 0;\\r\\n    }\\r\\n    .settings {\\r\\n        display: flex;\\r\\n        justify-content: center;\\r\\n        align-items: center;\\r\\n        padding: 1rem 0;\\r\\n    }\\r\\n    .search-input-frame .btn {\\r\\n        border-bottom-left-radius: 0;\\r\\n        border-top-left-radius: 0;\\r\\n        background-color: #a55d39;\\r\\n        color: #FFF;\\r\\n    }\\r\\n    #search_input {\\r\\n        box-sizing: border-box;\\r\\n        width: 100%;\\r\\n        height: 50px;\\r\\n        border-bottom-left-radius: 5px;\\r\\n        border-top-left-radius: 5px;\\r\\n        border: none;\\r\\n        font-size: 1.5rem;\\r\\n        padding: 0 .5rem;\\r\\n    }\\r\\n    #container {\\r\\n        display: flex;\\r\\n        flex-wrap: wrap;\\r\\n        align-content: flex-start;\\r\\n        justify-content: space-around;\\r\\n        height: 100vh;\\r\\n    }\\r\\n    #container .item {\\r\\n        flex-grow: 0;\\r\\n        flex-shrink: 0;\\r\\n        margin: .5rem;\\r\\n        padding: .5rem;\\r\\n        display: flex;\\r\\n        justify-content: center;\\r\\n        align-items: center;\\r\\n        background-color: rgba(241, 241, 241, 0.5);\\r\\n        border-radius: 10px;\\r\\n    }\\r\\n    #container .item img {\\r\\n        /*height: 100%;*/\\r\\n        /*width: 100%;*/\\r\\n    }\\r\\n\\r\\n</style>\"],\"sourceRoot\":\"webpack://\"}]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvU2VhcmNoLnZ1ZT9mNWM5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7OztBQUdBO0FBQ0Esa0VBQWtFLG1CQUFtQixtQkFBbUIsb0JBQW9CLDBCQUEwQiw4QkFBOEIsMEJBQTBCLEdBQUcsOEJBQThCLG9CQUFvQiw4QkFBOEIsMEJBQTBCLHNCQUFzQixHQUFHLDZDQUE2QyxtQ0FBbUMsZ0NBQWdDLGdDQUFnQyxrQkFBa0IsR0FBRyxrQ0FBa0MsNkJBQTZCLGtCQUFrQixtQkFBbUIscUNBQXFDLGtDQUFrQyxtQkFBbUIsd0JBQXdCLHVCQUF1QixHQUFHLCtCQUErQixvQkFBb0Isc0JBQXNCLGdDQUFnQyxvQ0FBb0Msb0JBQW9CLEdBQUcscUNBQXFDLG1CQUFtQixxQkFBcUIsb0JBQW9CLHFCQUFxQixvQkFBb0IsOEJBQThCLDBCQUEwQixpREFBaUQsMEJBQTBCLEdBQUcseUNBQXlDLHFCQUFxQixzQkFBc0IsS0FBSyxZQUFZLG1GQUFtRixNQUFNLFVBQVUsVUFBVSxVQUFVLFdBQVcsV0FBVyxXQUFXLEtBQUssS0FBSyxVQUFVLFdBQVcsV0FBVyxXQUFXLEtBQUssS0FBSyxXQUFXLFdBQVcsV0FBVyxVQUFVLEtBQUssS0FBSyxXQUFXLFVBQVUsVUFBVSxXQUFXLFdBQVcsVUFBVSxXQUFXLFdBQVcsS0FBSyxLQUFLLFVBQVUsV0FBVyxXQUFXLFdBQVcsVUFBVSxLQUFLLEtBQUssVUFBVSxVQUFVLFVBQVUsVUFBVSxVQUFVLFdBQVcsV0FBVyxXQUFXLFdBQVcsS0FBSyxLQUFLLFdBQVcsV0FBVyxpdUJBQWl1Qix5QkFBeUIsdUNBQXVDLGdDQUFnQyx5QkFBeUIsaUlBQWlJLGFBQWEsdUJBQXVCLDJDQUEyQyx3Q0FBd0MsaVNBQWlTLHVXQUF1VyxxaUJBQXFpQixZQUFZLHNiQUFzYiwyQ0FBMkMseXZCQUF5dkIsOEJBQThCLGdRQUFnUSxFQUFFLDhSQUE4Uix1V0FBdVcscWlCQUFxaUIsWUFBWSxzYkFBc2IsMkNBQTJDLHl2QkFBeXZCLDhCQUE4QixnUUFBZ1EsRUFBRSx1U0FBdVMscWFBQXFhLGtpQkFBa2lCLFlBQVksK2FBQSthLDJDQUEyQyx5dkJBQXl2Qiw4QkFBOEIsZ1FBQWdRLEVBQUUsMk9BQTJPLGdhQUFnYSxraUJBQWtpQixZQUFZLHlkQUF5ZCwyQ0FBMkMseXZCQUF5dkIsOEJBQThCLGdRQUFnUSxFQUFFLDBSQUEwUix1WEFBdVgsa2lCQUFraUIsWUFBWSxpYUFBaWEsMkNBQTJDLHl2QkFBeXZCLDhCQUE4QixnUUFBZ1EsRUFBRSx1U0FBdVMsMmNBQTJjLGtpQkFBa2lCLFlBQVksc2JBQXNiLDJDQUEyQyx5dkJBQXl2Qiw4QkFBOEIsZ1FBQWdRLEVBQUUsMk9BQTJPLG9YQUFvWCw4aUJBQThpQixZQUFZLGlhQUFpYSwyQ0FBMkMseXZCQUF5dkIsOEJBQThCLGdRQUFnUSxFQUFFLG1TQUFtUyx5aUJBQXlpQixraUJBQWtpQixZQUFZLHdhQUF3YSwyQ0FBMkMseXZCQUF5dkIsOEJBQThCLGdRQUFnUSxFQUFFLHVSQUF1UiwwV0FBMFcscWlCQUFxaUIsWUFBWSw0WUFBNFksMkNBQTJDLHl2QkFBeXZCLDhCQUE4QixnUUFBZ1EsRUFBRSwyT0FBMk8sdWFBQXVhLGtpQkFBa2lCLFlBQVksNmJBQTZiLDJDQUEyQyx5dkJBQXl2Qiw4QkFBOEIsZ1FBQWdRLEVBQUUsME9BQTBPLHNWQUFzVixxaUJBQXFpQixZQUFZLHNiQUFzYiwyQ0FBMkMseXZCQUF5dkIsOEJBQThCLGdRQUFnUSxFQUFFLDJPQUEyTyw2ZUFBNmUsa2lCQUFraUIsWUFBWSxvY0FBb2MsMkNBQTJDLHl2QkFBeXZCLDhCQUE4QixnUUFBZ1EsRUFBRSwwT0FBME8sa2RBQWtkLGtpQkFBa2lCLFlBQVksMFpBQTBaLDJDQUEyQyx5dkJBQXl2Qiw4QkFBOEIsZ1FBQWdRLEVBQUUsME9BQTBPLDJaQUEyWixraUJBQWtpQixZQUFZLDBaQUEwWiwyQ0FBMkMsMHVCQUEwdUIsOEJBQThCLGdRQUFnUSxFQUFFLDhSQUE4UixtakJBQW1qQixraUJBQWtpQixZQUFZLG9jQUFvYywyQ0FBMkMseXZCQUF5dkIsOEJBQThCLGdRQUFnUSxFQUFFLDBPQUEwTyxvcEJBQW9wQixraUJBQWtpQixZQUFZLGtkQUFrZCwyQ0FBMkMseXZCQUF5dkIsOEJBQThCLGdRQUFnUSxFQUFFLDRTQUE0Uyw2bUJBQTZtQixraUJBQWtpQixZQUFZLGtkQUFrZCwyQ0FBMkMseXZCQUF5dkIsOEJBQThCLGdRQUFnUSxFQUFFLHFSQUFxUixnZUFBZ2Usa2lCQUFraUIsWUFBWSwwWkFBMFosMkNBQTJDLHl2QkFBeXZCLDhCQUE4QixnUUFBZ1EsRUFBRSxvUkFBb1IscWFBQXFhLGtpQkFBa2lCLFlBQVksK2FBQSthLDJDQUEyQyx5dkJBQXl2Qiw4QkFBOEIsZ1FBQWdRLEVBQUUsNlFBQTZRLGlWQUFpViw4aUJBQThpQixZQUFZLDJjQUEyYywyQ0FBMkMseXZCQUF5dkIsOEJBQThCLGdRQUFnUSxFQUFFLDBVQUEwVSw0VUFBNFUsa2lCQUFraUIsWUFBWSwwWkFBMFosMkNBQTJDLHl2QkFBeXZCLDhCQUE4QixnUUFBZ1EsRUFBRSwyT0FBMk8scWJBQXFiLGtpQkFBa2lCLFlBQVksbVpBQW1aLDJDQUEyQyx5dkJBQXl2Qiw4QkFBOEIsZ1FBQWdRLEVBQUUsdVRBQXVULHFiQUFxYixraUJBQWtpQixZQUFZLG1aQUFtWiwyQ0FBMkMseXZCQUF5dkIsOEJBQThCLGdRQUFnUSxFQUFFLDJPQUEyTywyWEFBMlgsa2lCQUFraUIsWUFBWSwyY0FBMmMsMkNBQTJDLHl2QkFBeXZCLDhCQUE4QixnUUFBZ1EsRUFBRSwwT0FBME8sdVhBQXVYLHFpQkFBcWlCLFlBQVksd2FBQXdhLDJDQUEyQyx5dkJBQXl2Qiw4QkFBOEIsZ1FBQWdRLEVBQUUsMk9BQTJPLDZXQUE2VyxraUJBQWtpQixZQUFZLGlhQUFpYSwyQ0FBMkMseXZCQUF5dkIsOEJBQThCLGdRQUFnUSxFQUFFLHdSQUF3Uix3YUFBd2Esa2lCQUFraUIsWUFBWSxzYkFBc2IsMkNBQTJDLHl2QkFBeXZCLDhCQUE4QixnUUFBZ1EsRUFBRSwyUkFBMlIsd2dCQUF3Z0Isa2lCQUFraUIsWUFBWSxzYkFBc2IsMkNBQTJDLHl2QkFBeXZCLDhCQUE4QixnUUFBZ1EsRUFBRSwwT0FBME8sK2NBQStjLGtpQkFBa2lCLFlBQVksaWFBQWlhLDJDQUEyQyx5dkJBQXl2Qiw4QkFBOEIsZ1FBQWdRLEVBQUUsa1NBQWtTLCtaQUErWixraUJBQWtpQixZQUFZLHNiQUFzYiwyQ0FBMkMseXZCQUF5dkIsOEJBQThCLGdRQUFnUSxFQUFFLDBPQUEwTyx3YUFBd2Esa2lCQUFraUIsWUFBWSx5ZEFBeWQsMkNBQTJDLHl2QkFBeXZCLDhCQUE4QixnUUFBZ1EsRUFBRSxzR0FBc0csZ0JBQWdCLGlCQUFpQiwwRkFBMEYsd0pBQXdKLHdCQUF3QixFQUFFLDZEQUE2RCx3REFBd0QsaUhBQWlILHFDQUFxQywyQkFBMkIsMERBQTBELHlEQUF5RCx1RUFBdUUsMkJBQTJCLEVBQUUsdUJBQXVCLGtCQUFrQixnREFBZ0Qsa0ZBQWtGLCtGQUErRixlQUFlLDJGQUEyRixpQkFBaUIsV0FBVyxpQkFBaUIsYUFBYSxvQkFBb0IsY0FBYyxxQkFBcUIsNkJBQTZCLG1CQUFtQixhQUFhLG9CQUFvQixjQUFjLHFCQUFxQixPQUFPLGlCQUFpQixhQUFhLFNBQVMsZ0VBQWdFLHlCQUF5Qix5QkFBeUIsMEJBQTBCLGdDQUFnQyxvQ0FBb0MsZ0NBQWdDLFNBQVMsbUJBQW1CLDBCQUEwQixvQ0FBb0MsZ0NBQWdDLDRCQUE0QixTQUFTLGtDQUFrQyx5Q0FBeUMsc0NBQXNDLHNDQUFzQyx3QkFBd0IsU0FBUyx1QkFBdUIsbUNBQW1DLHdCQUF3Qix5QkFBeUIsMkNBQTJDLHdDQUF3Qyx5QkFBeUIsOEJBQThCLDZCQUE2QixTQUFTLG9CQUFvQiwwQkFBMEIsNEJBQTRCLHNDQUFzQywwQ0FBMEMsMEJBQTBCLFNBQVMsMEJBQTBCLHlCQUF5QiwyQkFBMkIsMEJBQTBCLDJCQUEyQiwwQkFBMEIsb0NBQW9DLGdDQUFnQyx1REFBdUQsZ0NBQWdDLFNBQVMsOEJBQThCLDJCQUEyQiw0QkFBNEIsV0FBVyw2Q0FBNkM7O0FBRS9uMEYiLCJmaWxlIjoiNy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIlxcbi5zZWFyY2gtaW5wdXQtZnJhbWVbZGF0YS12LWJjNDk3Yzg0XSB7XFxuICAgIG1hcmdpbjogYXV0bztcXG4gICAgd2lkdGg6IDYwMHB4O1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgcGFkZGluZzogMnJlbSAwIDAgMDtcXG59XFxuLnNldHRpbmdzW2RhdGEtdi1iYzQ5N2M4NF0ge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgcGFkZGluZzogMXJlbSAwO1xcbn1cXG4uc2VhcmNoLWlucHV0LWZyYW1lIC5idG5bZGF0YS12LWJjNDk3Yzg0XSB7XFxuICAgIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6IDA7XFxuICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDA7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNhNTVkMzk7XFxuICAgIGNvbG9yOiAjRkZGO1xcbn1cXG4jc2VhcmNoX2lucHV0W2RhdGEtdi1iYzQ5N2M4NF0ge1xcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgaGVpZ2h0OiA1MHB4O1xcbiAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiA1cHg7XFxuICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDVweDtcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICBmb250LXNpemU6IDEuNXJlbTtcXG4gICAgcGFkZGluZzogMCAuNXJlbTtcXG59XFxuI2NvbnRhaW5lcltkYXRhLXYtYmM0OTdjODRdIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC13cmFwOiB3cmFwO1xcbiAgICBhbGlnbi1jb250ZW50OiBmbGV4LXN0YXJ0O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcXG4gICAgaGVpZ2h0OiAxMDB2aDtcXG59XFxuI2NvbnRhaW5lciAuaXRlbVtkYXRhLXYtYmM0OTdjODRdIHtcXG4gICAgZmxleC1ncm93OiAwO1xcbiAgICBmbGV4LXNocmluazogMDtcXG4gICAgbWFyZ2luOiAuNXJlbTtcXG4gICAgcGFkZGluZzogLjVyZW07XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI0MSwgMjQxLCAyNDEsIDAuNSk7XFxuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxufVxcbiNjb250YWluZXIgLml0ZW0gaW1nW2RhdGEtdi1iYzQ5N2M4NF0ge1xcbiAgICAvKmhlaWdodDogMTAwJTsqL1xcbiAgICAvKndpZHRoOiAxMDAlOyovXFxufVxcblxcblwiLCBcIlwiLCB7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCIvLi9zcmMvcGFnZXMvU2VhcmNoLnZ1ZT8yNDBmZWYxMFwiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiO0FBNERBO0lBQ0EsYUFBQTtJQUNBLGFBQUE7SUFDQSxjQUFBO0lBQ0Esb0JBQUE7SUFDQSx3QkFBQTtJQUNBLG9CQUFBO0NBQ0E7QUFDQTtJQUNBLGNBQUE7SUFDQSx3QkFBQTtJQUNBLG9CQUFBO0lBQ0EsZ0JBQUE7Q0FDQTtBQUNBO0lBQ0EsNkJBQUE7SUFDQSwwQkFBQTtJQUNBLDBCQUFBO0lBQ0EsWUFBQTtDQUNBO0FBQ0E7SUFDQSx1QkFBQTtJQUNBLFlBQUE7SUFDQSxhQUFBO0lBQ0EsK0JBQUE7SUFDQSw0QkFBQTtJQUNBLGFBQUE7SUFDQSxrQkFBQTtJQUNBLGlCQUFBO0NBQ0E7QUFDQTtJQUNBLGNBQUE7SUFDQSxnQkFBQTtJQUNBLDBCQUFBO0lBQ0EsOEJBQUE7SUFDQSxjQUFBO0NBQ0E7QUFDQTtJQUNBLGFBQUE7SUFDQSxlQUFBO0lBQ0EsY0FBQTtJQUNBLGVBQUE7SUFDQSxjQUFBO0lBQ0Esd0JBQUE7SUFDQSxvQkFBQTtJQUNBLDJDQUFBO0lBQ0Esb0JBQUE7Q0FDQTtBQUNBO0lBQ0EsaUJBQUE7SUFDQSxnQkFBQTtDQUNBXCIsXCJmaWxlXCI6XCJTZWFyY2gudnVlXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIjx0ZW1wbGF0ZT5cXHJcXG4gICAgPG1haW4tbGF5b3V0PlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwic2VhcmNoLWlucHV0LWZyYW1lXFxcIj5cXHJcXG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgaWQ9XFxcInNlYXJjaF9pbnB1dFxcXCIgdi1tb2RlbD1cXFwic2VhcmNoVGV4dFxcXCIgLz5cXHJcXG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVxcXCJidG5cXFwiIHYtb246Y2xpY2s9XFxcInN1Ym1pdFNlYXJjaCgpXFxcIj5TZWFyY2g8L2J1dHRvbj5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICAgICAgPGRpdiBjbGFzcz1cXFwic2V0dGluZ3NcXFwiPlxcclxcbiAgICAgICAgICAgIDxsYWJlbD5Vc2UgSW1nLTI6IDxpbnB1dCB0eXBlPVxcXCJjaGVja2JveFxcXCIgcmVmPVxcXCJpbWcyZW5hYmxlZFxcXCIgY2hlY2tlZCAvPjwvbGFiZWw+XFxyXFxuICAgICAgICA8L2Rpdj5cXHJcXG4gICAgICAgIDxkaXYgaWQ9XFxcImNvbnRhaW5lclxcXCI+XFxyXFxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiaXRlbVxcXCIgdi1mb3I9XFxcInBob3RvIGluIHBob3Rvc1xcXCIgdi1odG1sPVxcXCJyZW5kZXJQaG90byhwaG90bylcXFwiPjwvZGl2PlxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgIDwvbWFpbi1sYXlvdXQ+XFxyXFxuPC90ZW1wbGF0ZT5cXHJcXG5cXHJcXG48c2NyaXB0PlxcclxcbiAgICBpbXBvcnQgTWFpbkxheW91dCBmcm9tIFxcXCIuLi9sYXlvdXRzL01haW4udnVlXFxcIlxcclxcbiAgICBleHBvcnQgZGVmYXVsdCB7XFxyXFxuICAgICAgICBjb21wb25lbnRzOiB7XFxyXFxuICAgICAgICAgICAgTWFpbkxheW91dFxcclxcbiAgICAgICAgfSxcXHJcXG4gICAgICAgIGRhdGE6IGZ1bmN0aW9uICgpIHtcXHJcXG4gICAgICAgICAgICByZXR1cm4gIHtcXHJcXG4gICAgICAgICAgICAgICAgaW1nMmVuYWJsZWQ6IHRydWUsXFxyXFxuICAgICAgICAgICAgICAgIHNlYXJjaFRleHQ6IFxcXCJmb3Jlc3RcXFwiLFxcclxcbiAgICAgICAgICAgICAgICBwaG90b3M6IFtdXFxyXFxuICAgICAgICAgICAgfTtcXHJcXG4gICAgICAgIH0sXFxyXFxuICAgICAgICBtZXRob2RzOiB7XFxyXFxuICAgICAgICAgICAgc3VibWl0U2VhcmNoOiBmdW5jdGlvbiAoKSB7XFxyXFxuXFxyXFxuICAgICAgICAgICAgICAgIHRoaXMucGhvdG9zID0gW3tcXFwiaWRcXFwiOlxcXCI0ZFJ5VnlYTjZMZzEyM1xcXCIsXFxcImNyZWF0ZWRfYXRcXFwiOlxcXCIyMDE2LTAyLTE2VDE2OjA1OjAwLTA1OjAwXFxcIixcXFwidXBkYXRlZF9hdFxcXCI6XFxcIjIwMTctMTAtMDdUMDM6MDE6MTItMDQ6MDBcXFwiLFxcXCJ3aWR0aFxcXCI6NjAxNixcXFwiaGVpZ2h0XFxcIjo0MDE2LFxcXCJjb2xvclxcXCI6XFxcIiNEM0U1RTlcXFwiLFxcXCJsaWtlc1xcXCI6MzUyLFxcXCJsaWtlZF9ieV91c2VyXFxcIjpmYWxzZSxcXFwiZGVzY3JpcHRpb25cXFwiOlxcXCJNaXN0IGluIGFuIGV2ZXJncmVlbiBmb3Jlc3QgaW4gxaB1bWF2YSBOYXRpb25hbCBQYXJrXFxcIixcXFwidXNlclxcXCI6e1xcXCJpZFxcXCI6XFxcIk9kenJDUllwNDhFXFxcIixcXFwidXBkYXRlZF9hdFxcXCI6XFxcIjIwMTctMDktMjRUMTc6MjQ6MzctMDQ6MDBcXFwiLFxcXCJ1c2VybmFtZVxcXCI6XFxcImx1a2FzbmVhc2lcXFwiLFxcXCJuYW1lXFxcIjpcXFwiTHVrYXMgTmVhc2lcXFwiLFxcXCJmaXJzdF9uYW1lXFxcIjpcXFwiTHVrYXNcXFwiLFxcXCJsYXN0X25hbWVcXFwiOlxcXCJOZWFzaVxcXCIsXFxcInR3aXR0ZXJfdXNlcm5hbWVcXFwiOm51bGwsXFxcInBvcnRmb2xpb191cmxcXFwiOlxcXCJodHRwOi8vbHVrYXNuZWFzaS5jb21cXFwiLFxcXCJiaW9cXFwiOlxcXCJcXFwiLFxcXCJsb2NhdGlvblxcXCI6XFxcIlByYWd1ZVxcXCIsXFxcInRvdGFsX2xpa2VzXFxcIjoxNCxcXFwidG90YWxfcGhvdG9zXFxcIjoxMCxcXFwidG90YWxfY29sbGVjdGlvbnNcXFwiOjEsXFxcInByb2ZpbGVfaW1hZ2VcXFwiOntcXFwic21hbGxcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGxhY2Vob2xkZXItYXZhdGFycy9leHRyYS1sYXJnZS5qcGc/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1mYWNlcyZjcz10aW55c3JnYiZmaXQ9Y3JvcCZoPTMyJnc9MzImcz0wYWQ2OGY0NGM0NzI1ZDVhM2ZkYTAxOWJhYjlkM2VkY1xcXCIsXFxcIm1lZGl1bVxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9wbGFjZWhvbGRlci1hdmF0YXJzL2V4dHJhLWxhcmdlLmpwZz9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWZhY2VzJmNzPXRpbnlzcmdiJmZpdD1jcm9wJmg9NjQmdz02NCZzPTM1NmJkNGI3NmEzZDRlYjk3ZDYzZjQ1YjgxOGRkMzU4XFxcIixcXFwibGFyZ2VcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGxhY2Vob2xkZXItYXZhdGFycy9leHRyYS1sYXJnZS5qcGc/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1mYWNlcyZjcz10aW55c3JnYiZmaXQ9Y3JvcCZoPTEyOCZ3PTEyOCZzPWVlOGJiZjVmYjhkNmU0M2FhYWEyMzhmZWFlMmZlOTBkXFxcIn0sXFxcImxpbmtzXFxcIjp7XFxcInNlbGZcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvbHVrYXNuZWFzaVxcXCIsXFxcImh0bWxcXFwiOlxcXCJodHRwczovL3Vuc3BsYXNoLmNvbS9AbHVrYXNuZWFzaVxcXCIsXFxcInBob3Rvc1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9sdWthc25lYXNpL3Bob3Rvc1xcXCIsXFxcImxpa2VzXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL2x1a2FzbmVhc2kvbGlrZXNcXFwiLFxcXCJwb3J0Zm9saW9cXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvbHVrYXNuZWFzaS9wb3J0Zm9saW9cXFwiLFxcXCJmb2xsb3dpbmdcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvbHVrYXNuZWFzaS9mb2xsb3dpbmdcXFwiLFxcXCJmb2xsb3dlcnNcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvbHVrYXNuZWFzaS9mb2xsb3dlcnNcXFwifX0sXFxcImN1cnJlbnRfdXNlcl9jb2xsZWN0aW9uc1xcXCI6W10sXFxcInVybHNcXFwiOntcXFwicmF3XFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0NTU2NTY2Nzg0OTQtNGQxYjVmM2U3YWQ0XFxcIixcXFwiZnVsbFxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDU1NjU2Njc4NDk0LTRkMWI1ZjNlN2FkND9peGxpYj1yYi0wLjMuNSZxPTg1JmZtPWpwZyZjcm9wPWVudHJvcHkmY3M9c3JnYiZzPWNhZmVmYzY4NzZhZmE0ZmJiZDUxYTRhZDZmODlhNTJjXFxcIixcXFwicmVndWxhclxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDU1NjU2Njc4NDk0LTRkMWI1ZjNlN2FkND9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWVudHJvcHkmY3M9dGlueXNyZ2Imdz0xMDgwJmZpdD1tYXgmcz05NzI2NWJkNWE5N2Y2MDFkMWVmMDRmZDQ3NGRhZTNjZlxcXCIsXFxcInNtYWxsXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0NTU2NTY2Nzg0OTQtNGQxYjVmM2U3YWQ0P2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZW50cm9weSZjcz10aW55c3JnYiZ3PTQwMCZmaXQ9bWF4JnM9MDFhYWUxNDJhNzMzNTQwYjBlZDYzMDIzOTc5NjBhNmNcXFwiLFxcXCJ0aHVtYlxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDU1NjU2Njc4NDk0LTRkMWI1ZjNlN2FkND9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWVudHJvcHkmY3M9dGlueXNyZ2Imdz0yMDAmZml0PW1heCZzPTM2ZjUwMmQ5NTJmNzk1ZWJhZjkzMzYyZDY3NDg0ODc4XFxcIn0sXFxcImNhdGVnb3JpZXNcXFwiOltdLFxcXCJsaW5rc1xcXCI6e1xcXCJzZWxmXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3Bob3Rvcy80ZFJ5VnlYTjZMZ1xcXCIsXFxcImh0bWxcXFwiOlxcXCJodHRwczovL3Vuc3BsYXNoLmNvbS9waG90b3MvNGRSeVZ5WE42TGdcXFwiLFxcXCJkb3dubG9hZFxcXCI6XFxcImh0dHBzOi8vdW5zcGxhc2guY29tL3Bob3Rvcy80ZFJ5VnlYTjZMZy9kb3dubG9hZFxcXCIsXFxcImRvd25sb2FkX2xvY2F0aW9uXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3Bob3Rvcy80ZFJ5VnlYTjZMZy9kb3dubG9hZFxcXCJ9fSx7XFxcImlkXFxcIjpcXFwiNGRSeVZ5WE42TGdcXFwiLFxcXCJjcmVhdGVkX2F0XFxcIjpcXFwiMjAxNi0wMi0xNlQxNjowNTowMC0wNTowMFxcXCIsXFxcInVwZGF0ZWRfYXRcXFwiOlxcXCIyMDE3LTEwLTA3VDAzOjAxOjEyLTA0OjAwXFxcIixcXFwid2lkdGhcXFwiOjYwMTYsXFxcImhlaWdodFxcXCI6NDAxNixcXFwiY29sb3JcXFwiOlxcXCIjRDNFNUU5XFxcIixcXFwibGlrZXNcXFwiOjM1MixcXFwibGlrZWRfYnlfdXNlclxcXCI6ZmFsc2UsXFxcImRlc2NyaXB0aW9uXFxcIjpcXFwiTWlzdCBpbiBhbiBldmVyZ3JlZW4gZm9yZXN0IGluIMWgdW1hdmEgTmF0aW9uYWwgUGFya1xcXCIsXFxcInVzZXJcXFwiOntcXFwiaWRcXFwiOlxcXCJPZHpyQ1JZcDQ4RVxcXCIsXFxcInVwZGF0ZWRfYXRcXFwiOlxcXCIyMDE3LTA5LTI0VDE3OjI0OjM3LTA0OjAwXFxcIixcXFwidXNlcm5hbWVcXFwiOlxcXCJsdWthc25lYXNpXFxcIixcXFwibmFtZVxcXCI6XFxcIkx1a2FzIE5lYXNpXFxcIixcXFwiZmlyc3RfbmFtZVxcXCI6XFxcIkx1a2FzXFxcIixcXFwibGFzdF9uYW1lXFxcIjpcXFwiTmVhc2lcXFwiLFxcXCJ0d2l0dGVyX3VzZXJuYW1lXFxcIjpudWxsLFxcXCJwb3J0Zm9saW9fdXJsXFxcIjpcXFwiaHR0cDovL2x1a2FzbmVhc2kuY29tXFxcIixcXFwiYmlvXFxcIjpcXFwiXFxcIixcXFwibG9jYXRpb25cXFwiOlxcXCJQcmFndWVcXFwiLFxcXCJ0b3RhbF9saWtlc1xcXCI6MTQsXFxcInRvdGFsX3Bob3Rvc1xcXCI6MTAsXFxcInRvdGFsX2NvbGxlY3Rpb25zXFxcIjoxLFxcXCJwcm9maWxlX2ltYWdlXFxcIjp7XFxcInNtYWxsXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3BsYWNlaG9sZGVyLWF2YXRhcnMvZXh0cmEtbGFyZ2UuanBnP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZmFjZXMmY3M9dGlueXNyZ2ImZml0PWNyb3AmaD0zMiZ3PTMyJnM9MGFkNjhmNDRjNDcyNWQ1YTNmZGEwMTliYWI5ZDNlZGNcXFwiLFxcXCJtZWRpdW1cXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGxhY2Vob2xkZXItYXZhdGFycy9leHRyYS1sYXJnZS5qcGc/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1mYWNlcyZjcz10aW55c3JnYiZmaXQ9Y3JvcCZoPTY0Jnc9NjQmcz0zNTZiZDRiNzZhM2Q0ZWI5N2Q2M2Y0NWI4MThkZDM1OFxcXCIsXFxcImxhcmdlXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3BsYWNlaG9sZGVyLWF2YXRhcnMvZXh0cmEtbGFyZ2UuanBnP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZmFjZXMmY3M9dGlueXNyZ2ImZml0PWNyb3AmaD0xMjgmdz0xMjgmcz1lZThiYmY1ZmI4ZDZlNDNhYWFhMjM4ZmVhZTJmZTkwZFxcXCJ9LFxcXCJsaW5rc1xcXCI6e1xcXCJzZWxmXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL2x1a2FzbmVhc2lcXFwiLFxcXCJodG1sXFxcIjpcXFwiaHR0cHM6Ly91bnNwbGFzaC5jb20vQGx1a2FzbmVhc2lcXFwiLFxcXCJwaG90b3NcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvbHVrYXNuZWFzaS9waG90b3NcXFwiLFxcXCJsaWtlc1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9sdWthc25lYXNpL2xpa2VzXFxcIixcXFwicG9ydGZvbGlvXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL2x1a2FzbmVhc2kvcG9ydGZvbGlvXFxcIixcXFwiZm9sbG93aW5nXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL2x1a2FzbmVhc2kvZm9sbG93aW5nXFxcIixcXFwiZm9sbG93ZXJzXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL2x1a2FzbmVhc2kvZm9sbG93ZXJzXFxcIn19LFxcXCJjdXJyZW50X3VzZXJfY29sbGVjdGlvbnNcXFwiOltdLFxcXCJ1cmxzXFxcIjp7XFxcInJhd1xcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDU1NjU2Njc4NDk0LTRkMWI1ZjNlN2FkNFxcXCIsXFxcImZ1bGxcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQ1NTY1NjY3ODQ5NC00ZDFiNWYzZTdhZDQ/aXhsaWI9cmItMC4zLjUmcT04NSZmbT1qcGcmY3JvcD1lbnRyb3B5JmNzPXNyZ2Imcz1jYWZlZmM2ODc2YWZhNGZiYmQ1MWE0YWQ2Zjg5YTUyY1xcXCIsXFxcInJlZ3VsYXJcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQ1NTY1NjY3ODQ5NC00ZDFiNWYzZTdhZDQ/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1lbnRyb3B5JmNzPXRpbnlzcmdiJnc9MTA4MCZmaXQ9bWF4JnM9OTcyNjViZDVhOTdmNjAxZDFlZjA0ZmQ0NzRkYWUzY2ZcXFwiLFxcXCJzbWFsbFxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDU1NjU2Njc4NDk0LTRkMWI1ZjNlN2FkND9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWVudHJvcHkmY3M9dGlueXNyZ2Imdz00MDAmZml0PW1heCZzPTAxYWFlMTQyYTczMzU0MGIwZWQ2MzAyMzk3OTYwYTZjXFxcIixcXFwidGh1bWJcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQ1NTY1NjY3ODQ5NC00ZDFiNWYzZTdhZDQ/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1lbnRyb3B5JmNzPXRpbnlzcmdiJnc9MjAwJmZpdD1tYXgmcz0zNmY1MDJkOTUyZjc5NWViYWY5MzM2MmQ2NzQ4NDg3OFxcXCJ9LFxcXCJjYXRlZ29yaWVzXFxcIjpbXSxcXFwibGlua3NcXFwiOntcXFwic2VsZlxcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS9waG90b3MvNGRSeVZ5WE42TGdcXFwiLFxcXCJodG1sXFxcIjpcXFwiaHR0cHM6Ly91bnNwbGFzaC5jb20vcGhvdG9zLzRkUnlWeVhONkxnXFxcIixcXFwiZG93bmxvYWRcXFwiOlxcXCJodHRwczovL3Vuc3BsYXNoLmNvbS9waG90b3MvNGRSeVZ5WE42TGcvZG93bmxvYWRcXFwiLFxcXCJkb3dubG9hZF9sb2NhdGlvblxcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS9waG90b3MvNGRSeVZ5WE42TGcvZG93bmxvYWRcXFwifX0se1xcXCJpZFxcXCI6XFxcIlRGeWkwUU94MDhjXFxcIixcXFwiY3JlYXRlZF9hdFxcXCI6XFxcIjIwMTQtMTItMDhUMTQ6MDQ6NDgtMDU6MDBcXFwiLFxcXCJ1cGRhdGVkX2F0XFxcIjpcXFwiMjAxNy0xMC0wNlQxNjozMToxNS0wNDowMFxcXCIsXFxcIndpZHRoXFxcIjoyMjAwLFxcXCJoZWlnaHRcXFwiOjE0NjcsXFxcImNvbG9yXFxcIjpcXFwiIzkyOTc5NFxcXCIsXFxcImxpa2VzXFxcIjoxMjY4LFxcXCJsaWtlZF9ieV91c2VyXFxcIjpmYWxzZSxcXFwiZGVzY3JpcHRpb25cXFwiOlxcXCJBIHBpbmUgZm9yZXN0IHNocm91ZGVkIGluIGEgZGVuc2UgZm9nIGRlc2NlbmRpbmcgZnJvbSBhYm92ZVxcXCIsXFxcInVzZXJcXFwiOntcXFwiaWRcXFwiOlxcXCItcmNySkExYlZ0UVxcXCIsXFxcInVwZGF0ZWRfYXRcXFwiOlxcXCIyMDE3LTEwLTA1VDE0OjM0OjM4LTA0OjAwXFxcIixcXFwidXNlcm5hbWVcXFwiOlxcXCJqYXltYW50cmlcXFwiLFxcXCJuYW1lXFxcIjpcXFwiSmF5IE1hbnRyaVxcXCIsXFxcImZpcnN0X25hbWVcXFwiOlxcXCJKYXlcXFwiLFxcXCJsYXN0X25hbWVcXFwiOlxcXCJNYW50cmlcXFwiLFxcXCJ0d2l0dGVyX3VzZXJuYW1lXFxcIjpcXFwiamF5bWFudHJpXFxcIixcXFwicG9ydGZvbGlvX3VybFxcXCI6XFxcImh0dHA6Ly9qYXltYW50cmkuY29tL1xcXCIsXFxcImJpb1xcXCI6XFxcIkRlc2lnbmVyIGJ5IGRheSwgYnVyZ2VyIG1vbnN0ZXIgYnkgbmlnaHQuXFxcIixcXFwibG9jYXRpb25cXFwiOlxcXCJMb3MgQW5nZWxlcywgQ2FsaWZvcm5pYVxcXCIsXFxcInRvdGFsX2xpa2VzXFxcIjowLFxcXCJ0b3RhbF9waG90b3NcXFwiOjUsXFxcInRvdGFsX2NvbGxlY3Rpb25zXFxcIjowLFxcXCJwcm9maWxlX2ltYWdlXFxcIjp7XFxcInNtYWxsXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Byb2ZpbGUtMTUwMzAyNzY4NDgyNi1jOWM2NDI1MjliOTI/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1mYWNlcyZjcz10aW55c3JnYiZmaXQ9Y3JvcCZoPTMyJnc9MzImcz03OWEwNDBkMjhjNTU2MDllNzRhZmFiOGM1MWIyODU2YlxcXCIsXFxcIm1lZGl1bVxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9wcm9maWxlLTE1MDMwMjc2ODQ4MjYtYzljNjQyNTI5YjkyP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZmFjZXMmY3M9dGlueXNyZ2ImZml0PWNyb3AmaD02NCZ3PTY0JnM9MjlmMjRiOTg2ZjIyYTZlNDlmYjhhNzc2NzE3YmM3OWVcXFwiLFxcXCJsYXJnZVxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9wcm9maWxlLTE1MDMwMjc2ODQ4MjYtYzljNjQyNTI5YjkyP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZmFjZXMmY3M9dGlueXNyZ2ImZml0PWNyb3AmaD0xMjgmdz0xMjgmcz1kNWM1MjE1M2Q0MGVjM2Q2NmE5M2NkM2Q5MTNkZDYxMlxcXCJ9LFxcXCJsaW5rc1xcXCI6e1xcXCJzZWxmXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL2pheW1hbnRyaVxcXCIsXFxcImh0bWxcXFwiOlxcXCJodHRwczovL3Vuc3BsYXNoLmNvbS9AamF5bWFudHJpXFxcIixcXFwicGhvdG9zXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL2pheW1hbnRyaS9waG90b3NcXFwiLFxcXCJsaWtlc1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9qYXltYW50cmkvbGlrZXNcXFwiLFxcXCJwb3J0Zm9saW9cXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvamF5bWFudHJpL3BvcnRmb2xpb1xcXCIsXFxcImZvbGxvd2luZ1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9qYXltYW50cmkvZm9sbG93aW5nXFxcIixcXFwiZm9sbG93ZXJzXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL2pheW1hbnRyaS9mb2xsb3dlcnNcXFwifX0sXFxcImN1cnJlbnRfdXNlcl9jb2xsZWN0aW9uc1xcXCI6W10sXFxcInVybHNcXFwiOntcXFwicmF3XFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0MTgwNjU0NjA0ODctM2U0MWE2Yzg0ZGM1XFxcIixcXFwiZnVsbFxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDE4MDY1NDYwNDg3LTNlNDFhNmM4NGRjNT9peGxpYj1yYi0wLjMuNSZxPTg1JmZtPWpwZyZjcm9wPWVudHJvcHkmY3M9c3JnYiZzPTEwYTY4NjI3YjMxZTM5MGEwYjMwY2NhMTNjODkxYWQzXFxcIixcXFwicmVndWxhclxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDE4MDY1NDYwNDg3LTNlNDFhNmM4NGRjNT9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWVudHJvcHkmY3M9dGlueXNyZ2Imdz0xMDgwJmZpdD1tYXgmcz02ZGZmNmUzYzU3ZjVjZGE0ZTE0Y2QxZDI5ODhjNTA4M1xcXCIsXFxcInNtYWxsXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0MTgwNjU0NjA0ODctM2U0MWE2Yzg0ZGM1P2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZW50cm9weSZjcz10aW55c3JnYiZ3PTQwMCZmaXQ9bWF4JnM9ZGE3NmE1NGI2YjE3NzU2YzY0ZGZjYmE2ZGU1ZDdjZDJcXFwiLFxcXCJ0aHVtYlxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDE4MDY1NDYwNDg3LTNlNDFhNmM4NGRjNT9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWVudHJvcHkmY3M9dGlueXNyZ2Imdz0yMDAmZml0PW1heCZzPWIyNzNhYzc4MTZhN2E5MmZjZmRmOGI1MWU2NDc2ZWUyXFxcIn0sXFxcImNhdGVnb3JpZXNcXFwiOltdLFxcXCJsaW5rc1xcXCI6e1xcXCJzZWxmXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3Bob3Rvcy9URnlpMFFPeDA4Y1xcXCIsXFxcImh0bWxcXFwiOlxcXCJodHRwczovL3Vuc3BsYXNoLmNvbS9waG90b3MvVEZ5aTBRT3gwOGNcXFwiLFxcXCJkb3dubG9hZFxcXCI6XFxcImh0dHBzOi8vdW5zcGxhc2guY29tL3Bob3Rvcy9URnlpMFFPeDA4Yy9kb3dubG9hZFxcXCIsXFxcImRvd25sb2FkX2xvY2F0aW9uXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3Bob3Rvcy9URnlpMFFPeDA4Yy9kb3dubG9hZFxcXCJ9fSx7XFxcImlkXFxcIjpcXFwic3AtcDd1dVQwdHdcXFwiLFxcXCJjcmVhdGVkX2F0XFxcIjpcXFwiMjAxNS0xMS0yNFQwOTozMDo0OS0wNTowMFxcXCIsXFxcInVwZGF0ZWRfYXRcXFwiOlxcXCIyMDE3LTEwLTA1VDIxOjI1OjQyLTA0OjAwXFxcIixcXFwid2lkdGhcXFwiOjYwMDAsXFxcImhlaWdodFxcXCI6NDAwMCxcXFwiY29sb3JcXFwiOlxcXCIjNEE0NjRCXFxcIixcXFwibGlrZXNcXFwiOjQ4OSxcXFwibGlrZWRfYnlfdXNlclxcXCI6ZmFsc2UsXFxcImRlc2NyaXB0aW9uXFxcIjpudWxsLFxcXCJ1c2VyXFxcIjp7XFxcImlkXFxcIjpcXFwiOUxSOFU4eGZOdWdcXFwiLFxcXCJ1cGRhdGVkX2F0XFxcIjpcXFwiMjAxNy0xMC0wMlQxNDoxMzoyMy0wNDowMFxcXCIsXFxcInVzZXJuYW1lXFxcIjpcXFwic2ViYXN0aWFuX3VucmF1XFxcIixcXFwibmFtZVxcXCI6XFxcIlNlYmFzdGlhbiBVbnJhdVxcXCIsXFxcImZpcnN0X25hbWVcXFwiOlxcXCJTZWJhc3RpYW5cXFwiLFxcXCJsYXN0X25hbWVcXFwiOlxcXCJVbnJhdVxcXCIsXFxcInR3aXR0ZXJfdXNlcm5hbWVcXFwiOlxcXCJCYXN0aVVucmF1XFxcIixcXFwicG9ydGZvbGlvX3VybFxcXCI6XFxcImh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vc2ViYXN0aWFuX3VucmF1XFxcIixcXFwiYmlvXFxcIjpcXFwiXFxcIixcXFwibG9jYXRpb25cXFwiOlxcXCJCYWQgUHlybW9udCwgR2VybWFueVxcXCIsXFxcInRvdGFsX2xpa2VzXFxcIjozNCxcXFwidG90YWxfcGhvdG9zXFxcIjoxMyxcXFwidG90YWxfY29sbGVjdGlvbnNcXFwiOjEsXFxcInByb2ZpbGVfaW1hZ2VcXFwiOntcXFwic21hbGxcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcHJvZmlsZS0xNDYxMzM0NDExNDAyLTI3Mzg0YmYzOWMzYT9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWZhY2VzJmNzPXRpbnlzcmdiJmZpdD1jcm9wJmg9MzImdz0zMiZzPWM5NDhlMDJjNTRlNzkwYmNkMzZlOWJlMDEyNTM1MDZkXFxcIixcXFwibWVkaXVtXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Byb2ZpbGUtMTQ2MTMzNDQxMTQwMi0yNzM4NGJmMzljM2E/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1mYWNlcyZjcz10aW55c3JnYiZmaXQ9Y3JvcCZoPTY0Jnc9NjQmcz0zNGE3MGUyZDRkYjIyMWU5ODMwZWZmMWZlYWZmNDgzNFxcXCIsXFxcImxhcmdlXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Byb2ZpbGUtMTQ2MTMzNDQxMTQwMi0yNzM4NGJmMzljM2E/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1mYWNlcyZjcz10aW55c3JnYiZmaXQ9Y3JvcCZoPTEyOCZ3PTEyOCZzPTBiMjI5MjQ1NGQ3MTg2OGJkOGM4YmNjN2I3Mzc0ZDU5XFxcIn0sXFxcImxpbmtzXFxcIjp7XFxcInNlbGZcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvc2ViYXN0aWFuX3VucmF1XFxcIixcXFwiaHRtbFxcXCI6XFxcImh0dHBzOi8vdW5zcGxhc2guY29tL0BzZWJhc3RpYW5fdW5yYXVcXFwiLFxcXCJwaG90b3NcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvc2ViYXN0aWFuX3VucmF1L3Bob3Rvc1xcXCIsXFxcImxpa2VzXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL3NlYmFzdGlhbl91bnJhdS9saWtlc1xcXCIsXFxcInBvcnRmb2xpb1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9zZWJhc3RpYW5fdW5yYXUvcG9ydGZvbGlvXFxcIixcXFwiZm9sbG93aW5nXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL3NlYmFzdGlhbl91bnJhdS9mb2xsb3dpbmdcXFwiLFxcXCJmb2xsb3dlcnNcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvc2ViYXN0aWFuX3VucmF1L2ZvbGxvd2Vyc1xcXCJ9fSxcXFwiY3VycmVudF91c2VyX2NvbGxlY3Rpb25zXFxcIjpbXSxcXFwidXJsc1xcXCI6e1xcXCJyYXdcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQ0ODM3NTI0MDU4Ni04ODI3MDdkYjg4OGJcXFwiLFxcXCJmdWxsXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0NDgzNzUyNDA1ODYtODgyNzA3ZGI4ODhiP2l4bGliPXJiLTAuMy41JnE9ODUmZm09anBnJmNyb3A9ZW50cm9weSZjcz1zcmdiJnM9MTRkNDcwNWQ4NjVlNWZiMjM5ZTZlZWYzYjYyNTgyOGVcXFwiLFxcXCJyZWd1bGFyXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0NDgzNzUyNDA1ODYtODgyNzA3ZGI4ODhiP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZW50cm9weSZjcz10aW55c3JnYiZ3PTEwODAmZml0PW1heCZzPTY3Y2NiNTBlMzU4NjVjYWVmNjBlYTc3OWUzODM1OWNmXFxcIixcXFwic21hbGxcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQ0ODM3NTI0MDU4Ni04ODI3MDdkYjg4OGI/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1lbnRyb3B5JmNzPXRpbnlzcmdiJnc9NDAwJmZpdD1tYXgmcz00N2Q2ODg0ZDU4YTEzNmI5NmExZTQyZmM3OTMxMTJiZFxcXCIsXFxcInRodW1iXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0NDgzNzUyNDA1ODYtODgyNzA3ZGI4ODhiP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZW50cm9weSZjcz10aW55c3JnYiZ3PTIwMCZmaXQ9bWF4JnM9YzQyZWE0YTAzNmY5YWJmMTRmZmFhM2VjZDI4NmMxZGRcXFwifSxcXFwiY2F0ZWdvcmllc1xcXCI6W10sXFxcImxpbmtzXFxcIjp7XFxcInNlbGZcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vcGhvdG9zL3NwLXA3dXVUMHR3XFxcIixcXFwiaHRtbFxcXCI6XFxcImh0dHBzOi8vdW5zcGxhc2guY29tL3Bob3Rvcy9zcC1wN3V1VDB0d1xcXCIsXFxcImRvd25sb2FkXFxcIjpcXFwiaHR0cHM6Ly91bnNwbGFzaC5jb20vcGhvdG9zL3NwLXA3dXVUMHR3L2Rvd25sb2FkXFxcIixcXFwiZG93bmxvYWRfbG9jYXRpb25cXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vcGhvdG9zL3NwLXA3dXVUMHR3L2Rvd25sb2FkXFxcIn19LHtcXFwiaWRcXFwiOlxcXCIzeXRqRVRwUU1OWVxcXCIsXFxcImNyZWF0ZWRfYXRcXFwiOlxcXCIyMDE1LTA4LTI3VDEyOjE1OjIwLTA0OjAwXFxcIixcXFwidXBkYXRlZF9hdFxcXCI6XFxcIjIwMTctMTAtMDdUMDQ6MTc6MDUtMDQ6MDBcXFwiLFxcXCJ3aWR0aFxcXCI6NjAxNixcXFwiaGVpZ2h0XFxcIjo0MDE2LFxcXCJjb2xvclxcXCI6XFxcIiM1MzU0NTJcXFwiLFxcXCJsaWtlc1xcXCI6MTg1NyxcXFwibGlrZWRfYnlfdXNlclxcXCI6ZmFsc2UsXFxcImRlc2NyaXB0aW9uXFxcIjpcXFwiQSBkaW0gc2hvdCBvZiBmb2cgb3ZlciBhIGZvcmVzdCBpbiBEZWNvbGxhdHVyYVxcXCIsXFxcInVzZXJcXFwiOntcXFwiaWRcXFwiOlxcXCJtUGJvd1lXbloxY1xcXCIsXFxcInVwZGF0ZWRfYXRcXFwiOlxcXCIyMDE3LTA5LTIyVDE5OjI1OjA0LTA0OjAwXFxcIixcXFwidXNlcm5hbWVcXFwiOlxcXCJjYXJtaW51XFxcIixcXFwibmFtZVxcXCI6XFxcIkNhcm1pbmUgRGUgRmF6aW9cXFwiLFxcXCJmaXJzdF9uYW1lXFxcIjpcXFwiQ2FybWluZVxcXCIsXFxcImxhc3RfbmFtZVxcXCI6XFxcIkRlIEZhemlvXFxcIixcXFwidHdpdHRlcl91c2VybmFtZVxcXCI6XFxcIkNhcm1pbnNcXFwiLFxcXCJwb3J0Zm9saW9fdXJsXFxcIjpcXFwiaHR0cHM6Ly9pbnN0YWdyYW0uY29tL2Nhcm1pbnUvXFxcIixcXFwiYmlvXFxcIjpcXFwiXFxcIixcXFwibG9jYXRpb25cXFwiOm51bGwsXFxcInRvdGFsX2xpa2VzXFxcIjo3OCxcXFwidG90YWxfcGhvdG9zXFxcIjo0LFxcXCJ0b3RhbF9jb2xsZWN0aW9uc1xcXCI6MCxcXFwicHJvZmlsZV9pbWFnZVxcXCI6e1xcXCJzbWFsbFxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9wcm9maWxlLTE0NDM4OTUxMTA5OTctMzQ2Mzc2YTA2NWYxP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZmFjZXMmY3M9dGlueXNyZ2ImZml0PWNyb3AmaD0zMiZ3PTMyJnM9OTdjNDQwOTUxYTViZmUxYjBlYjEzNzg5NDUyN2YwN2NcXFwiLFxcXCJtZWRpdW1cXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcHJvZmlsZS0xNDQzODk1MTEwOTk3LTM0NjM3NmEwNjVmMT9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWZhY2VzJmNzPXRpbnlzcmdiJmZpdD1jcm9wJmg9NjQmdz02NCZzPTdlMWVhMzRiMGQ2MmFjMDJiYjcxNTcxOTU1YzY0NmU5XFxcIixcXFwibGFyZ2VcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcHJvZmlsZS0xNDQzODk1MTEwOTk3LTM0NjM3NmEwNjVmMT9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWZhY2VzJmNzPXRpbnlzcmdiJmZpdD1jcm9wJmg9MTI4Jnc9MTI4JnM9ZjY4MzA4MzgwZjYwZjkzNmIxNDc3MGEyZGRjMDkyYzRcXFwifSxcXFwibGlua3NcXFwiOntcXFwic2VsZlxcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9jYXJtaW51XFxcIixcXFwiaHRtbFxcXCI6XFxcImh0dHBzOi8vdW5zcGxhc2guY29tL0BjYXJtaW51XFxcIixcXFwicGhvdG9zXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL2Nhcm1pbnUvcGhvdG9zXFxcIixcXFwibGlrZXNcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvY2FybWludS9saWtlc1xcXCIsXFxcInBvcnRmb2xpb1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9jYXJtaW51L3BvcnRmb2xpb1xcXCIsXFxcImZvbGxvd2luZ1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9jYXJtaW51L2ZvbGxvd2luZ1xcXCIsXFxcImZvbGxvd2Vyc1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9jYXJtaW51L2ZvbGxvd2Vyc1xcXCJ9fSxcXFwiY3VycmVudF91c2VyX2NvbGxlY3Rpb25zXFxcIjpbXSxcXFwidXJsc1xcXCI6e1xcXCJyYXdcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQ0MDY4ODgwNzczMC03M2U0ZTIxNjlmYjhcXFwiLFxcXCJmdWxsXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0NDA2ODg4MDc3MzAtNzNlNGUyMTY5ZmI4P2l4bGliPXJiLTAuMy41JnE9ODUmZm09anBnJmNyb3A9ZW50cm9weSZjcz1zcmdiJnM9MDJhY2NlMDFhNjEyMTE2MzIwNTViYzVmY2U4ZDAxMmZcXFwiLFxcXCJyZWd1bGFyXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0NDA2ODg4MDc3MzAtNzNlNGUyMTY5ZmI4P2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZW50cm9weSZjcz10aW55c3JnYiZ3PTEwODAmZml0PW1heCZzPTk3N2NmNzU3ZmExZjI0ZjJkMWU4NjRhNGFhNThhYWU4XFxcIixcXFwic21hbGxcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQ0MDY4ODgwNzczMC03M2U0ZTIxNjlmYjg/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1lbnRyb3B5JmNzPXRpbnlzcmdiJnc9NDAwJmZpdD1tYXgmcz1kMmE3YjEzN2U3ZDBmYTFjZDU4NGQ3ZDc5NmUwMDY5N1xcXCIsXFxcInRodW1iXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0NDA2ODg4MDc3MzAtNzNlNGUyMTY5ZmI4P2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZW50cm9weSZjcz10aW55c3JnYiZ3PTIwMCZmaXQ9bWF4JnM9ODAyNjhlNjFkMWRiNjJhN2UzOGQ3YmU5YTMwNTkxYmVcXFwifSxcXFwiY2F0ZWdvcmllc1xcXCI6W10sXFxcImxpbmtzXFxcIjp7XFxcInNlbGZcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vcGhvdG9zLzN5dGpFVHBRTU5ZXFxcIixcXFwiaHRtbFxcXCI6XFxcImh0dHBzOi8vdW5zcGxhc2guY29tL3Bob3Rvcy8zeXRqRVRwUU1OWVxcXCIsXFxcImRvd25sb2FkXFxcIjpcXFwiaHR0cHM6Ly91bnNwbGFzaC5jb20vcGhvdG9zLzN5dGpFVHBRTU5ZL2Rvd25sb2FkXFxcIixcXFwiZG93bmxvYWRfbG9jYXRpb25cXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vcGhvdG9zLzN5dGpFVHBRTU5ZL2Rvd25sb2FkXFxcIn19LHtcXFwiaWRcXFwiOlxcXCJ4NDhRTDhnTllaOFxcXCIsXFxcImNyZWF0ZWRfYXRcXFwiOlxcXCIyMDE1LTEwLTI5VDAzOjQ4OjI2LTA0OjAwXFxcIixcXFwidXBkYXRlZF9hdFxcXCI6XFxcIjIwMTctMTAtMDJUMTE6MDI6MDgtMDQ6MDBcXFwiLFxcXCJ3aWR0aFxcXCI6NDkyOCxcXFwiaGVpZ2h0XFxcIjozMjY0LFxcXCJjb2xvclxcXCI6XFxcIiM0NzQ4NDJcXFwiLFxcXCJsaWtlc1xcXCI6MzcyLFxcXCJsaWtlZF9ieV91c2VyXFxcIjpmYWxzZSxcXFwiZGVzY3JpcHRpb25cXFwiOlxcXCJBIGxpZ2h0IGZvZyBvbiB0aGUgdHJhaWwgdGhyb3VnaCB0aGUgZm9yZXN0IGluIE11c3p5bmEgWmRyw7NqXFxcIixcXFwidXNlclxcXCI6e1xcXCJpZFxcXCI6XFxcIlM0VDh6eExxMXZJXFxcIixcXFwidXBkYXRlZF9hdFxcXCI6XFxcIjIwMTctMTAtMDFUMTY6MzE6MjMtMDQ6MDBcXFwiLFxcXCJ1c2VybmFtZVxcXCI6XFxcImFsaWVub3dpY3pcXFwiLFxcXCJuYW1lXFxcIjpcXFwiQXJ0dXIgUnV0a293c2tpXFxcIixcXFwiZmlyc3RfbmFtZVxcXCI6XFxcIkFydHVyXFxcIixcXFwibGFzdF9uYW1lXFxcIjpcXFwiUnV0a293c2tpXFxcIixcXFwidHdpdHRlcl91c2VybmFtZVxcXCI6bnVsbCxcXFwicG9ydGZvbGlvX3VybFxcXCI6XFxcImh0dHA6Ly93d3cuYXJ0dXJycm8ucGwvXFxcIixcXFwiYmlvXFxcIjpcXFwiSGksIFxcXFxyXFxcXG5JJ20gR3JhcGhpYyBEZXNpZ25lciBhbmQgQW1hdGV1ciBQaG90b2dyYXBoZXIgZm9yb20gV2Fyc2F3LCBQb2xhbmQuXFxcXHJcXFxcblxcXCIsXFxcImxvY2F0aW9uXFxcIjpcXFwiV2Fyc2F3LCBQb2xhbmRcXFwiLFxcXCJ0b3RhbF9saWtlc1xcXCI6NDcsXFxcInRvdGFsX3Bob3Rvc1xcXCI6OCxcXFwidG90YWxfY29sbGVjdGlvbnNcXFwiOjAsXFxcInByb2ZpbGVfaW1hZ2VcXFwiOntcXFwic21hbGxcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcHJvZmlsZS0xNTAxNDE2MTI2NjI2LWY3MGRkNDM2NzYxNz9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWZhY2VzJmNzPXRpbnlzcmdiJmZpdD1jcm9wJmg9MzImdz0zMiZzPWFkODEzOGExM2EyNDg5YTAzNDA1OGVkNzhjMDU4OGNkXFxcIixcXFwibWVkaXVtXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Byb2ZpbGUtMTUwMTQxNjEyNjYyNi1mNzBkZDQzNjc2MTc/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1mYWNlcyZjcz10aW55c3JnYiZmaXQ9Y3JvcCZoPTY0Jnc9NjQmcz1hNTQ3MWE5MDRmMWNjM2YwNWY5YThhZmMzYTk5NzNmNlxcXCIsXFxcImxhcmdlXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Byb2ZpbGUtMTUwMTQxNjEyNjYyNi1mNzBkZDQzNjc2MTc/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1mYWNlcyZjcz10aW55c3JnYiZmaXQ9Y3JvcCZoPTEyOCZ3PTEyOCZzPWQwYWJjZDE3OWU2NThmMzNkYzRkM2YwZTc2YzYyYmFjXFxcIn0sXFxcImxpbmtzXFxcIjp7XFxcInNlbGZcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvYWxpZW5vd2ljelxcXCIsXFxcImh0bWxcXFwiOlxcXCJodHRwczovL3Vuc3BsYXNoLmNvbS9AYWxpZW5vd2ljelxcXCIsXFxcInBob3Rvc1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9hbGllbm93aWN6L3Bob3Rvc1xcXCIsXFxcImxpa2VzXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL2FsaWVub3dpY3ovbGlrZXNcXFwiLFxcXCJwb3J0Zm9saW9cXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvYWxpZW5vd2ljei9wb3J0Zm9saW9cXFwiLFxcXCJmb2xsb3dpbmdcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvYWxpZW5vd2ljei9mb2xsb3dpbmdcXFwiLFxcXCJmb2xsb3dlcnNcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvYWxpZW5vd2ljei9mb2xsb3dlcnNcXFwifX0sXFxcImN1cnJlbnRfdXNlcl9jb2xsZWN0aW9uc1xcXCI6W10sXFxcInVybHNcXFwiOntcXFwicmF3XFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0NDYxMDQ4Mzg0NzUtYmM2NTA4MTg0ZjA4XFxcIixcXFwiZnVsbFxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDQ2MTA0ODM4NDc1LWJjNjUwODE4NGYwOD9peGxpYj1yYi0wLjMuNSZxPTg1JmZtPWpwZyZjcm9wPWVudHJvcHkmY3M9c3JnYiZzPTI2ZjRiYmU4YjI4ZmYxZDg3Mjc4YTRhZjVmOWUyNTVhXFxcIixcXFwicmVndWxhclxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDQ2MTA0ODM4NDc1LWJjNjUwODE4NGYwOD9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWVudHJvcHkmY3M9dGlueXNyZ2Imdz0xMDgwJmZpdD1tYXgmcz05MTRhY2RjMTE5YzY4YmZmNWViYTNlMjYxNTJjNWUzYVxcXCIsXFxcInNtYWxsXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0NDYxMDQ4Mzg0NzUtYmM2NTA4MTg0ZjA4P2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZW50cm9weSZjcz10aW55c3JnYiZ3PTQwMCZmaXQ9bWF4JnM9ZGJlYTM2N2QyMTMzOWQwN2NlMWNkMTMwNjlhYjczZThcXFwiLFxcXCJ0aHVtYlxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDQ2MTA0ODM4NDc1LWJjNjUwODE4NGYwOD9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWVudHJvcHkmY3M9dGlueXNyZ2Imdz0yMDAmZml0PW1heCZzPWU4MDM5NjNkMDhjOTY5NjY1YThiYmI5YWIwNGY2NWM3XFxcIn0sXFxcImNhdGVnb3JpZXNcXFwiOltdLFxcXCJsaW5rc1xcXCI6e1xcXCJzZWxmXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3Bob3Rvcy94NDhRTDhnTllaOFxcXCIsXFxcImh0bWxcXFwiOlxcXCJodHRwczovL3Vuc3BsYXNoLmNvbS9waG90b3MveDQ4UUw4Z05ZWjhcXFwiLFxcXCJkb3dubG9hZFxcXCI6XFxcImh0dHBzOi8vdW5zcGxhc2guY29tL3Bob3Rvcy94NDhRTDhnTllaOC9kb3dubG9hZFxcXCIsXFxcImRvd25sb2FkX2xvY2F0aW9uXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3Bob3Rvcy94NDhRTDhnTllaOC9kb3dubG9hZFxcXCJ9fSx7XFxcImlkXFxcIjpcXFwiZGt6bFRwTVlZTVFcXFwiLFxcXCJjcmVhdGVkX2F0XFxcIjpcXFwiMjAxNS0xMC0yM1QwNzo0MzozOC0wNDowMFxcXCIsXFxcInVwZGF0ZWRfYXRcXFwiOlxcXCIyMDE3LTEwLTAyVDIwOjU5OjIzLTA0OjAwXFxcIixcXFwid2lkdGhcXFwiOjU3NjAsXFxcImhlaWdodFxcXCI6Mzg0MCxcXFwiY29sb3JcXFwiOlxcXCIjM0Y1ODUwXFxcIixcXFwibGlrZXNcXFwiOjE5OSxcXFwibGlrZWRfYnlfdXNlclxcXCI6ZmFsc2UsXFxcImRlc2NyaXB0aW9uXFxcIjpudWxsLFxcXCJ1c2VyXFxcIjp7XFxcImlkXFxcIjpcXFwiNmhoN2ZGbUNwbGtcXFwiLFxcXCJ1cGRhdGVkX2F0XFxcIjpcXFwiMjAxNy0wOS0yMlQxMzo0NDowMC0wNDowMFxcXCIsXFxcInVzZXJuYW1lXFxcIjpcXFwid2Z1bGxlclxcXCIsXFxcIm5hbWVcXFwiOlxcXCJXaWxsIEZ1bGxlclxcXCIsXFxcImZpcnN0X25hbWVcXFwiOlxcXCJXaWxsXFxcIixcXFwibGFzdF9uYW1lXFxcIjpcXFwiRnVsbGVyXFxcIixcXFwidHdpdHRlcl91c2VybmFtZVxcXCI6XFxcIndpbGxfZnVsbGVyXFxcIixcXFwicG9ydGZvbGlvX3VybFxcXCI6XFxcImh0dHA6Ly93aWxsZnVsbGVycGhvdG9ncmFwaHkuY29tL1xcXCIsXFxcImJpb1xcXCI6XFxcIlxcXCIsXFxcImxvY2F0aW9uXFxcIjpudWxsLFxcXCJ0b3RhbF9saWtlc1xcXCI6MzIsXFxcInRvdGFsX3Bob3Rvc1xcXCI6MyxcXFwidG90YWxfY29sbGVjdGlvbnNcXFwiOjAsXFxcInByb2ZpbGVfaW1hZ2VcXFwiOntcXFwic21hbGxcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcHJvZmlsZS1mYi0xNDQ1NTU1MTg5LTliZTEzMWFjNDc3ZC5qcGc/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1mYWNlcyZjcz10aW55c3JnYiZmaXQ9Y3JvcCZoPTMyJnc9MzImcz1jYTg1YWJlOTdkYmM4NGZlZDhhOTYxNTMwOTg0MmEyOFxcXCIsXFxcIm1lZGl1bVxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9wcm9maWxlLWZiLTE0NDU1NTUxODktOWJlMTMxYWM0NzdkLmpwZz9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWZhY2VzJmNzPXRpbnlzcmdiJmZpdD1jcm9wJmg9NjQmdz02NCZzPTUwNzNjMjRmZjY2NjlkNWM3OGI3NDUwOTkyOGZkM2M2XFxcIixcXFwibGFyZ2VcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcHJvZmlsZS1mYi0xNDQ1NTU1MTg5LTliZTEzMWFjNDc3ZC5qcGc/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1mYWNlcyZjcz10aW55c3JnYiZmaXQ9Y3JvcCZoPTEyOCZ3PTEyOCZzPTcyZWE1NWNhMGZhYzE0MzhiOGI4MzNjNzMxNTg3NzgxXFxcIn0sXFxcImxpbmtzXFxcIjp7XFxcInNlbGZcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvd2Z1bGxlclxcXCIsXFxcImh0bWxcXFwiOlxcXCJodHRwczovL3Vuc3BsYXNoLmNvbS9Ad2Z1bGxlclxcXCIsXFxcInBob3Rvc1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy93ZnVsbGVyL3Bob3Rvc1xcXCIsXFxcImxpa2VzXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL3dmdWxsZXIvbGlrZXNcXFwiLFxcXCJwb3J0Zm9saW9cXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvd2Z1bGxlci9wb3J0Zm9saW9cXFwiLFxcXCJmb2xsb3dpbmdcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvd2Z1bGxlci9mb2xsb3dpbmdcXFwiLFxcXCJmb2xsb3dlcnNcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvd2Z1bGxlci9mb2xsb3dlcnNcXFwifX0sXFxcImN1cnJlbnRfdXNlcl9jb2xsZWN0aW9uc1xcXCI6W10sXFxcInVybHNcXFwiOntcXFwicmF3XFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0NDU2MDA1MjMxMDAtZDViOTliNjY0YmRhXFxcIixcXFwiZnVsbFxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDQ1NjAwNTIzMTAwLWQ1Yjk5YjY2NGJkYT9peGxpYj1yYi0wLjMuNSZxPTg1JmZtPWpwZyZjcm9wPWVudHJvcHkmY3M9c3JnYiZzPWQyM2MxNzM1MDM2NWI1NTViOTdiMzhjMWFmZmM1OTU5XFxcIixcXFwicmVndWxhclxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDQ1NjAwNTIzMTAwLWQ1Yjk5YjY2NGJkYT9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWVudHJvcHkmY3M9dGlueXNyZ2Imdz0xMDgwJmZpdD1tYXgmcz1iMTI2OTc4NTdjNTI3Mjc3NGUzY2I5YmJiZWIyYjE4ZVxcXCIsXFxcInNtYWxsXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0NDU2MDA1MjMxMDAtZDViOTliNjY0YmRhP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZW50cm9weSZjcz10aW55c3JnYiZ3PTQwMCZmaXQ9bWF4JnM9ZmUxNWQzYWZlYWQ3MTYzMjEzNWRiMTM3OGNkNDZmODFcXFwiLFxcXCJ0aHVtYlxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDQ1NjAwNTIzMTAwLWQ1Yjk5YjY2NGJkYT9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWVudHJvcHkmY3M9dGlueXNyZ2Imdz0yMDAmZml0PW1heCZzPTQ0Y2FlZmNjNWNiODMwZDVhMDBjYWMyOTY1YjIyMDQyXFxcIn0sXFxcImNhdGVnb3JpZXNcXFwiOltdLFxcXCJsaW5rc1xcXCI6e1xcXCJzZWxmXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3Bob3Rvcy9ka3psVHBNWVlNUVxcXCIsXFxcImh0bWxcXFwiOlxcXCJodHRwczovL3Vuc3BsYXNoLmNvbS9waG90b3MvZGt6bFRwTVlZTVFcXFwiLFxcXCJkb3dubG9hZFxcXCI6XFxcImh0dHBzOi8vdW5zcGxhc2guY29tL3Bob3Rvcy9ka3psVHBNWVlNUS9kb3dubG9hZFxcXCIsXFxcImRvd25sb2FkX2xvY2F0aW9uXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3Bob3Rvcy9ka3psVHBNWVlNUS9kb3dubG9hZFxcXCJ9fSx7XFxcImlkXFxcIjpcXFwiUDhQbEsybkd3cUFcXFwiLFxcXCJjcmVhdGVkX2F0XFxcIjpcXFwiMjAxNi0xMC0yNFQxMToyMzoxOC0wNDowMFxcXCIsXFxcInVwZGF0ZWRfYXRcXFwiOlxcXCIyMDE3LTEwLTA2VDE1OjUwOjMzLTA0OjAwXFxcIixcXFwid2lkdGhcXFwiOjIzMjksXFxcImhlaWdodFxcXCI6MTYzOSxcXFwiY29sb3JcXFwiOlxcXCIjRUZGMUYyXFxcIixcXFwibGlrZXNcXFwiOjUzNCxcXFwibGlrZWRfYnlfdXNlclxcXCI6ZmFsc2UsXFxcImRlc2NyaXB0aW9uXFxcIjpcXFwiQSBzbWFsbCBpc2xhbmQgd2l0aCBhIGNsdW1wIG9mIGV2ZXJncmVlbiB0cmVlcyBvbiBhIGxha2VcXFwiLFxcXCJ1c2VyXFxcIjp7XFxcImlkXFxcIjpcXFwicWJra05xRUFIaDhcXFwiLFxcXCJ1cGRhdGVkX2F0XFxcIjpcXFwiMjAxNy0wOS0yMlQxMjo1NDo0Ny0wNDowMFxcXCIsXFxcInVzZXJuYW1lXFxcIjpcXFwianVhbnN0ZXJcXFwiLFxcXCJuYW1lXFxcIjpcXFwiSnVhbiBEYXZpbGFcXFwiLFxcXCJmaXJzdF9uYW1lXFxcIjpcXFwiSnVhblxcXCIsXFxcImxhc3RfbmFtZVxcXCI6XFxcIkRhdmlsYVxcXCIsXFxcInR3aXR0ZXJfdXNlcm5hbWVcXFwiOlxcXCJqdWFuc3Rlcm1vbnN0ZXJcXFwiLFxcXCJwb3J0Zm9saW9fdXJsXFxcIjpcXFwiaHR0cDovL29uZWRhdmlsYS5jb20vXFxcIixcXFwiYmlvXFxcIjpcXFwiSeKAmW0gYSBUb3JvbnRvIGJhc2VkIHBob3RvZ3JhcGhlciBhbmQgZGVzaWduZXIuIFxcXFxyXFxcXG5cXFxcclxcXFxuXFxcXHJcXFxcblxcXFxyXFxcXG5cXFxcclxcXFxuXFxcXHJcXFxcblNheSBoZWxsbyFcXFxcclxcXFxuXFxcXHJcXFxcblxcXFxyXFxcXG5cXFxcclxcXFxuXFxcXHJcXFxcblxcXFxyXFxcXG5FTUFJTDogaGVsbG9Ab25lZGF2aWxhLmNvbVxcXFxyXFxcXG5cXFxcclxcXFxuXFxcXHJcXFxcblxcXCIsXFxcImxvY2F0aW9uXFxcIjpcXFwiVG9yb250bywgQ2FuYWRhXFxcIixcXFwidG90YWxfbGlrZXNcXFwiOjEsXFxcInRvdGFsX3Bob3Rvc1xcXCI6MTUsXFxcInRvdGFsX2NvbGxlY3Rpb25zXFxcIjowLFxcXCJwcm9maWxlX2ltYWdlXFxcIjp7XFxcInNtYWxsXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Byb2ZpbGUtMTQ0NjI0MjA4NzkyNS02YjI5MWZhN2RlNWY/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1mYWNlcyZjcz10aW55c3JnYiZmaXQ9Y3JvcCZoPTMyJnc9MzImcz1hZWFiNzQwYjg0MDNjMWM2MjgzNTExMjc4OWQ4OTA5ZFxcXCIsXFxcIm1lZGl1bVxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9wcm9maWxlLTE0NDYyNDIwODc5MjUtNmIyOTFmYTdkZTVmP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZmFjZXMmY3M9dGlueXNyZ2ImZml0PWNyb3AmaD02NCZ3PTY0JnM9MjBjMGYxNWE4MWM2N2EzM2VlNjM4YjFhNDNiNWFjZDNcXFwiLFxcXCJsYXJnZVxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9wcm9maWxlLTE0NDYyNDIwODc5MjUtNmIyOTFmYTdkZTVmP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZmFjZXMmY3M9dGlueXNyZ2ImZml0PWNyb3AmaD0xMjgmdz0xMjgmcz00MmIzMTQ0Y2I4NTE5MzA3Nzg3NDFkZTcxNDhjYTkxOVxcXCJ9LFxcXCJsaW5rc1xcXCI6e1xcXCJzZWxmXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL2p1YW5zdGVyXFxcIixcXFwiaHRtbFxcXCI6XFxcImh0dHBzOi8vdW5zcGxhc2guY29tL0BqdWFuc3RlclxcXCIsXFxcInBob3Rvc1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9qdWFuc3Rlci9waG90b3NcXFwiLFxcXCJsaWtlc1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9qdWFuc3Rlci9saWtlc1xcXCIsXFxcInBvcnRmb2xpb1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9qdWFuc3Rlci9wb3J0Zm9saW9cXFwiLFxcXCJmb2xsb3dpbmdcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvanVhbnN0ZXIvZm9sbG93aW5nXFxcIixcXFwiZm9sbG93ZXJzXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL2p1YW5zdGVyL2ZvbGxvd2Vyc1xcXCJ9fSxcXFwiY3VycmVudF91c2VyX2NvbGxlY3Rpb25zXFxcIjpbXSxcXFwidXJsc1xcXCI6e1xcXCJyYXdcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQ3NzMyMjUyNDc0NC0wZWVjZTllNzk2NDBcXFwiLFxcXCJmdWxsXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0NzczMjI1MjQ3NDQtMGVlY2U5ZTc5NjQwP2l4bGliPXJiLTAuMy41JnE9ODUmZm09anBnJmNyb3A9ZW50cm9weSZjcz1zcmdiJnM9MmZlZjllNWM2N2NiZWU5NWE1Yjc3NDMwNTE3ZjMxZjJcXFwiLFxcXCJyZWd1bGFyXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0NzczMjI1MjQ3NDQtMGVlY2U5ZTc5NjQwP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZW50cm9weSZjcz10aW55c3JnYiZ3PTEwODAmZml0PW1heCZzPTViZWYzYzUyOTg4MmYyYjlkMDcyYzAxNTkzYTM0NjczXFxcIixcXFwic21hbGxcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQ3NzMyMjUyNDc0NC0wZWVjZTllNzk2NDA/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1lbnRyb3B5JmNzPXRpbnlzcmdiJnc9NDAwJmZpdD1tYXgmcz1kODk5ZDc4NWVhMWExMDQzMDBlODU5YTE1ZmMyOTQxZlxcXCIsXFxcInRodW1iXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0NzczMjI1MjQ3NDQtMGVlY2U5ZTc5NjQwP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZW50cm9weSZjcz10aW55c3JnYiZ3PTIwMCZmaXQ9bWF4JnM9MjAwYzA1YjdkZjcwN2M1MjNiODUzZDA1ZWQyY2FjNTFcXFwifSxcXFwiY2F0ZWdvcmllc1xcXCI6W10sXFxcImxpbmtzXFxcIjp7XFxcInNlbGZcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vcGhvdG9zL1A4UGxLMm5Hd3FBXFxcIixcXFwiaHRtbFxcXCI6XFxcImh0dHBzOi8vdW5zcGxhc2guY29tL3Bob3Rvcy9QOFBsSzJuR3dxQVxcXCIsXFxcImRvd25sb2FkXFxcIjpcXFwiaHR0cHM6Ly91bnNwbGFzaC5jb20vcGhvdG9zL1A4UGxLMm5Hd3FBL2Rvd25sb2FkXFxcIixcXFwiZG93bmxvYWRfbG9jYXRpb25cXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vcGhvdG9zL1A4UGxLMm5Hd3FBL2Rvd25sb2FkXFxcIn19LHtcXFwiaWRcXFwiOlxcXCJXSDRlME5Wc2xzY1xcXCIsXFxcImNyZWF0ZWRfYXRcXFwiOlxcXCIyMDE1LTA4LTAyVDA3OjI3OjIxLTA0OjAwXFxcIixcXFwidXBkYXRlZF9hdFxcXCI6XFxcIjIwMTctMTAtMDNUMDk6MTM6MTktMDQ6MDBcXFwiLFxcXCJ3aWR0aFxcXCI6NTE4NCxcXFwiaGVpZ2h0XFxcIjozNDU2LFxcXCJjb2xvclxcXCI6XFxcIiM0MTNDMkFcXFwiLFxcXCJsaWtlc1xcXCI6OTYsXFxcImxpa2VkX2J5X3VzZXJcXFwiOmZhbHNlLFxcXCJkZXNjcmlwdGlvblxcXCI6XFxcIkFuIG92ZXJncm93biBwYXRoIHRocm91Z2ggYSBjb25pZmVyb3VzIGZvcmVzdFxcXCIsXFxcInVzZXJcXFwiOntcXFwiaWRcXFwiOlxcXCJuZlp5VE0wUl9USVxcXCIsXFxcInVwZGF0ZWRfYXRcXFwiOlxcXCIyMDE3LTA5LTIxVDEwOjE3OjA3LTA0OjAwXFxcIixcXFwidXNlcm5hbWVcXFwiOlxcXCJuZWNoXFxcIixcXFwibmFtZVxcXCI6XFxcIktpcmlsbCBOZWNobW9ueWFcXFwiLFxcXCJmaXJzdF9uYW1lXFxcIjpcXFwiS2lyaWxsXFxcIixcXFwibGFzdF9uYW1lXFxcIjpcXFwiTmVjaG1vbnlhXFxcIixcXFwidHdpdHRlcl91c2VybmFtZVxcXCI6bnVsbCxcXFwicG9ydGZvbGlvX3VybFxcXCI6XFxcImh0dHA6Ly9taXJjb3Byb2R1Y3Rpb24uY29tL1xcXCIsXFxcImJpb1xcXCI6XFxcIlxcXCIsXFxcImxvY2F0aW9uXFxcIjpudWxsLFxcXCJ0b3RhbF9saWtlc1xcXCI6MyxcXFwidG90YWxfcGhvdG9zXFxcIjoxMSxcXFwidG90YWxfY29sbGVjdGlvbnNcXFwiOjAsXFxcInByb2ZpbGVfaW1hZ2VcXFwiOntcXFwic21hbGxcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGxhY2Vob2xkZXItYXZhdGFycy9leHRyYS1sYXJnZS5qcGc/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1mYWNlcyZjcz10aW55c3JnYiZmaXQ9Y3JvcCZoPTMyJnc9MzImcz0wYWQ2OGY0NGM0NzI1ZDVhM2ZkYTAxOWJhYjlkM2VkY1xcXCIsXFxcIm1lZGl1bVxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9wbGFjZWhvbGRlci1hdmF0YXJzL2V4dHJhLWxhcmdlLmpwZz9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWZhY2VzJmNzPXRpbnlzcmdiJmZpdD1jcm9wJmg9NjQmdz02NCZzPTM1NmJkNGI3NmEzZDRlYjk3ZDYzZjQ1YjgxOGRkMzU4XFxcIixcXFwibGFyZ2VcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGxhY2Vob2xkZXItYXZhdGFycy9leHRyYS1sYXJnZS5qcGc/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1mYWNlcyZjcz10aW55c3JnYiZmaXQ9Y3JvcCZoPTEyOCZ3PTEyOCZzPWVlOGJiZjVmYjhkNmU0M2FhYWEyMzhmZWFlMmZlOTBkXFxcIn0sXFxcImxpbmtzXFxcIjp7XFxcInNlbGZcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvbmVjaFxcXCIsXFxcImh0bWxcXFwiOlxcXCJodHRwczovL3Vuc3BsYXNoLmNvbS9AbmVjaFxcXCIsXFxcInBob3Rvc1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9uZWNoL3Bob3Rvc1xcXCIsXFxcImxpa2VzXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL25lY2gvbGlrZXNcXFwiLFxcXCJwb3J0Zm9saW9cXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvbmVjaC9wb3J0Zm9saW9cXFwiLFxcXCJmb2xsb3dpbmdcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvbmVjaC9mb2xsb3dpbmdcXFwiLFxcXCJmb2xsb3dlcnNcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvbmVjaC9mb2xsb3dlcnNcXFwifX0sXFxcImN1cnJlbnRfdXNlcl9jb2xsZWN0aW9uc1xcXCI6W10sXFxcInVybHNcXFwiOntcXFwicmF3XFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0Mzg1MTQ3OTQ2MjgtNmFkMjUxNDdiMWQ0XFxcIixcXFwiZnVsbFxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDM4NTE0Nzk0NjI4LTZhZDI1MTQ3YjFkND9peGxpYj1yYi0wLjMuNSZxPTg1JmZtPWpwZyZjcm9wPWVudHJvcHkmY3M9c3JnYiZzPTg1M2Q3ZGYxNjY4NmZlZTlkOTQ0Y2YzZDI3ZWZiN2VlXFxcIixcXFwicmVndWxhclxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDM4NTE0Nzk0NjI4LTZhZDI1MTQ3YjFkND9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWVudHJvcHkmY3M9dGlueXNyZ2Imdz0xMDgwJmZpdD1tYXgmcz02ZTgyOGIyNmIwNzc5OTRjMTIzODk3MzQ2Y2RhNGIxMVxcXCIsXFxcInNtYWxsXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0Mzg1MTQ3OTQ2MjgtNmFkMjUxNDdiMWQ0P2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZW50cm9weSZjcz10aW55c3JnYiZ3PTQwMCZmaXQ9bWF4JnM9ODc4NzE5ODE2NDlmN2FhZjZlZGIzMWU2NjBmMGI2YmFcXFwiLFxcXCJ0aHVtYlxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDM4NTE0Nzk0NjI4LTZhZDI1MTQ3YjFkND9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWVudHJvcHkmY3M9dGlueXNyZ2Imdz0yMDAmZml0PW1heCZzPTgyOTI4NWZhNGI0NjliNmYyOTkwNzBkZjMyYzRkNjI2XFxcIn0sXFxcImNhdGVnb3JpZXNcXFwiOltdLFxcXCJsaW5rc1xcXCI6e1xcXCJzZWxmXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3Bob3Rvcy9XSDRlME5Wc2xzY1xcXCIsXFxcImh0bWxcXFwiOlxcXCJodHRwczovL3Vuc3BsYXNoLmNvbS9waG90b3MvV0g0ZTBOVnNsc2NcXFwiLFxcXCJkb3dubG9hZFxcXCI6XFxcImh0dHBzOi8vdW5zcGxhc2guY29tL3Bob3Rvcy9XSDRlME5Wc2xzYy9kb3dubG9hZFxcXCIsXFxcImRvd25sb2FkX2xvY2F0aW9uXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3Bob3Rvcy9XSDRlME5Wc2xzYy9kb3dubG9hZFxcXCJ9fSx7XFxcImlkXFxcIjpcXFwiOUYyMnpIZDZkbU1cXFwiLFxcXCJjcmVhdGVkX2F0XFxcIjpcXFwiMjAxNi0wMy0yNVQxNTo1MTowMC0wNDowMFxcXCIsXFxcInVwZGF0ZWRfYXRcXFwiOlxcXCIyMDE3LTEwLTAyVDE5OjE0OjI4LTA0OjAwXFxcIixcXFwid2lkdGhcXFwiOjQ5MDAsXFxcImhlaWdodFxcXCI6MzI2NyxcXFwiY29sb3JcXFwiOlxcXCIjMTMxMzEzXFxcIixcXFwibGlrZXNcXFwiOjEzOSxcXFwibGlrZWRfYnlfdXNlclxcXCI6ZmFsc2UsXFxcImRlc2NyaXB0aW9uXFxcIjpudWxsLFxcXCJ1c2VyXFxcIjp7XFxcImlkXFxcIjpcXFwieHFpc2NidEdkUGNcXFwiLFxcXCJ1cGRhdGVkX2F0XFxcIjpcXFwiMjAxNy0xMC0wNVQwNzo0NToxOC0wNDowMFxcXCIsXFxcInVzZXJuYW1lXFxcIjpcXFwidGVkZHlrZWxsZXlcXFwiLFxcXCJuYW1lXFxcIjpcXFwiVGVkZHkgS2VsbGV5XFxcIixcXFwiZmlyc3RfbmFtZVxcXCI6XFxcIlRlZGR5XFxcIixcXFwibGFzdF9uYW1lXFxcIjpcXFwiS2VsbGV5XFxcIixcXFwidHdpdHRlcl91c2VybmFtZVxcXCI6bnVsbCxcXFwicG9ydGZvbGlvX3VybFxcXCI6XFxcImh0dHBzOi8vdGVkZHlrZWxsZXkuc211Z211Zy5jb21cXFwiLFxcXCJiaW9cXFwiOlxcXCJJbnN0YWdyYW0gQFNpbXBsZXIuVGltZXNcXFxcclxcXFxuXFxcXHJcXFxcbnRlZGR5a2VsbGV5QGdtYWlsLmNvbVxcXCIsXFxcImxvY2F0aW9uXFxcIjpudWxsLFxcXCJ0b3RhbF9saWtlc1xcXCI6NDQsXFxcInRvdGFsX3Bob3Rvc1xcXCI6NDEsXFxcInRvdGFsX2NvbGxlY3Rpb25zXFxcIjowLFxcXCJwcm9maWxlX2ltYWdlXFxcIjp7XFxcInNtYWxsXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Byb2ZpbGUtMTQ1NDk5NDcwMTI0OC1lYTVjZWU0NzI2ZjQ/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1mYWNlcyZjcz10aW55c3JnYiZmaXQ9Y3JvcCZoPTMyJnc9MzImcz1kMDVhNDk3YTk3ODAzNmU2ZGYyNDJmMTI4NjBhZTYwYVxcXCIsXFxcIm1lZGl1bVxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9wcm9maWxlLTE0NTQ5OTQ3MDEyNDgtZWE1Y2VlNDcyNmY0P2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZmFjZXMmY3M9dGlueXNyZ2ImZml0PWNyb3AmaD02NCZ3PTY0JnM9ODIxZGI2YTA5MWIyM2U1N2VhM2M2YTc1MzM2NzQ5OTZcXFwiLFxcXCJsYXJnZVxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9wcm9maWxlLTE0NTQ5OTQ3MDEyNDgtZWE1Y2VlNDcyNmY0P2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZmFjZXMmY3M9dGlueXNyZ2ImZml0PWNyb3AmaD0xMjgmdz0xMjgmcz03NzQyOWFiMDM4NGY4NjI1Y2M3ODBjN2E4N2M3MWM0MVxcXCJ9LFxcXCJsaW5rc1xcXCI6e1xcXCJzZWxmXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL3RlZGR5a2VsbGV5XFxcIixcXFwiaHRtbFxcXCI6XFxcImh0dHBzOi8vdW5zcGxhc2guY29tL0B0ZWRkeWtlbGxleVxcXCIsXFxcInBob3Rvc1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy90ZWRkeWtlbGxleS9waG90b3NcXFwiLFxcXCJsaWtlc1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy90ZWRkeWtlbGxleS9saWtlc1xcXCIsXFxcInBvcnRmb2xpb1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy90ZWRkeWtlbGxleS9wb3J0Zm9saW9cXFwiLFxcXCJmb2xsb3dpbmdcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvdGVkZHlrZWxsZXkvZm9sbG93aW5nXFxcIixcXFwiZm9sbG93ZXJzXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL3RlZGR5a2VsbGV5L2ZvbGxvd2Vyc1xcXCJ9fSxcXFwiY3VycmVudF91c2VyX2NvbGxlY3Rpb25zXFxcIjpbXSxcXFwidXJsc1xcXCI6e1xcXCJyYXdcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQ1ODkzNTQxNjkwMy0wMDY4OTJhOWQ4Y2FcXFwiLFxcXCJmdWxsXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0NTg5MzU0MTY5MDMtMDA2ODkyYTlkOGNhP2l4bGliPXJiLTAuMy41JnE9ODUmZm09anBnJmNyb3A9ZW50cm9weSZjcz1zcmdiJnM9YTY0M2ZlZjUxMDBiYzk2YTkwZWRlZjMxZjVmMDUwYTFcXFwiLFxcXCJyZWd1bGFyXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0NTg5MzU0MTY5MDMtMDA2ODkyYTlkOGNhP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZW50cm9weSZjcz10aW55c3JnYiZ3PTEwODAmZml0PW1heCZzPTZlYzBlN2Y3ZmM5NGYzZmZkZGZlZDQyMzVmNDI3NjIxXFxcIixcXFwic21hbGxcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQ1ODkzNTQxNjkwMy0wMDY4OTJhOWQ4Y2E/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1lbnRyb3B5JmNzPXRpbnlzcmdiJnc9NDAwJmZpdD1tYXgmcz00NDJhNTc2NjcyNzgyMmQ4OTRiYWRmNWFmNDY1ZWI2N1xcXCIsXFxcInRodW1iXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0NTg5MzU0MTY5MDMtMDA2ODkyYTlkOGNhP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZW50cm9weSZjcz10aW55c3JnYiZ3PTIwMCZmaXQ9bWF4JnM9ZTg0NDUzMWU1MTgzNGI2N2Q1Yjg0ZTdkYTQ4ZTRmNDBcXFwifSxcXFwiY2F0ZWdvcmllc1xcXCI6W10sXFxcImxpbmtzXFxcIjp7XFxcInNlbGZcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vcGhvdG9zLzlGMjJ6SGQ2ZG1NXFxcIixcXFwiaHRtbFxcXCI6XFxcImh0dHBzOi8vdW5zcGxhc2guY29tL3Bob3Rvcy85RjIyekhkNmRtTVxcXCIsXFxcImRvd25sb2FkXFxcIjpcXFwiaHR0cHM6Ly91bnNwbGFzaC5jb20vcGhvdG9zLzlGMjJ6SGQ2ZG1NL2Rvd25sb2FkXFxcIixcXFwiZG93bmxvYWRfbG9jYXRpb25cXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vcGhvdG9zLzlGMjJ6SGQ2ZG1NL2Rvd25sb2FkXFxcIn19LHtcXFwiaWRcXFwiOlxcXCJkNmtTdlQyeFpRb1xcXCIsXFxcImNyZWF0ZWRfYXRcXFwiOlxcXCIyMDE1LTA4LTI2VDA1OjM1OjUwLTA0OjAwXFxcIixcXFwidXBkYXRlZF9hdFxcXCI6XFxcIjIwMTctMTAtMDRUMDI6NDE6NTQtMDQ6MDBcXFwiLFxcXCJ3aWR0aFxcXCI6MzI2NCxcXFwiaGVpZ2h0XFxcIjoyNDQ4LFxcXCJjb2xvclxcXCI6XFxcIiM1MzRGMzNcXFwiLFxcXCJsaWtlc1xcXCI6OTQsXFxcImxpa2VkX2J5X3VzZXJcXFwiOmZhbHNlLFxcXCJkZXNjcmlwdGlvblxcXCI6bnVsbCxcXFwidXNlclxcXCI6e1xcXCJpZFxcXCI6XFxcInVYUVkwV0pEUnZvXFxcIixcXFwidXBkYXRlZF9hdFxcXCI6XFxcIjIwMTctMDktMjJUMDk6MDI6NTQtMDQ6MDBcXFwiLFxcXCJ1c2VybmFtZVxcXCI6XFxcIm91dG9mb3JiaXRcXFwiLFxcXCJuYW1lXFxcIjpcXFwiR3VzdGF2IEd1bGxzdHJhbmRcXFwiLFxcXCJmaXJzdF9uYW1lXFxcIjpcXFwiR3VzdGF2XFxcIixcXFwibGFzdF9uYW1lXFxcIjpcXFwiR3VsbHN0cmFuZFxcXCIsXFxcInR3aXR0ZXJfdXNlcm5hbWVcXFwiOm51bGwsXFxcInBvcnRmb2xpb191cmxcXFwiOm51bGwsXFxcImJpb1xcXCI6XFxcIlxcXCIsXFxcImxvY2F0aW9uXFxcIjpudWxsLFxcXCJ0b3RhbF9saWtlc1xcXCI6MCxcXFwidG90YWxfcGhvdG9zXFxcIjoxLFxcXCJ0b3RhbF9jb2xsZWN0aW9uc1xcXCI6MCxcXFwicHJvZmlsZV9pbWFnZVxcXCI6e1xcXCJzbWFsbFxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9wbGFjZWhvbGRlci1hdmF0YXJzL2V4dHJhLWxhcmdlLmpwZz9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWZhY2VzJmNzPXRpbnlzcmdiJmZpdD1jcm9wJmg9MzImdz0zMiZzPTBhZDY4ZjQ0YzQ3MjVkNWEzZmRhMDE5YmFiOWQzZWRjXFxcIixcXFwibWVkaXVtXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3BsYWNlaG9sZGVyLWF2YXRhcnMvZXh0cmEtbGFyZ2UuanBnP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZmFjZXMmY3M9dGlueXNyZ2ImZml0PWNyb3AmaD02NCZ3PTY0JnM9MzU2YmQ0Yjc2YTNkNGViOTdkNjNmNDViODE4ZGQzNThcXFwiLFxcXCJsYXJnZVxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9wbGFjZWhvbGRlci1hdmF0YXJzL2V4dHJhLWxhcmdlLmpwZz9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWZhY2VzJmNzPXRpbnlzcmdiJmZpdD1jcm9wJmg9MTI4Jnc9MTI4JnM9ZWU4YmJmNWZiOGQ2ZTQzYWFhYTIzOGZlYWUyZmU5MGRcXFwifSxcXFwibGlua3NcXFwiOntcXFwic2VsZlxcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9vdXRvZm9yYml0XFxcIixcXFwiaHRtbFxcXCI6XFxcImh0dHBzOi8vdW5zcGxhc2guY29tL0BvdXRvZm9yYml0XFxcIixcXFwicGhvdG9zXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL291dG9mb3JiaXQvcGhvdG9zXFxcIixcXFwibGlrZXNcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvb3V0b2ZvcmJpdC9saWtlc1xcXCIsXFxcInBvcnRmb2xpb1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9vdXRvZm9yYml0L3BvcnRmb2xpb1xcXCIsXFxcImZvbGxvd2luZ1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9vdXRvZm9yYml0L2ZvbGxvd2luZ1xcXCIsXFxcImZvbGxvd2Vyc1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9vdXRvZm9yYml0L2ZvbGxvd2Vyc1xcXCJ9fSxcXFwiY3VycmVudF91c2VyX2NvbGxlY3Rpb25zXFxcIjpbXSxcXFwidXJsc1xcXCI6e1xcXCJyYXdcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQ0MDU4MTU3MjMyNS0wYmVhMzAwNzVkOWRcXFwiLFxcXCJmdWxsXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0NDA1ODE1NzIzMjUtMGJlYTMwMDc1ZDlkP2l4bGliPXJiLTAuMy41JnE9ODUmZm09anBnJmNyb3A9ZW50cm9weSZjcz1zcmdiJnM9ODRkM2QwOWY4YWMxMzM4YWRmNDU0NjI3ODg1NmRkYWNcXFwiLFxcXCJyZWd1bGFyXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0NDA1ODE1NzIzMjUtMGJlYTMwMDc1ZDlkP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZW50cm9weSZjcz10aW55c3JnYiZ3PTEwODAmZml0PW1heCZzPTgzNTlhNDNjMDNmMmVlMGUwYTUwNTAyZTU4M2EyOTM0XFxcIixcXFwic21hbGxcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQ0MDU4MTU3MjMyNS0wYmVhMzAwNzVkOWQ/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1lbnRyb3B5JmNzPXRpbnlzcmdiJnc9NDAwJmZpdD1tYXgmcz0xYmViZWI5OTQ5MTkzNmIxMzkyODA3ZDM2Nzk1ODdkOFxcXCIsXFxcInRodW1iXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0NDA1ODE1NzIzMjUtMGJlYTMwMDc1ZDlkP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZW50cm9weSZjcz10aW55c3JnYiZ3PTIwMCZmaXQ9bWF4JnM9Njc2NDY1ZTc5YzE4ZjE3ODgwMzk4MDEyODhlYzNlMjRcXFwifSxcXFwiY2F0ZWdvcmllc1xcXCI6W10sXFxcImxpbmtzXFxcIjp7XFxcInNlbGZcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vcGhvdG9zL2Q2a1N2VDJ4WlFvXFxcIixcXFwiaHRtbFxcXCI6XFxcImh0dHBzOi8vdW5zcGxhc2guY29tL3Bob3Rvcy9kNmtTdlQyeFpRb1xcXCIsXFxcImRvd25sb2FkXFxcIjpcXFwiaHR0cHM6Ly91bnNwbGFzaC5jb20vcGhvdG9zL2Q2a1N2VDJ4WlFvL2Rvd25sb2FkXFxcIixcXFwiZG93bmxvYWRfbG9jYXRpb25cXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vcGhvdG9zL2Q2a1N2VDJ4WlFvL2Rvd25sb2FkXFxcIn19LHtcXFwiaWRcXFwiOlxcXCI1S3ZFcmxiZGV5b1xcXCIsXFxcImNyZWF0ZWRfYXRcXFwiOlxcXCIyMDE2LTA2LTIzVDEwOjAyOjUzLTA0OjAwXFxcIixcXFwidXBkYXRlZF9hdFxcXCI6XFxcIjIwMTctMTAtMDZUMDI6MDQ6MjEtMDQ6MDBcXFwiLFxcXCJ3aWR0aFxcXCI6NTc2MCxcXFwiaGVpZ2h0XFxcIjozODQwLFxcXCJjb2xvclxcXCI6XFxcIiNDMEI4N0NcXFwiLFxcXCJsaWtlc1xcXCI6MTQ2LFxcXCJsaWtlZF9ieV91c2VyXFxcIjpmYWxzZSxcXFwiZGVzY3JpcHRpb25cXFwiOm51bGwsXFxcInVzZXJcXFwiOntcXFwiaWRcXFwiOlxcXCJBN21LeGdpcEZjOFxcXCIsXFxcInVwZGF0ZWRfYXRcXFwiOlxcXCIyMDE3LTEwLTA3VDA1OjE4OjM3LTA0OjAwXFxcIixcXFwidXNlcm5hbWVcXFwiOlxcXCJtYXJrdXNzcGlza2VcXFwiLFxcXCJuYW1lXFxcIjpcXFwiTWFya3VzIFNwaXNrZVxcXCIsXFxcImZpcnN0X25hbWVcXFwiOlxcXCJNYXJrdXNcXFwiLFxcXCJsYXN0X25hbWVcXFwiOlxcXCJTcGlza2VcXFwiLFxcXCJ0d2l0dGVyX3VzZXJuYW1lXFxcIjpudWxsLFxcXCJwb3J0Zm9saW9fdXJsXFxcIjpcXFwiaHR0cDovL2ZyZWVmb3Jjb21tZXJjaWFsdXNlLm5ldC9cXFwiLFxcXCJiaW9cXFwiOlxcXCJBdXRoZW50aWMgI3Vuc3RvY2sgcGhvdG9zIGZvciBjb21tZXJjaWFsIHVzZS4gU3R1bm5pbmcgbGlmZXN0eWxlIGltYWdlcnkgZm9yIG1vZGVybiBjcmVhdGl2ZXMuXFxcIixcXFwibG9jYXRpb25cXFwiOlxcXCJFcmxhbmdlbiwgQmF2YXJpYSwgR2VybWFueVxcXCIsXFxcInRvdGFsX2xpa2VzXFxcIjo4MjEsXFxcInRvdGFsX3Bob3Rvc1xcXCI6MzM1LFxcXCJ0b3RhbF9jb2xsZWN0aW9uc1xcXCI6MTgsXFxcInByb2ZpbGVfaW1hZ2VcXFwiOntcXFwic21hbGxcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcHJvZmlsZS0xNDY4MDAzODcwODgwLTFkNDRiYWUyMDNjNT9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWZhY2VzJmNzPXRpbnlzcmdiJmZpdD1jcm9wJmg9MzImdz0zMiZzPTM1YTA4YjEwMWE0ZDg4ZjFkY2IxNGU3OGQ2ODcyMWM5XFxcIixcXFwibWVkaXVtXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Byb2ZpbGUtMTQ2ODAwMzg3MDg4MC0xZDQ0YmFlMjAzYzU/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1mYWNlcyZjcz10aW55c3JnYiZmaXQ9Y3JvcCZoPTY0Jnc9NjQmcz0yNjZiODlmODhmODEzMmNlY2RmM2IwZThjNTMzMzVmYlxcXCIsXFxcImxhcmdlXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Byb2ZpbGUtMTQ2ODAwMzg3MDg4MC0xZDQ0YmFlMjAzYzU/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1mYWNlcyZjcz10aW55c3JnYiZmaXQ9Y3JvcCZoPTEyOCZ3PTEyOCZzPThmZjY0NDJlZDg5NzUwYjdkNzM2NzY3MjU0N2NiZmYzXFxcIn0sXFxcImxpbmtzXFxcIjp7XFxcInNlbGZcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvbWFya3Vzc3Bpc2tlXFxcIixcXFwiaHRtbFxcXCI6XFxcImh0dHBzOi8vdW5zcGxhc2guY29tL0BtYXJrdXNzcGlza2VcXFwiLFxcXCJwaG90b3NcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvbWFya3Vzc3Bpc2tlL3Bob3Rvc1xcXCIsXFxcImxpa2VzXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL21hcmt1c3NwaXNrZS9saWtlc1xcXCIsXFxcInBvcnRmb2xpb1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9tYXJrdXNzcGlza2UvcG9ydGZvbGlvXFxcIixcXFwiZm9sbG93aW5nXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL21hcmt1c3NwaXNrZS9mb2xsb3dpbmdcXFwiLFxcXCJmb2xsb3dlcnNcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvbWFya3Vzc3Bpc2tlL2ZvbGxvd2Vyc1xcXCJ9fSxcXFwiY3VycmVudF91c2VyX2NvbGxlY3Rpb25zXFxcIjpbXSxcXFwidXJsc1xcXCI6e1xcXCJyYXdcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQ2NjY5MDUxOTY1OS0yODNjYTgxYWRmOTdcXFwiLFxcXCJmdWxsXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0NjY2OTA1MTk2NTktMjgzY2E4MWFkZjk3P2l4bGliPXJiLTAuMy41JnE9ODUmZm09anBnJmNyb3A9ZW50cm9weSZjcz1zcmdiJnM9MzY1MzBmYmQ5NmQzOTU1ZTQ4YTY5NzZmZTcyOTI5OGFcXFwiLFxcXCJyZWd1bGFyXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0NjY2OTA1MTk2NTktMjgzY2E4MWFkZjk3P2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZW50cm9weSZjcz10aW55c3JnYiZ3PTEwODAmZml0PW1heCZzPTE3ZDRlNzY1OWJjODU3YzJmZjIwYTM5ZWQyYWNjNjYwXFxcIixcXFwic21hbGxcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQ2NjY5MDUxOTY1OS0yODNjYTgxYWRmOTc/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1lbnRyb3B5JmNzPXRpbnlzcmdiJnc9NDAwJmZpdD1tYXgmcz1hNGVkNDBkYjY0YTJlZTliZDBkZTI2ZjEwZDI2YmJhN1xcXCIsXFxcInRodW1iXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0NjY2OTA1MTk2NTktMjgzY2E4MWFkZjk3P2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZW50cm9weSZjcz10aW55c3JnYiZ3PTIwMCZmaXQ9bWF4JnM9MmFjYzdlNTQ0NjFiNTMzYTM2NmYwZjM1NjIzZTIwZDRcXFwifSxcXFwiY2F0ZWdvcmllc1xcXCI6W10sXFxcImxpbmtzXFxcIjp7XFxcInNlbGZcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vcGhvdG9zLzVLdkVybGJkZXlvXFxcIixcXFwiaHRtbFxcXCI6XFxcImh0dHBzOi8vdW5zcGxhc2guY29tL3Bob3Rvcy81S3ZFcmxiZGV5b1xcXCIsXFxcImRvd25sb2FkXFxcIjpcXFwiaHR0cHM6Ly91bnNwbGFzaC5jb20vcGhvdG9zLzVLdkVybGJkZXlvL2Rvd25sb2FkXFxcIixcXFwiZG93bmxvYWRfbG9jYXRpb25cXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vcGhvdG9zLzVLdkVybGJkZXlvL2Rvd25sb2FkXFxcIn19LHtcXFwiaWRcXFwiOlxcXCJCMktnVFduTkJkNFxcXCIsXFxcImNyZWF0ZWRfYXRcXFwiOlxcXCIyMDE1LTAxLTI1VDE3OjI5OjQ2LTA1OjAwXFxcIixcXFwidXBkYXRlZF9hdFxcXCI6XFxcIjIwMTctMTAtMDNUMTQ6MDA6NTUtMDQ6MDBcXFwiLFxcXCJ3aWR0aFxcXCI6NDM2OCxcXFwiaGVpZ2h0XFxcIjoyOTEyLFxcXCJjb2xvclxcXCI6XFxcIiM3NDc1NUFcXFwiLFxcXCJsaWtlc1xcXCI6NzEsXFxcImxpa2VkX2J5X3VzZXJcXFwiOmZhbHNlLFxcXCJkZXNjcmlwdGlvblxcXCI6bnVsbCxcXFwidXNlclxcXCI6e1xcXCJpZFxcXCI6XFxcIlQ0RFl5V2hwVVp3XFxcIixcXFwidXBkYXRlZF9hdFxcXCI6XFxcIjIwMTctMTAtMDZUMDc6NTM6NDEtMDQ6MDBcXFwiLFxcXCJ1c2VybmFtZVxcXCI6XFxcInJlZGV2b1xcXCIsXFxcIm5hbWVcXFwiOlxcXCJEYXZlIFJvYmluc29uXFxcIixcXFwiZmlyc3RfbmFtZVxcXCI6XFxcIkRhdmVcXFwiLFxcXCJsYXN0X25hbWVcXFwiOlxcXCJSb2JpbnNvblxcXCIsXFxcInR3aXR0ZXJfdXNlcm5hbWVcXFwiOlxcXCJkYXZlZnJvbWJhcnJvd1xcXCIsXFxcInBvcnRmb2xpb191cmxcXFwiOlxcXCJodHRwOi8vdHdpdHRlci5jb20vZGF2ZWZyb21iYXJyb3dcXFwiLFxcXCJiaW9cXFwiOlxcXCJJbmJvdW5kIGFnZW5jeSBvd25lciwgcmV0YWluZWQgZmlyZWZpZ2h0ZXIsIGJhbGxyb29tIGRhbmNlciBhbmQgZHJ1bW1lci5cXFwiLFxcXCJsb2NhdGlvblxcXCI6XFxcIkFib3luZSwgU2NvdGxhbmRcXFwiLFxcXCJ0b3RhbF9saWtlc1xcXCI6MCxcXFwidG90YWxfcGhvdG9zXFxcIjo0OSxcXFwidG90YWxfY29sbGVjdGlvbnNcXFwiOjAsXFxcInByb2ZpbGVfaW1hZ2VcXFwiOntcXFwic21hbGxcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcHJvZmlsZS0xNDk1NTU0ODMxODgwLWMzZTBmMGM1MzA3NT9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWZhY2VzJmNzPXRpbnlzcmdiJmZpdD1jcm9wJmg9MzImdz0zMiZzPTQ5NTQ5ZDQ4MjQ0YzVlMmM2MTRkMTIzMDg4MmMxM2E2XFxcIixcXFwibWVkaXVtXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Byb2ZpbGUtMTQ5NTU1NDgzMTg4MC1jM2UwZjBjNTMwNzU/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1mYWNlcyZjcz10aW55c3JnYiZmaXQ9Y3JvcCZoPTY0Jnc9NjQmcz0wZDYxZDA2ZTIwYjUyNjZhMzJlMWRiMzdiZjcxYzIxMVxcXCIsXFxcImxhcmdlXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Byb2ZpbGUtMTQ5NTU1NDgzMTg4MC1jM2UwZjBjNTMwNzU/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1mYWNlcyZjcz10aW55c3JnYiZmaXQ9Y3JvcCZoPTEyOCZ3PTEyOCZzPTg0ODlkZjMzZDg2NzQwYThlZDg4Yzk5MzgyYTBmNWYwXFxcIn0sXFxcImxpbmtzXFxcIjp7XFxcInNlbGZcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvcmVkZXZvXFxcIixcXFwiaHRtbFxcXCI6XFxcImh0dHBzOi8vdW5zcGxhc2guY29tL0ByZWRldm9cXFwiLFxcXCJwaG90b3NcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvcmVkZXZvL3Bob3Rvc1xcXCIsXFxcImxpa2VzXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL3JlZGV2by9saWtlc1xcXCIsXFxcInBvcnRmb2xpb1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9yZWRldm8vcG9ydGZvbGlvXFxcIixcXFwiZm9sbG93aW5nXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL3JlZGV2by9mb2xsb3dpbmdcXFwiLFxcXCJmb2xsb3dlcnNcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvcmVkZXZvL2ZvbGxvd2Vyc1xcXCJ9fSxcXFwiY3VycmVudF91c2VyX2NvbGxlY3Rpb25zXFxcIjpbXSxcXFwidXJsc1xcXCI6e1xcXCJyYXdcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQyMjIyNDgzMjE0MC0wZTU0NjIxMGVmYzNcXFwiLFxcXCJmdWxsXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0MjIyMjQ4MzIxNDAtMGU1NDYyMTBlZmMzP2l4bGliPXJiLTAuMy41JnE9ODUmZm09anBnJmNyb3A9ZW50cm9weSZjcz1zcmdiJnM9YTVmODBiNTZjNmE5NTdmYjUzYjA4MDA0MTkyZDhmYjdcXFwiLFxcXCJyZWd1bGFyXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0MjIyMjQ4MzIxNDAtMGU1NDYyMTBlZmMzP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZW50cm9weSZjcz10aW55c3JnYiZ3PTEwODAmZml0PW1heCZzPWJiMDQ3ODI2NGFjMjcyMGQwMjhiNzkwZDc3NTM4MzIzXFxcIixcXFwic21hbGxcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQyMjIyNDgzMjE0MC0wZTU0NjIxMGVmYzM/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1lbnRyb3B5JmNzPXRpbnlzcmdiJnc9NDAwJmZpdD1tYXgmcz1mMzIzNDY2ZmY5OTgyM2Y5OTQ2ODYwZGZlZDQxOTZhMVxcXCIsXFxcInRodW1iXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0MjIyMjQ4MzIxNDAtMGU1NDYyMTBlZmMzP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZW50cm9weSZjcz10aW55c3JnYiZ3PTIwMCZmaXQ9bWF4JnM9MjgyZmNhYTQ4YTliMjA0MmI4NTA4OTc3YTEyMGVmOTlcXFwifSxcXFwiY2F0ZWdvcmllc1xcXCI6W10sXFxcImxpbmtzXFxcIjp7XFxcInNlbGZcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vcGhvdG9zL0IyS2dUV25OQmQ0XFxcIixcXFwiaHRtbFxcXCI6XFxcImh0dHBzOi8vdW5zcGxhc2guY29tL3Bob3Rvcy9CMktnVFduTkJkNFxcXCIsXFxcImRvd25sb2FkXFxcIjpcXFwiaHR0cHM6Ly91bnNwbGFzaC5jb20vcGhvdG9zL0IyS2dUV25OQmQ0L2Rvd25sb2FkXFxcIixcXFwiZG93bmxvYWRfbG9jYXRpb25cXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vcGhvdG9zL0IyS2dUV25OQmQ0L2Rvd25sb2FkXFxcIn19LHtcXFwiaWRcXFwiOlxcXCJHYzdBaGVjX19YUVxcXCIsXFxcImNyZWF0ZWRfYXRcXFwiOlxcXCIyMDE3LTA3LTMxVDE2OjMyOjM0LTA0OjAwXFxcIixcXFwidXBkYXRlZF9hdFxcXCI6XFxcIjIwMTctMTAtMDdUMDQ6MjM6MjYtMDQ6MDBcXFwiLFxcXCJ3aWR0aFxcXCI6Mzk2MSxcXFwiaGVpZ2h0XFxcIjo1OTQxLFxcXCJjb2xvclxcXCI6XFxcIiNGRUY3RkJcXFwiLFxcXCJsaWtlc1xcXCI6ODksXFxcImxpa2VkX2J5X3VzZXJcXFwiOmZhbHNlLFxcXCJkZXNjcmlwdGlvblxcXCI6bnVsbCxcXFwidXNlclxcXCI6e1xcXCJpZFxcXCI6XFxcIm15Z1g1ekEtMDFvXFxcIixcXFwidXBkYXRlZF9hdFxcXCI6XFxcIjIwMTctMTAtMDZUMTE6NTg6MDUtMDQ6MDBcXFwiLFxcXCJ1c2VybmFtZVxcXCI6XFxcImNraXJieVxcXCIsXFxcIm5hbWVcXFwiOlxcXCJDYW1lcm9uIEtpcmJ5XFxcIixcXFwiZmlyc3RfbmFtZVxcXCI6XFxcIkNhbWVyb25cXFwiLFxcXCJsYXN0X25hbWVcXFwiOlxcXCJLaXJieVxcXCIsXFxcInR3aXR0ZXJfdXNlcm5hbWVcXFwiOlxcXCJjYW1lcm9ubWtpcmJ5XFxcIixcXFwicG9ydGZvbGlvX3VybFxcXCI6XFxcImh0dHA6Ly93d3cuY2FtZXJvbm1raXJieS5jb20vZGlnaXRhbGRvd25sb2Fkc1xcXCIsXFxcImJpb1xcXCI6XFxcIllvdSdyZSBncmVhdC4gXFxcIixcXFwibG9jYXRpb25cXFwiOlxcXCJTTEMsIFVUXFxcIixcXFwidG90YWxfbGlrZXNcXFwiOjUzLFxcXCJ0b3RhbF9waG90b3NcXFwiOjk0LFxcXCJ0b3RhbF9jb2xsZWN0aW9uc1xcXCI6MCxcXFwicHJvZmlsZV9pbWFnZVxcXCI6e1xcXCJzbWFsbFxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9wcm9maWxlLTE1MDcyNTcyOTMxODktMzliMGIyNDkyMmZlP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZmFjZXMmY3M9dGlueXNyZ2ImZml0PWNyb3AmaD0zMiZ3PTMyJnM9NmMwNjU1ODM5MGE4ZWFiZjQ1MjZkNjcyMjZmMzk3ODRcXFwiLFxcXCJtZWRpdW1cXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcHJvZmlsZS0xNTA3MjU3MjkzMTg5LTM5YjBiMjQ5MjJmZT9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWZhY2VzJmNzPXRpbnlzcmdiJmZpdD1jcm9wJmg9NjQmdz02NCZzPTI5NjU5ODNiZTk1MjJkN2RiZGQzZWViNDk3M2NhNjBjXFxcIixcXFwibGFyZ2VcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcHJvZmlsZS0xNTA3MjU3MjkzMTg5LTM5YjBiMjQ5MjJmZT9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWZhY2VzJmNzPXRpbnlzcmdiJmZpdD1jcm9wJmg9MTI4Jnc9MTI4JnM9NjZmOGYzOTI5YTZmZWI2YjA5MzhlZmRlOWI1NzQ3MmRcXFwifSxcXFwibGlua3NcXFwiOntcXFwic2VsZlxcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9ja2lyYnlcXFwiLFxcXCJodG1sXFxcIjpcXFwiaHR0cHM6Ly91bnNwbGFzaC5jb20vQGNraXJieVxcXCIsXFxcInBob3Rvc1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9ja2lyYnkvcGhvdG9zXFxcIixcXFwibGlrZXNcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvY2tpcmJ5L2xpa2VzXFxcIixcXFwicG9ydGZvbGlvXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL2NraXJieS9wb3J0Zm9saW9cXFwiLFxcXCJmb2xsb3dpbmdcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvY2tpcmJ5L2ZvbGxvd2luZ1xcXCIsXFxcImZvbGxvd2Vyc1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9ja2lyYnkvZm9sbG93ZXJzXFxcIn19LFxcXCJjdXJyZW50X3VzZXJfY29sbGVjdGlvbnNcXFwiOltdLFxcXCJ1cmxzXFxcIjp7XFxcInJhd1xcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNTAxNTMzMTIzLWU2MjAxM2NhYmI0ZlxcXCIsXFxcImZ1bGxcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTUwMTUzMzEyMy1lNjIwMTNjYWJiNGY/aXhsaWI9cmItMC4zLjUmcT04NSZmbT1qcGcmY3JvcD1lbnRyb3B5JmNzPXNyZ2Imcz1iOTExM2UzYWIxZGIyZTVjZGVhNTZlNzMxNzhmZWI0Y1xcXCIsXFxcInJlZ3VsYXJcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTUwMTUzMzEyMy1lNjIwMTNjYWJiNGY/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1lbnRyb3B5JmNzPXRpbnlzcmdiJnc9MTA4MCZmaXQ9bWF4JnM9MmY5NDlkYmQxMzc5NDEwODY5NTUyNzk5ODY0ZTk4ODZcXFwiLFxcXCJzbWFsbFxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNTAxNTMzMTIzLWU2MjAxM2NhYmI0Zj9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWVudHJvcHkmY3M9dGlueXNyZ2Imdz00MDAmZml0PW1heCZzPWRiZmMxNzVjOTM1ZDcyZjU3YWNmNzc5ODg2MmU5MjJiXFxcIixcXFwidGh1bWJcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTUwMTUzMzEyMy1lNjIwMTNjYWJiNGY/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1lbnRyb3B5JmNzPXRpbnlzcmdiJnc9MjAwJmZpdD1tYXgmcz01MTJmOTI1ZjdlOGIwM2I2NjAzZTBmODJkMTlkOTViZFxcXCJ9LFxcXCJjYXRlZ29yaWVzXFxcIjpbXSxcXFwibGlua3NcXFwiOntcXFwic2VsZlxcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS9waG90b3MvR2M3QWhlY19fWFFcXFwiLFxcXCJodG1sXFxcIjpcXFwiaHR0cHM6Ly91bnNwbGFzaC5jb20vcGhvdG9zL0djN0FoZWNfX1hRXFxcIixcXFwiZG93bmxvYWRcXFwiOlxcXCJodHRwczovL3Vuc3BsYXNoLmNvbS9waG90b3MvR2M3QWhlY19fWFEvZG93bmxvYWRcXFwiLFxcXCJkb3dubG9hZF9sb2NhdGlvblxcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS9waG90b3MvR2M3QWhlY19fWFEvZG93bmxvYWRcXFwifX0se1xcXCJpZFxcXCI6XFxcIjAxUXFrZnotY2s4XFxcIixcXFwiY3JlYXRlZF9hdFxcXCI6XFxcIjIwMTYtMTAtMjhUMTk6MjI6NTItMDQ6MDBcXFwiLFxcXCJ1cGRhdGVkX2F0XFxcIjpcXFwiMjAxNy0xMC0wNVQwNjozOTo1Mi0wNDowMFxcXCIsXFxcIndpZHRoXFxcIjo1MTg0LFxcXCJoZWlnaHRcXFwiOjM0NTYsXFxcImNvbG9yXFxcIjpcXFwiI0JCQjlDNlxcXCIsXFxcImxpa2VzXFxcIjoxNzMsXFxcImxpa2VkX2J5X3VzZXJcXFwiOmZhbHNlLFxcXCJkZXNjcmlwdGlvblxcXCI6XFxcIkEgZHJvbmUgc2hvdCBvZiB0aGUgdHJlZXRvcHMgaW4gYSBjb25pZmVyb3VzIGZvcmVzdFxcXCIsXFxcInVzZXJcXFwiOntcXFwiaWRcXFwiOlxcXCJmeGhBVHBTX1NnUVxcXCIsXFxcInVwZGF0ZWRfYXRcXFwiOlxcXCIyMDE3LTEwLTA3VDA4OjE5OjM1LTA0OjAwXFxcIixcXFwidXNlcm5hbWVcXFwiOlxcXCJub2Foc2lsbGltYW5cXFwiLFxcXCJuYW1lXFxcIjpcXFwiTm9haCBTaWxsaW1hblxcXCIsXFxcImZpcnN0X25hbWVcXFwiOlxcXCJOb2FoXFxcIixcXFwibGFzdF9uYW1lXFxcIjpcXFwiU2lsbGltYW5cXFwiLFxcXCJ0d2l0dGVyX3VzZXJuYW1lXFxcIjpcXFwiRGFuaWVsVGhvcm5keWsxXFxcIixcXFwicG9ydGZvbGlvX3VybFxcXCI6XFxcImh0dHBzOi8vc291bmRjbG91ZC5jb20vdXNlci0zODg2MzUwNTNcXFwiLFxcXCJiaW9cXFwiOlxcXCJXZWxjb21lIHRvIE5vYWggU2lsbGltYW4gUGhvdG9ncmFwaHkhIElmIHlvdSBsaWtlIG15IHBob3RvZ3JhcGh5IGJlIHN1cmUgdG8gY2hlY2sgb3V0IG15IGluc3RyZ3JhbSBwYWdlOiBATm9haFNpbGxpbWFuIGFuZCBteSBtdXNpYyBpbiB0aGUgbGluayBhYm92ZS4gVGhhbmsgeW91LCBhbmQgRW5qb3khXFxcIixcXFwibG9jYXRpb25cXFwiOm51bGwsXFxcInRvdGFsX2xpa2VzXFxcIjozMjQsXFxcInRvdGFsX3Bob3Rvc1xcXCI6NDUsXFxcInRvdGFsX2NvbGxlY3Rpb25zXFxcIjowLFxcXCJwcm9maWxlX2ltYWdlXFxcIjp7XFxcInNtYWxsXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Byb2ZpbGUtMTUwNDI5NzkyNzI2OC0xNWE2OGExMDI3NjU/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1mYWNlcyZjcz10aW55c3JnYiZmaXQ9Y3JvcCZoPTMyJnc9MzImcz1jNjM5Yzc3Y2ExNTQzNmZlOTI4ZWMyMDE0ZmQyZmM2NVxcXCIsXFxcIm1lZGl1bVxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9wcm9maWxlLTE1MDQyOTc5MjcyNjgtMTVhNjhhMTAyNzY1P2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZmFjZXMmY3M9dGlueXNyZ2ImZml0PWNyb3AmaD02NCZ3PTY0JnM9YzdhN2Y2ZTQxZDQwNjQzZDQwMjg4YTcxNDMwMDE3NmFcXFwiLFxcXCJsYXJnZVxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9wcm9maWxlLTE1MDQyOTc5MjcyNjgtMTVhNjhhMTAyNzY1P2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZmFjZXMmY3M9dGlueXNyZ2ImZml0PWNyb3AmaD0xMjgmdz0xMjgmcz0xMTBiNzk0YWU4NDZkODQ5ZDQwOGVkZWMzMDk2NGNjOFxcXCJ9LFxcXCJsaW5rc1xcXCI6e1xcXCJzZWxmXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL25vYWhzaWxsaW1hblxcXCIsXFxcImh0bWxcXFwiOlxcXCJodHRwczovL3Vuc3BsYXNoLmNvbS9Abm9haHNpbGxpbWFuXFxcIixcXFwicGhvdG9zXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL25vYWhzaWxsaW1hbi9waG90b3NcXFwiLFxcXCJsaWtlc1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9ub2Foc2lsbGltYW4vbGlrZXNcXFwiLFxcXCJwb3J0Zm9saW9cXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvbm9haHNpbGxpbWFuL3BvcnRmb2xpb1xcXCIsXFxcImZvbGxvd2luZ1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9ub2Foc2lsbGltYW4vZm9sbG93aW5nXFxcIixcXFwiZm9sbG93ZXJzXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL25vYWhzaWxsaW1hbi9mb2xsb3dlcnNcXFwifX0sXFxcImN1cnJlbnRfdXNlcl9jb2xsZWN0aW9uc1xcXCI6W10sXFxcInVybHNcXFwiOntcXFwicmF3XFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0Nzc2OTY5NTczODQtM2IxZDczMWM0Y2ZmXFxcIixcXFwiZnVsbFxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDc3Njk2OTU3Mzg0LTNiMWQ3MzFjNGNmZj9peGxpYj1yYi0wLjMuNSZxPTg1JmZtPWpwZyZjcm9wPWVudHJvcHkmY3M9c3JnYiZzPWIzOWIzMzBhYTEwYTQ4NWY2MTJlMmMyMmYwMTIyNzU5XFxcIixcXFwicmVndWxhclxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDc3Njk2OTU3Mzg0LTNiMWQ3MzFjNGNmZj9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWVudHJvcHkmY3M9dGlueXNyZ2Imdz0xMDgwJmZpdD1tYXgmcz0zNDhiODM5OWFhOTUwYWQ0OGU5OWFjZTdkOTU5MmIzN1xcXCIsXFxcInNtYWxsXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0Nzc2OTY5NTczODQtM2IxZDczMWM0Y2ZmP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZW50cm9weSZjcz10aW55c3JnYiZ3PTQwMCZmaXQ9bWF4JnM9OGRhMTVmMjJiZmM1ZjdkYTZiODNmYzgwYjUzMzdlMjJcXFwiLFxcXCJ0aHVtYlxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDc3Njk2OTU3Mzg0LTNiMWQ3MzFjNGNmZj9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWVudHJvcHkmY3M9dGlueXNyZ2Imdz0yMDAmZml0PW1heCZzPTViY2M0ZGQ3ZDUzMDA4N2U2ZTlkMWQ2YmI0MzI2YmIyXFxcIn0sXFxcImNhdGVnb3JpZXNcXFwiOltdLFxcXCJsaW5rc1xcXCI6e1xcXCJzZWxmXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3Bob3Rvcy8wMVFxa2Z6LWNrOFxcXCIsXFxcImh0bWxcXFwiOlxcXCJodHRwczovL3Vuc3BsYXNoLmNvbS9waG90b3MvMDFRcWtmei1jazhcXFwiLFxcXCJkb3dubG9hZFxcXCI6XFxcImh0dHBzOi8vdW5zcGxhc2guY29tL3Bob3Rvcy8wMVFxa2Z6LWNrOC9kb3dubG9hZFxcXCIsXFxcImRvd25sb2FkX2xvY2F0aW9uXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3Bob3Rvcy8wMVFxa2Z6LWNrOC9kb3dubG9hZFxcXCJ9fSx7XFxcImlkXFxcIjpcXFwiMTVkXzRTMnRKc1FcXFwiLFxcXCJjcmVhdGVkX2F0XFxcIjpcXFwiMjAxNi0wMS0xNFQyMjo1Nzo1NC0wNTowMFxcXCIsXFxcInVwZGF0ZWRfYXRcXFwiOlxcXCIyMDE3LTEwLTA2VDA4OjA1OjQyLTA0OjAwXFxcIixcXFwid2lkdGhcXFwiOjU3NjAsXFxcImhlaWdodFxcXCI6Mzg0MCxcXFwiY29sb3JcXFwiOlxcXCIjRDNEMUM3XFxcIixcXFwibGlrZXNcXFwiOjg5LFxcXCJsaWtlZF9ieV91c2VyXFxcIjpmYWxzZSxcXFwiZGVzY3JpcHRpb25cXFwiOm51bGwsXFxcInVzZXJcXFwiOntcXFwiaWRcXFwiOlxcXCJPcmc2ckJQZWVBUVxcXCIsXFxcInVwZGF0ZWRfYXRcXFwiOlxcXCIyMDE3LTEwLTA3VDA4OjI1OjUwLTA0OjAwXFxcIixcXFwidXNlcm5hbWVcXFwiOlxcXCJnYXJjaWFzYWxkYW5hX1xcXCIsXFxcIm5hbWVcXFwiOlxcXCJQYWJsbyBHYXJjaWEgU2FsZGHDsWFcXFwiLFxcXCJmaXJzdF9uYW1lXFxcIjpcXFwiUGFibG9cXFwiLFxcXCJsYXN0X25hbWVcXFwiOlxcXCJHYXJjaWEgU2FsZGHDsWFcXFwiLFxcXCJ0d2l0dGVyX3VzZXJuYW1lXFxcIjpcXFwicGFnc2FfX1xcXCIsXFxcInBvcnRmb2xpb191cmxcXFwiOlxcXCJodHRwOi8vd3d3LmdhcmNpYXNhbGRhbmEuY29tXFxcIixcXFwiYmlvXFxcIjpcXFwiU2VsZiB0YXVnaHQgY2luZW1hdG9ncmFwaGVyIGFuZCBsYW5kc2NhcGUgcGhvdG9ncmFwaGVyLiBcXFxcclxcXFxuRm91bmQgbG92ZSBpbiBwaG90b2dyYXBoeSB0aGFua3MgdG8gdGhlIHJldm9sdXRpb24gb2YgRFNMUsK0cy5cXFxcclxcXFxuQ3VycmVudGx5IGxpdmluZyBpbiBNZXhpY28gQ2l0eSwgaGUgd29ya3MgYXMgYW4gXFxcXHJcXFxcbmluZGVwZW5kZW50IGZpbG1tYWtlciBhbmQgYSBwaG90b2dyYXBoeSBpbnN0cnVjdG9yLCAgZmVlbCBmcmVlIHRvIGNvbnRhY3QgbWUuXFxcIixcXFwibG9jYXRpb25cXFwiOlxcXCJNZXhpY28sQ2l0eVxcXCIsXFxcInRvdGFsX2xpa2VzXFxcIjo4NCxcXFwidG90YWxfcGhvdG9zXFxcIjo4NCxcXFwidG90YWxfY29sbGVjdGlvbnNcXFwiOjEsXFxcInByb2ZpbGVfaW1hZ2VcXFwiOntcXFwic21hbGxcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcHJvZmlsZS0xNDYzNjk5MDcyNjk4LTdlOTBiY2QyNTNmNj9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWZhY2VzJmNzPXRpbnlzcmdiJmZpdD1jcm9wJmg9MzImdz0zMiZzPTU1YmNmZDU0ZDNjNDE5NGUxMGI0YjQ2MDU1NTRlY2JlXFxcIixcXFwibWVkaXVtXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Byb2ZpbGUtMTQ2MzY5OTA3MjY5OC03ZTkwYmNkMjUzZjY/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1mYWNlcyZjcz10aW55c3JnYiZmaXQ9Y3JvcCZoPTY0Jnc9NjQmcz1lZjE5NmRhODQyNzNkZDI0N2E0ODNkZmUzMmVkNTUwN1xcXCIsXFxcImxhcmdlXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Byb2ZpbGUtMTQ2MzY5OTA3MjY5OC03ZTkwYmNkMjUzZjY/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1mYWNlcyZjcz10aW55c3JnYiZmaXQ9Y3JvcCZoPTEyOCZ3PTEyOCZzPWI2ZTZlNjkyNWI5MWNiNmM4MDU5ZGRlMGU5YjMzNDFmXFxcIn0sXFxcImxpbmtzXFxcIjp7XFxcInNlbGZcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvZ2FyY2lhc2FsZGFuYV9cXFwiLFxcXCJodG1sXFxcIjpcXFwiaHR0cHM6Ly91bnNwbGFzaC5jb20vQGdhcmNpYXNhbGRhbmFfXFxcIixcXFwicGhvdG9zXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL2dhcmNpYXNhbGRhbmFfL3Bob3Rvc1xcXCIsXFxcImxpa2VzXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL2dhcmNpYXNhbGRhbmFfL2xpa2VzXFxcIixcXFwicG9ydGZvbGlvXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL2dhcmNpYXNhbGRhbmFfL3BvcnRmb2xpb1xcXCIsXFxcImZvbGxvd2luZ1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9nYXJjaWFzYWxkYW5hXy9mb2xsb3dpbmdcXFwiLFxcXCJmb2xsb3dlcnNcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvZ2FyY2lhc2FsZGFuYV8vZm9sbG93ZXJzXFxcIn19LFxcXCJjdXJyZW50X3VzZXJfY29sbGVjdGlvbnNcXFwiOltdLFxcXCJ1cmxzXFxcIjp7XFxcInJhd1xcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDUyODMwMDE1OTIyLTIwZWM4Y2ZjODZiZVxcXCIsXFxcImZ1bGxcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQ1MjgzMDAxNTkyMi0yMGVjOGNmYzg2YmU/aXhsaWI9cmItMC4zLjUmcT04NSZmbT1qcGcmY3JvcD1lbnRyb3B5JmNzPXNyZ2Imcz00MGEzMmMyNWRlZTU2MWQ2ZmRkYjU5MDQ3NzhkZmJkM1xcXCIsXFxcInJlZ3VsYXJcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQ1MjgzMDAxNTkyMi0yMGVjOGNmYzg2YmU/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1lbnRyb3B5JmNzPXRpbnlzcmdiJnc9MTA4MCZmaXQ9bWF4JnM9M2EwOWVkZDE4YTk4OTY2Y2ZlYjJjODEzMmI5YmUyNjNcXFwiLFxcXCJzbWFsbFxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDUyODMwMDE1OTIyLTIwZWM4Y2ZjODZiZT9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWVudHJvcHkmY3M9dGlueXNyZ2Imdz00MDAmZml0PW1heCZzPTE1MjNhOGQ4ZTQzOTlkYjBjODg1ODI5M2ZjNmZiOWVjXFxcIixcXFwidGh1bWJcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQ1MjgzMDAxNTkyMi0yMGVjOGNmYzg2YmU/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1lbnRyb3B5JmNzPXRpbnlzcmdiJnc9MjAwJmZpdD1tYXgmcz02OTE5MDAxZjZiNjBhYmEyMWQ2ODhhNmM3M2ZmZjAzZlxcXCJ9LFxcXCJjYXRlZ29yaWVzXFxcIjpbXSxcXFwibGlua3NcXFwiOntcXFwic2VsZlxcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS9waG90b3MvMTVkXzRTMnRKc1FcXFwiLFxcXCJodG1sXFxcIjpcXFwiaHR0cHM6Ly91bnNwbGFzaC5jb20vcGhvdG9zLzE1ZF80UzJ0SnNRXFxcIixcXFwiZG93bmxvYWRcXFwiOlxcXCJodHRwczovL3Vuc3BsYXNoLmNvbS9waG90b3MvMTVkXzRTMnRKc1EvZG93bmxvYWRcXFwiLFxcXCJkb3dubG9hZF9sb2NhdGlvblxcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS9waG90b3MvMTVkXzRTMnRKc1EvZG93bmxvYWRcXFwifX0se1xcXCJpZFxcXCI6XFxcIjJTaHZZOExmNmwwXFxcIixcXFwiY3JlYXRlZF9hdFxcXCI6XFxcIjIwMTUtMDMtMTJUMTA6MjA6NTItMDQ6MDBcXFwiLFxcXCJ1cGRhdGVkX2F0XFxcIjpcXFwiMjAxNy0xMC0wNFQwMjo0MjoyNC0wNDowMFxcXCIsXFxcIndpZHRoXFxcIjoyNTYwLFxcXCJoZWlnaHRcXFwiOjE0NDAsXFxcImNvbG9yXFxcIjpcXFwiIzRBM0EyMVxcXCIsXFxcImxpa2VzXFxcIjoyNzYsXFxcImxpa2VkX2J5X3VzZXJcXFwiOmZhbHNlLFxcXCJkZXNjcmlwdGlvblxcXCI6XFxcIkdyYXNzIGFuZCB0cmVlcyBpbiBhIGZvcmVzdCB3aXRoIHJheXMgb2Ygc3VubGlnaHQgcGVla2luZyB0aHJvdWdoXFxcIixcXFwidXNlclxcXCI6e1xcXCJpZFxcXCI6XFxcIlhfUGxTcnVaY2ZzXFxcIixcXFwidXBkYXRlZF9hdFxcXCI6XFxcIjIwMTctMDktMjhUMDU6MjI6NTUtMDQ6MDBcXFwiLFxcXCJ1c2VybmFtZVxcXCI6XFxcInN6bWlnaWVsZGVzaWduXFxcIixcXFwibmFtZVxcXCI6XFxcIkx1a2FzeiBTem1pZ2llbFxcXCIsXFxcImZpcnN0X25hbWVcXFwiOlxcXCJMdWthc3pcXFwiLFxcXCJsYXN0X25hbWVcXFwiOlxcXCJTem1pZ2llbFxcXCIsXFxcInR3aXR0ZXJfdXNlcm5hbWVcXFwiOm51bGwsXFxcInBvcnRmb2xpb191cmxcXFwiOlxcXCJodHRwOi8vcGhvdG9ncmFwaHkuc3ptaWdpZWxkZXNpZ24ucGxcXFwiLFxcXCJiaW9cXFwiOlxcXCJTcGVjdGF0b3IsIGFudGhyb3BvbG9naXN0LCBpbnRyb3ZlcnQsIGF0aGVpc3QuIFRha2VzIHBob3RvZ3JhcGhzIGZyb20gdGhlIG5lZWQgb2YgZXhwbG9yYXRpb24uIERlZXBseSBmYXNjaW5hdGVkIGJ5IGN1bHR1cmUuIFByaXZhdGVseSAtIGEgcGVyZmVjdGlvbmlzdCB3aG9zZSBxdWVzdCBpbiBsaWZlIGlzIHRvIHNlZWsgcGVhY2UsIGdvb2QgY29mZmVlIGFuZCBjaG9jb2xhdGUgY292ZXJlZCBjb29raWVzLiBcXFwiLFxcXCJsb2NhdGlvblxcXCI6XFxcIlBvbGFuZFxcXCIsXFxcInRvdGFsX2xpa2VzXFxcIjo3OSxcXFwidG90YWxfcGhvdG9zXFxcIjoxMTAsXFxcInRvdGFsX2NvbGxlY3Rpb25zXFxcIjowLFxcXCJwcm9maWxlX2ltYWdlXFxcIjp7XFxcInNtYWxsXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Byb2ZpbGUtMTQ0MTk3NDE4MDM0OS02ODliOWI5MjBmZWE/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1mYWNlcyZjcz10aW55c3JnYiZmaXQ9Y3JvcCZoPTMyJnc9MzImcz0wZThhODAyMmRhZWFlMWE3OTY0OWFmZTFkYjM1Zjg1Y1xcXCIsXFxcIm1lZGl1bVxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9wcm9maWxlLTE0NDE5NzQxODAzNDktNjg5YjliOTIwZmVhP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZmFjZXMmY3M9dGlueXNyZ2ImZml0PWNyb3AmaD02NCZ3PTY0JnM9ZThiOWVmNzBiMzhlNzZjOWZmZDM0OWM1N2JjN2YzZmFcXFwiLFxcXCJsYXJnZVxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9wcm9maWxlLTE0NDE5NzQxODAzNDktNjg5YjliOTIwZmVhP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZmFjZXMmY3M9dGlueXNyZ2ImZml0PWNyb3AmaD0xMjgmdz0xMjgmcz0zMGRhM2UxNDQ3ZmM0ODI3OWY5MTcxZTA4ZGNjMmFhOFxcXCJ9LFxcXCJsaW5rc1xcXCI6e1xcXCJzZWxmXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL3N6bWlnaWVsZGVzaWduXFxcIixcXFwiaHRtbFxcXCI6XFxcImh0dHBzOi8vdW5zcGxhc2guY29tL0Bzem1pZ2llbGRlc2lnblxcXCIsXFxcInBob3Rvc1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9zem1pZ2llbGRlc2lnbi9waG90b3NcXFwiLFxcXCJsaWtlc1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9zem1pZ2llbGRlc2lnbi9saWtlc1xcXCIsXFxcInBvcnRmb2xpb1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9zem1pZ2llbGRlc2lnbi9wb3J0Zm9saW9cXFwiLFxcXCJmb2xsb3dpbmdcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvc3ptaWdpZWxkZXNpZ24vZm9sbG93aW5nXFxcIixcXFwiZm9sbG93ZXJzXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL3N6bWlnaWVsZGVzaWduL2ZvbGxvd2Vyc1xcXCJ9fSxcXFwiY3VycmVudF91c2VyX2NvbGxlY3Rpb25zXFxcIjpbXSxcXFwidXJsc1xcXCI6e1xcXCJyYXdcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQyNjE3MDA0MjU5My0yMDBmMjUwZGZkYWZcXFwiLFxcXCJmdWxsXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0MjYxNzAwNDI1OTMtMjAwZjI1MGRmZGFmP2l4bGliPXJiLTAuMy41JnE9ODUmZm09anBnJmNyb3A9ZW50cm9weSZjcz1zcmdiJnM9NjQ4N2U3YmQwZWZjNzRlYTUyMjI4N2MwMzEwMzIyOGZcXFwiLFxcXCJyZWd1bGFyXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0MjYxNzAwNDI1OTMtMjAwZjI1MGRmZGFmP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZW50cm9weSZjcz10aW55c3JnYiZ3PTEwODAmZml0PW1heCZzPTgxODNjNDViNWE2MTg3YjY2NzRmNGRmYThkMGE2NDRiXFxcIixcXFwic21hbGxcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQyNjE3MDA0MjU5My0yMDBmMjUwZGZkYWY/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1lbnRyb3B5JmNzPXRpbnlzcmdiJnc9NDAwJmZpdD1tYXgmcz00YzEwZjNiNjg0NzliNGU4OTNjZWI1ZTY3ZTM3ODkzMVxcXCIsXFxcInRodW1iXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0MjYxNzAwNDI1OTMtMjAwZjI1MGRmZGFmP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZW50cm9weSZjcz10aW55c3JnYiZ3PTIwMCZmaXQ9bWF4JnM9YmM1YjVjZTE0YTcxMTg1YmRhNTg5NGFiM2UxZWJkMjFcXFwifSxcXFwiY2F0ZWdvcmllc1xcXCI6W10sXFxcImxpbmtzXFxcIjp7XFxcInNlbGZcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vcGhvdG9zLzJTaHZZOExmNmwwXFxcIixcXFwiaHRtbFxcXCI6XFxcImh0dHBzOi8vdW5zcGxhc2guY29tL3Bob3Rvcy8yU2h2WThMZjZsMFxcXCIsXFxcImRvd25sb2FkXFxcIjpcXFwiaHR0cHM6Ly91bnNwbGFzaC5jb20vcGhvdG9zLzJTaHZZOExmNmwwL2Rvd25sb2FkXFxcIixcXFwiZG93bmxvYWRfbG9jYXRpb25cXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vcGhvdG9zLzJTaHZZOExmNmwwL2Rvd25sb2FkXFxcIn19LHtcXFwiaWRcXFwiOlxcXCJHbUwwc191Nkg5RVxcXCIsXFxcImNyZWF0ZWRfYXRcXFwiOlxcXCIyMDE1LTA4LTExVDAwOjE0OjIxLTA0OjAwXFxcIixcXFwidXBkYXRlZF9hdFxcXCI6XFxcIjIwMTctMTAtMDJUMjA6NTk6MzMtMDQ6MDBcXFwiLFxcXCJ3aWR0aFxcXCI6NTQ3MixcXFwiaGVpZ2h0XFxcIjozMzgyLFxcXCJjb2xvclxcXCI6XFxcIiMzRjM0MUNcXFwiLFxcXCJsaWtlc1xcXCI6NTEsXFxcImxpa2VkX2J5X3VzZXJcXFwiOmZhbHNlLFxcXCJkZXNjcmlwdGlvblxcXCI6XFxcIkEgcG9uZCBpbiBhIGZvcmVzdCBpbiBLdWl0cG8gRm9yZXN0IFJlc2VydmVcXFwiLFxcXCJ1c2VyXFxcIjp7XFxcImlkXFxcIjpcXFwia01Oa290MjhlT1VcXFwiLFxcXCJ1cGRhdGVkX2F0XFxcIjpcXFwiMjAxNy0xMC0wN1QwODoyMjoyMC0wNDowMFxcXCIsXFxcInVzZXJuYW1lXFxcIjpcXFwibWt3bHNuXFxcIixcXFwibmFtZVxcXCI6XFxcIk1pa2UgV2lsc29uXFxcIixcXFwiZmlyc3RfbmFtZVxcXCI6XFxcIk1pa2VcXFwiLFxcXCJsYXN0X25hbWVcXFwiOlxcXCJXaWxzb25cXFwiLFxcXCJ0d2l0dGVyX3VzZXJuYW1lXFxcIjpcXFwic2F2aWxsZWtuaWdodFxcXCIsXFxcInBvcnRmb2xpb191cmxcXFwiOlxcXCJodHRwOi8vbWlrZXdpbHNvbi5jb20uYXVcXFwiLFxcXCJiaW9cXFwiOlxcXCJTdHJlZXQgUGhvdG9ncmFwaHkgfCBOZXcgVG9wb2dyYXBoeSAgfCBVbnNwbGFzaCBGZWF0dXJlZCBQaG90b2dyYXBoZXIgfCBTZWUgbW9yZSBvbiBJbnN0YWdyYW0gYXQgQG1rd2xzblxcXCIsXFxcImxvY2F0aW9uXFxcIjpcXFwiQXVzdHJhbGlhXFxcIixcXFwidG90YWxfbGlrZXNcXFwiOjY5MCxcXFwidG90YWxfcGhvdG9zXFxcIjo0NzgsXFxcInRvdGFsX2NvbGxlY3Rpb25zXFxcIjowLFxcXCJwcm9maWxlX2ltYWdlXFxcIjp7XFxcInNtYWxsXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Byb2ZpbGUtMTUwMDg1NTcyODM2Ni03MjNjYjJjZTg0M2I/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1mYWNlcyZjcz10aW55c3JnYiZmaXQ9Y3JvcCZoPTMyJnc9MzImcz1hZmQxZWY3YmUwMWQ5MWQyODBhOWU2NGUzZjA0ODAxNlxcXCIsXFxcIm1lZGl1bVxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9wcm9maWxlLTE1MDA4NTU3MjgzNjYtNzIzY2IyY2U4NDNiP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZmFjZXMmY3M9dGlueXNyZ2ImZml0PWNyb3AmaD02NCZ3PTY0JnM9OTI5NjY1ZDZlZDVkZDk1NDE2MzQwYjRlYWRlYTcyZGRcXFwiLFxcXCJsYXJnZVxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9wcm9maWxlLTE1MDA4NTU3MjgzNjYtNzIzY2IyY2U4NDNiP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZmFjZXMmY3M9dGlueXNyZ2ImZml0PWNyb3AmaD0xMjgmdz0xMjgmcz1kNzJlNzFjNmMzYmM1ZTFhY2M0NmRkMmI0NGU1OTllMlxcXCJ9LFxcXCJsaW5rc1xcXCI6e1xcXCJzZWxmXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL21rd2xzblxcXCIsXFxcImh0bWxcXFwiOlxcXCJodHRwczovL3Vuc3BsYXNoLmNvbS9AbWt3bHNuXFxcIixcXFwicGhvdG9zXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL21rd2xzbi9waG90b3NcXFwiLFxcXCJsaWtlc1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9ta3dsc24vbGlrZXNcXFwiLFxcXCJwb3J0Zm9saW9cXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvbWt3bHNuL3BvcnRmb2xpb1xcXCIsXFxcImZvbGxvd2luZ1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9ta3dsc24vZm9sbG93aW5nXFxcIixcXFwiZm9sbG93ZXJzXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL21rd2xzbi9mb2xsb3dlcnNcXFwifX0sXFxcImN1cnJlbnRfdXNlcl9jb2xsZWN0aW9uc1xcXCI6W10sXFxcInVybHNcXFwiOntcXFwicmF3XFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0MzkyNjYzNDcxOTgtYzk0NDk1NDRhYzdkXFxcIixcXFwiZnVsbFxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDM5MjY2MzQ3MTk4LWM5NDQ5NTQ0YWM3ZD9peGxpYj1yYi0wLjMuNSZxPTg1JmZtPWpwZyZjcm9wPWVudHJvcHkmY3M9c3JnYiZzPWUxYzhkYWMyN2FmY2M3M2M4YzZjZDQ1MWFjZmUwY2NlXFxcIixcXFwicmVndWxhclxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDM5MjY2MzQ3MTk4LWM5NDQ5NTQ0YWM3ZD9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWVudHJvcHkmY3M9dGlueXNyZ2Imdz0xMDgwJmZpdD1tYXgmcz1hNzViOThiNmNiOTZkNWRjNzliYTc5MjMzZWNmYzNkNFxcXCIsXFxcInNtYWxsXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0MzkyNjYzNDcxOTgtYzk0NDk1NDRhYzdkP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZW50cm9weSZjcz10aW55c3JnYiZ3PTQwMCZmaXQ9bWF4JnM9MjY4YTEwMjM3OTcyM2ExZTNjOGU3NzA4OTg1Y2FhYjdcXFwiLFxcXCJ0aHVtYlxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDM5MjY2MzQ3MTk4LWM5NDQ5NTQ0YWM3ZD9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWVudHJvcHkmY3M9dGlueXNyZ2Imdz0yMDAmZml0PW1heCZzPWEzNTRmOTdkNWNiN2UwMzE1ZjQ4Y2FkNDVkZDMyZjRlXFxcIn0sXFxcImNhdGVnb3JpZXNcXFwiOltdLFxcXCJsaW5rc1xcXCI6e1xcXCJzZWxmXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3Bob3Rvcy9HbUwwc191Nkg5RVxcXCIsXFxcImh0bWxcXFwiOlxcXCJodHRwczovL3Vuc3BsYXNoLmNvbS9waG90b3MvR21MMHNfdTZIOUVcXFwiLFxcXCJkb3dubG9hZFxcXCI6XFxcImh0dHBzOi8vdW5zcGxhc2guY29tL3Bob3Rvcy9HbUwwc191Nkg5RS9kb3dubG9hZFxcXCIsXFxcImRvd25sb2FkX2xvY2F0aW9uXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3Bob3Rvcy9HbUwwc191Nkg5RS9kb3dubG9hZFxcXCJ9fSx7XFxcImlkXFxcIjpcXFwicUtGeFEzWC1ZYklcXFwiLFxcXCJjcmVhdGVkX2F0XFxcIjpcXFwiMjAxNC0xMi0wOFQxNDowNjo1MC0wNTowMFxcXCIsXFxcInVwZGF0ZWRfYXRcXFwiOlxcXCIyMDE3LTEwLTA3VDA4OjIzOjQ5LTA0OjAwXFxcIixcXFwid2lkdGhcXFwiOjIyMDAsXFxcImhlaWdodFxcXCI6MTQ2NyxcXFwiY29sb3JcXFwiOlxcXCIjNkU3QzgyXFxcIixcXFwibGlrZXNcXFwiOjI2MCxcXFwibGlrZWRfYnlfdXNlclxcXCI6ZmFsc2UsXFxcImRlc2NyaXB0aW9uXFxcIjpcXFwiQSBwYWxlIHNob3Qgb2YgdGFsbCBjb25pZmVycyBpbiB0aGljayBmb2dcXFwiLFxcXCJ1c2VyXFxcIjp7XFxcImlkXFxcIjpcXFwiLXJjckpBMWJWdFFcXFwiLFxcXCJ1cGRhdGVkX2F0XFxcIjpcXFwiMjAxNy0xMC0wNVQxNDozNDozOC0wNDowMFxcXCIsXFxcInVzZXJuYW1lXFxcIjpcXFwiamF5bWFudHJpXFxcIixcXFwibmFtZVxcXCI6XFxcIkpheSBNYW50cmlcXFwiLFxcXCJmaXJzdF9uYW1lXFxcIjpcXFwiSmF5XFxcIixcXFwibGFzdF9uYW1lXFxcIjpcXFwiTWFudHJpXFxcIixcXFwidHdpdHRlcl91c2VybmFtZVxcXCI6XFxcImpheW1hbnRyaVxcXCIsXFxcInBvcnRmb2xpb191cmxcXFwiOlxcXCJodHRwOi8vamF5bWFudHJpLmNvbS9cXFwiLFxcXCJiaW9cXFwiOlxcXCJEZXNpZ25lciBieSBkYXksIGJ1cmdlciBtb25zdGVyIGJ5IG5pZ2h0LlxcXCIsXFxcImxvY2F0aW9uXFxcIjpcXFwiTG9zIEFuZ2VsZXMsIENhbGlmb3JuaWFcXFwiLFxcXCJ0b3RhbF9saWtlc1xcXCI6MCxcXFwidG90YWxfcGhvdG9zXFxcIjo1LFxcXCJ0b3RhbF9jb2xsZWN0aW9uc1xcXCI6MCxcXFwicHJvZmlsZV9pbWFnZVxcXCI6e1xcXCJzbWFsbFxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9wcm9maWxlLTE1MDMwMjc2ODQ4MjYtYzljNjQyNTI5YjkyP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZmFjZXMmY3M9dGlueXNyZ2ImZml0PWNyb3AmaD0zMiZ3PTMyJnM9NzlhMDQwZDI4YzU1NjA5ZTc0YWZhYjhjNTFiMjg1NmJcXFwiLFxcXCJtZWRpdW1cXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcHJvZmlsZS0xNTAzMDI3Njg0ODI2LWM5YzY0MjUyOWI5Mj9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWZhY2VzJmNzPXRpbnlzcmdiJmZpdD1jcm9wJmg9NjQmdz02NCZzPTI5ZjI0Yjk4NmYyMmE2ZTQ5ZmI4YTc3NjcxN2JjNzllXFxcIixcXFwibGFyZ2VcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcHJvZmlsZS0xNTAzMDI3Njg0ODI2LWM5YzY0MjUyOWI5Mj9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWZhY2VzJmNzPXRpbnlzcmdiJmZpdD1jcm9wJmg9MTI4Jnc9MTI4JnM9ZDVjNTIxNTNkNDBlYzNkNjZhOTNjZDNkOTEzZGQ2MTJcXFwifSxcXFwibGlua3NcXFwiOntcXFwic2VsZlxcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9qYXltYW50cmlcXFwiLFxcXCJodG1sXFxcIjpcXFwiaHR0cHM6Ly91bnNwbGFzaC5jb20vQGpheW1hbnRyaVxcXCIsXFxcInBob3Rvc1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9qYXltYW50cmkvcGhvdG9zXFxcIixcXFwibGlrZXNcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvamF5bWFudHJpL2xpa2VzXFxcIixcXFwicG9ydGZvbGlvXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL2pheW1hbnRyaS9wb3J0Zm9saW9cXFwiLFxcXCJmb2xsb3dpbmdcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvamF5bWFudHJpL2ZvbGxvd2luZ1xcXCIsXFxcImZvbGxvd2Vyc1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9qYXltYW50cmkvZm9sbG93ZXJzXFxcIn19LFxcXCJjdXJyZW50X3VzZXJfY29sbGVjdGlvbnNcXFwiOltdLFxcXCJ1cmxzXFxcIjp7XFxcInJhd1xcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDE4MDY1NTE0MDQxLWFjZTY1MzlmNjVjZlxcXCIsXFxcImZ1bGxcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQxODA2NTUxNDA0MS1hY2U2NTM5ZjY1Y2Y/aXhsaWI9cmItMC4zLjUmcT04NSZmbT1qcGcmY3JvcD1lbnRyb3B5JmNzPXNyZ2Imcz1hNjJhNGQ0NDdhZTFhNTBiMjg4YTk0Y2FiYTY0YTc4NlxcXCIsXFxcInJlZ3VsYXJcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQxODA2NTUxNDA0MS1hY2U2NTM5ZjY1Y2Y/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1lbnRyb3B5JmNzPXRpbnlzcmdiJnc9MTA4MCZmaXQ9bWF4JnM9MzFmZTQyYTYyYzdiMTliYmFlZGNjZGI1NDdjZmYyODdcXFwiLFxcXCJzbWFsbFxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDE4MDY1NTE0MDQxLWFjZTY1MzlmNjVjZj9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWVudHJvcHkmY3M9dGlueXNyZ2Imdz00MDAmZml0PW1heCZzPTg0MGZkMzQzNjU5M2RhN2IxMGY1NzRhN2MxODgzNzdiXFxcIixcXFwidGh1bWJcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQxODA2NTUxNDA0MS1hY2U2NTM5ZjY1Y2Y/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1lbnRyb3B5JmNzPXRpbnlzcmdiJnc9MjAwJmZpdD1tYXgmcz1hYWMxZDNmZWJmOTExZDRmMzExMzExZGM3ZWJhODI3Y1xcXCJ9LFxcXCJjYXRlZ29yaWVzXFxcIjpbXSxcXFwibGlua3NcXFwiOntcXFwic2VsZlxcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS9waG90b3MvcUtGeFEzWC1ZYklcXFwiLFxcXCJodG1sXFxcIjpcXFwiaHR0cHM6Ly91bnNwbGFzaC5jb20vcGhvdG9zL3FLRnhRM1gtWWJJXFxcIixcXFwiZG93bmxvYWRcXFwiOlxcXCJodHRwczovL3Vuc3BsYXNoLmNvbS9waG90b3MvcUtGeFEzWC1ZYkkvZG93bmxvYWRcXFwiLFxcXCJkb3dubG9hZF9sb2NhdGlvblxcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS9waG90b3MvcUtGeFEzWC1ZYkkvZG93bmxvYWRcXFwifX0se1xcXCJpZFxcXCI6XFxcInkxZmNJUWhTdTdRXFxcIixcXFwiY3JlYXRlZF9hdFxcXCI6XFxcIjIwMTUtMDktMDRUMjM6MDg6MjEtMDQ6MDBcXFwiLFxcXCJ1cGRhdGVkX2F0XFxcIjpcXFwiMjAxNy0xMC0wNVQxMzoyODo0Mi0wNDowMFxcXCIsXFxcIndpZHRoXFxcIjozODQwLFxcXCJoZWlnaHRcXFwiOjIxNjAsXFxcImNvbG9yXFxcIjpcXFwiIzVFNjA1MVxcXCIsXFxcImxpa2VzXFxcIjoxOTMsXFxcImxpa2VkX2J5X3VzZXJcXFwiOmZhbHNlLFxcXCJkZXNjcmlwdGlvblxcXCI6XFxcIkEgbG93LWFuZ2xlIHNob3Qgb2YgYSBmb2dneSBmb3Jlc3RcXFwiLFxcXCJ1c2VyXFxcIjp7XFxcImlkXFxcIjpcXFwidzdzUkgyUUo2MFVcXFwiLFxcXCJ1cGRhdGVkX2F0XFxcIjpcXFwiMjAxNy0wOS0yMlQwODo0NDoxNS0wNDowMFxcXCIsXFxcInVzZXJuYW1lXFxcIjpcXFwiZXZvbmRldmVsb3BlclxcXCIsXFxcIm5hbWVcXFwiOlxcXCJUcuG6p24gQW5oIFR14bqlblxcXCIsXFxcImZpcnN0X25hbWVcXFwiOlxcXCJUcuG6p24gQW5oXFxcIixcXFwibGFzdF9uYW1lXFxcIjpcXFwiVHXhuqVuXFxcIixcXFwidHdpdHRlcl91c2VybmFtZVxcXCI6bnVsbCxcXFwicG9ydGZvbGlvX3VybFxcXCI6bnVsbCxcXFwiYmlvXFxcIjpcXFwiXFxcIixcXFwibG9jYXRpb25cXFwiOm51bGwsXFxcInRvdGFsX2xpa2VzXFxcIjowLFxcXCJ0b3RhbF9waG90b3NcXFwiOjIsXFxcInRvdGFsX2NvbGxlY3Rpb25zXFxcIjowLFxcXCJwcm9maWxlX2ltYWdlXFxcIjp7XFxcInNtYWxsXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Byb2ZpbGUtZmItMTQ0MTQyMjQyNi1mM2QwODYyZTkwMDIuanBnP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZmFjZXMmY3M9dGlueXNyZ2ImZml0PWNyb3AmaD0zMiZ3PTMyJnM9NWQ2ZTA3NmVmZmQ1OTkzOGJhNzU1YzU0MjhkYTgxNWNcXFwiLFxcXCJtZWRpdW1cXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcHJvZmlsZS1mYi0xNDQxNDIyNDI2LWYzZDA4NjJlOTAwMi5qcGc/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1mYWNlcyZjcz10aW55c3JnYiZmaXQ9Y3JvcCZoPTY0Jnc9NjQmcz0zNmQyOTYzYmM2MWQ3ZjliZTNkOWI1YzZlNWY1ZDNjNVxcXCIsXFxcImxhcmdlXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Byb2ZpbGUtZmItMTQ0MTQyMjQyNi1mM2QwODYyZTkwMDIuanBnP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZmFjZXMmY3M9dGlueXNyZ2ImZml0PWNyb3AmaD0xMjgmdz0xMjgmcz00YzlhODZiMjhlNzY4OGQ1Nzg2ZWFmM2JhYTZiMDUzZFxcXCJ9LFxcXCJsaW5rc1xcXCI6e1xcXCJzZWxmXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL2V2b25kZXZlbG9wZXJcXFwiLFxcXCJodG1sXFxcIjpcXFwiaHR0cHM6Ly91bnNwbGFzaC5jb20vQGV2b25kZXZlbG9wZXJcXFwiLFxcXCJwaG90b3NcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvZXZvbmRldmVsb3Blci9waG90b3NcXFwiLFxcXCJsaWtlc1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9ldm9uZGV2ZWxvcGVyL2xpa2VzXFxcIixcXFwicG9ydGZvbGlvXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL2V2b25kZXZlbG9wZXIvcG9ydGZvbGlvXFxcIixcXFwiZm9sbG93aW5nXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL2V2b25kZXZlbG9wZXIvZm9sbG93aW5nXFxcIixcXFwiZm9sbG93ZXJzXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL2V2b25kZXZlbG9wZXIvZm9sbG93ZXJzXFxcIn19LFxcXCJjdXJyZW50X3VzZXJfY29sbGVjdGlvbnNcXFwiOltdLFxcXCJ1cmxzXFxcIjp7XFxcInJhd1xcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDQxNDIyNDU0MjE3LTUxOWQzZWU4MTM1MFxcXCIsXFxcImZ1bGxcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQ0MTQyMjQ1NDIxNy01MTlkM2VlODEzNTA/aXhsaWI9cmItMC4zLjUmcT04NSZmbT1qcGcmY3JvcD1lbnRyb3B5JmNzPXNyZ2Imcz1kMzY2ZmY0NTc1YTA0OTJiYWZjMWNiNDc3ZjUzZTZlYlxcXCIsXFxcInJlZ3VsYXJcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQ0MTQyMjQ1NDIxNy01MTlkM2VlODEzNTA/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1lbnRyb3B5JmNzPXRpbnlzcmdiJnc9MTA4MCZmaXQ9bWF4JnM9YjE4MzE5ZDVhMmU2OWViN2ExZTU3MzdjZWE4MTg0ZGZcXFwiLFxcXCJzbWFsbFxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDQxNDIyNDU0MjE3LTUxOWQzZWU4MTM1MD9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWVudHJvcHkmY3M9dGlueXNyZ2Imdz00MDAmZml0PW1heCZzPTkyMjVkMmI3MWY4NDA4N2E3M2NkNDE3NTY4NjExYjgxXFxcIixcXFwidGh1bWJcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQ0MTQyMjQ1NDIxNy01MTlkM2VlODEzNTA/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1lbnRyb3B5JmNzPXRpbnlzcmdiJnc9MjAwJmZpdD1tYXgmcz1iNTIyOWE1ODQxMGIyM2M3NGEzOGRiOGNiNDk5MDEyOVxcXCJ9LFxcXCJjYXRlZ29yaWVzXFxcIjpbXSxcXFwibGlua3NcXFwiOntcXFwic2VsZlxcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS9waG90b3MveTFmY0lRaFN1N1FcXFwiLFxcXCJodG1sXFxcIjpcXFwiaHR0cHM6Ly91bnNwbGFzaC5jb20vcGhvdG9zL3kxZmNJUWhTdTdRXFxcIixcXFwiZG93bmxvYWRcXFwiOlxcXCJodHRwczovL3Vuc3BsYXNoLmNvbS9waG90b3MveTFmY0lRaFN1N1EvZG93bmxvYWRcXFwiLFxcXCJkb3dubG9hZF9sb2NhdGlvblxcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS9waG90b3MveTFmY0lRaFN1N1EvZG93bmxvYWRcXFwifX0se1xcXCJpZFxcXCI6XFxcIlAzRHhPZS1PSkdBXFxcIixcXFwiY3JlYXRlZF9hdFxcXCI6XFxcIjIwMTctMDQtMTdUMjM6MzE6MDctMDQ6MDBcXFwiLFxcXCJ1cGRhdGVkX2F0XFxcIjpcXFwiMjAxNy0xMC0wMlQyMzo0MTowMy0wNDowMFxcXCIsXFxcIndpZHRoXFxcIjo0MDAwLFxcXCJoZWlnaHRcXFwiOjYwMDAsXFxcImNvbG9yXFxcIjpcXFwiI0QwQ0ZENVxcXCIsXFxcImxpa2VzXFxcIjoyNTIsXFxcImxpa2VkX2J5X3VzZXJcXFwiOmZhbHNlLFxcXCJkZXNjcmlwdGlvblxcXCI6XFxcIkFuIGV2ZXJncmVlbiBmb3Jlc3Qgd2l0aCBtb3NzIGNvdmVyaW5nIGV2ZXJ5dGhpbmcgZnJvbSB0cmVlIHRydW5rcyB0byBmYWxsZW4gbG9ncyBvbiB0aGUgZ3JvdW5kXFxcIixcXFwidXNlclxcXCI6e1xcXCJpZFxcXCI6XFxcImo2UXhvRVowU2RZXFxcIixcXFwidXBkYXRlZF9hdFxcXCI6XFxcIjIwMTctMDktMjJUMTU6MzM6NTEtMDQ6MDBcXFwiLFxcXCJ1c2VybmFtZVxcXCI6XFxcImRzYW1wc1xcXCIsXFxcIm5hbWVcXFwiOlxcXCJUdWNlXFxcIixcXFwiZmlyc3RfbmFtZVxcXCI6XFxcIlR1Y2UgXFxcIixcXFwibGFzdF9uYW1lXFxcIjpudWxsLFxcXCJ0d2l0dGVyX3VzZXJuYW1lXFxcIjpudWxsLFxcXCJwb3J0Zm9saW9fdXJsXFxcIjpudWxsLFxcXCJiaW9cXFwiOlxcXCJcXFwiLFxcXCJsb2NhdGlvblxcXCI6XFxcIlBvcnRsYW5kLE9yZWdvblxcXCIsXFxcInRvdGFsX2xpa2VzXFxcIjoyMzcsXFxcInRvdGFsX3Bob3Rvc1xcXCI6NTcsXFxcInRvdGFsX2NvbGxlY3Rpb25zXFxcIjowLFxcXCJwcm9maWxlX2ltYWdlXFxcIjp7XFxcInNtYWxsXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Byb2ZpbGUtMTQ5MjQ4NjM4NjQ0OS0wNDA3NDhmODZjNTc/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1mYWNlcyZjcz10aW55c3JnYiZmaXQ9Y3JvcCZoPTMyJnc9MzImcz05M2QxYWZkZmM2ZGFmMzM3ZmUxZTAyYjY2OGMyNzM5OVxcXCIsXFxcIm1lZGl1bVxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9wcm9maWxlLTE0OTI0ODYzODY0NDktMDQwNzQ4Zjg2YzU3P2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZmFjZXMmY3M9dGlueXNyZ2ImZml0PWNyb3AmaD02NCZ3PTY0JnM9YjRlNGU1MjVjYWFlMjU3ZGExZDgxMzg5NjY0ZWQ3MDRcXFwiLFxcXCJsYXJnZVxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9wcm9maWxlLTE0OTI0ODYzODY0NDktMDQwNzQ4Zjg2YzU3P2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZmFjZXMmY3M9dGlueXNyZ2ImZml0PWNyb3AmaD0xMjgmdz0xMjgmcz0zMjYyMWNjMDg5MjRhOTY1OWI0ZjYxYWJjZDY1NjQ2MlxcXCJ9LFxcXCJsaW5rc1xcXCI6e1xcXCJzZWxmXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL2RzYW1wc1xcXCIsXFxcImh0bWxcXFwiOlxcXCJodHRwczovL3Vuc3BsYXNoLmNvbS9AZHNhbXBzXFxcIixcXFwicGhvdG9zXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL2RzYW1wcy9waG90b3NcXFwiLFxcXCJsaWtlc1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9kc2FtcHMvbGlrZXNcXFwiLFxcXCJwb3J0Zm9saW9cXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvZHNhbXBzL3BvcnRmb2xpb1xcXCIsXFxcImZvbGxvd2luZ1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9kc2FtcHMvZm9sbG93aW5nXFxcIixcXFwiZm9sbG93ZXJzXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL2RzYW1wcy9mb2xsb3dlcnNcXFwifX0sXFxcImN1cnJlbnRfdXNlcl9jb2xsZWN0aW9uc1xcXCI6W10sXFxcInVybHNcXFwiOntcXFwicmF3XFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0OTI0ODYxNjk0NzYtOGM1ZGFmZDk1MzlmXFxcIixcXFwiZnVsbFxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDkyNDg2MTY5NDc2LThjNWRhZmQ5NTM5Zj9peGxpYj1yYi0wLjMuNSZxPTg1JmZtPWpwZyZjcm9wPWVudHJvcHkmY3M9c3JnYiZzPTMxNDQ5MzY1YTY5ZTFjYjllOWQwNDJmOGRkZjExMDI3XFxcIixcXFwicmVndWxhclxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDkyNDg2MTY5NDc2LThjNWRhZmQ5NTM5Zj9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWVudHJvcHkmY3M9dGlueXNyZ2Imdz0xMDgwJmZpdD1tYXgmcz1hMTM4ZmU3OTQ2ZDZmMDI4ZDNhZTMxZThiYmIzNTE3NlxcXCIsXFxcInNtYWxsXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0OTI0ODYxNjk0NzYtOGM1ZGFmZDk1MzlmP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZW50cm9weSZjcz10aW55c3JnYiZ3PTQwMCZmaXQ9bWF4JnM9YWI2ZDA1Y2Y5MmY4NDIwMjc4YzE5MTdmOTgyOGIzOWZcXFwiLFxcXCJ0aHVtYlxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDkyNDg2MTY5NDc2LThjNWRhZmQ5NTM5Zj9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWVudHJvcHkmY3M9dGlueXNyZ2Imdz0yMDAmZml0PW1heCZzPTY3M2Y1ZmY0Y2MyNGNlMDgwYTc2NzdmYTY0M2M1NzhhXFxcIn0sXFxcImNhdGVnb3JpZXNcXFwiOltdLFxcXCJsaW5rc1xcXCI6e1xcXCJzZWxmXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3Bob3Rvcy9QM0R4T2UtT0pHQVxcXCIsXFxcImh0bWxcXFwiOlxcXCJodHRwczovL3Vuc3BsYXNoLmNvbS9waG90b3MvUDNEeE9lLU9KR0FcXFwiLFxcXCJkb3dubG9hZFxcXCI6XFxcImh0dHBzOi8vdW5zcGxhc2guY29tL3Bob3Rvcy9QM0R4T2UtT0pHQS9kb3dubG9hZFxcXCIsXFxcImRvd25sb2FkX2xvY2F0aW9uXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3Bob3Rvcy9QM0R4T2UtT0pHQS9kb3dubG9hZFxcXCJ9fSx7XFxcImlkXFxcIjpcXFwiX05NNmJYUHFhQ0VcXFwiLFxcXCJjcmVhdGVkX2F0XFxcIjpcXFwiMjAxNy0wMy0wMlQxNjoxODoyNS0wNTowMFxcXCIsXFxcInVwZGF0ZWRfYXRcXFwiOlxcXCIyMDE3LTEwLTA1VDEwOjU2OjIzLTA0OjAwXFxcIixcXFwid2lkdGhcXFwiOjQwMDAsXFxcImhlaWdodFxcXCI6MzAwMCxcXFwiY29sb3JcXFwiOlxcXCIjQ0RDN0QxXFxcIixcXFwibGlrZXNcXFwiOjE0OSxcXFwibGlrZWRfYnlfdXNlclxcXCI6ZmFsc2UsXFxcImRlc2NyaXB0aW9uXFxcIjpudWxsLFxcXCJ1c2VyXFxcIjp7XFxcImlkXFxcIjpcXFwiWW5pYnFHci1LTmdcXFwiLFxcXCJ1cGRhdGVkX2F0XFxcIjpcXFwiMjAxNy0xMC0wN1QwNzo1ODo0Mi0wNDowMFxcXCIsXFxcInVzZXJuYW1lXFxcIjpcXFwiZ2VyYW5cXFwiLFxcXCJuYW1lXFxcIjpcXFwiR2VyYW4gZGUgS2xlcmtcXFwiLFxcXCJmaXJzdF9uYW1lXFxcIjpcXFwiR2VyYW5cXFwiLFxcXCJsYXN0X25hbWVcXFwiOlxcXCJkZSBLbGVya1xcXCIsXFxcInR3aXR0ZXJfdXNlcm5hbWVcXFwiOlxcXCJnZXJhbmRla2xlcmtcXFwiLFxcXCJwb3J0Zm9saW9fdXJsXFxcIjpcXFwiaHR0cDovL2luc3RhZ3JhbS5jb20vZ2VyYW5kZWtsZXJrXFxcIixcXFwiYmlvXFxcIjpcXFwiUHJvIGdlZWsuIFRlcnJpYmxlIGRhbmNlci4gSW5zdGFncmFtOiBAZ2VyYW5kZWtsZXJrXFxcIixcXFwibG9jYXRpb25cXFwiOlxcXCJTdG9ja2hvbG1cXFwiLFxcXCJ0b3RhbF9saWtlc1xcXCI6MCxcXFwidG90YWxfcGhvdG9zXFxcIjoyNyxcXFwidG90YWxfY29sbGVjdGlvbnNcXFwiOjAsXFxcInByb2ZpbGVfaW1hZ2VcXFwiOntcXFwic21hbGxcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcHJvZmlsZS0xNDczNzcyOTA5NTM2LWYxN2E4YWI5MDE4OT9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWZhY2VzJmNzPXRpbnlzcmdiJmZpdD1jcm9wJmg9MzImdz0zMiZzPTBiMWJhZWFiNTg5NDMwMzhmYzUxYzMwN2E1ZmNkMTc5XFxcIixcXFwibWVkaXVtXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Byb2ZpbGUtMTQ3Mzc3MjkwOTUzNi1mMTdhOGFiOTAxODk/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1mYWNlcyZjcz10aW55c3JnYiZmaXQ9Y3JvcCZoPTY0Jnc9NjQmcz1jODdlMjJiYWUyYmVhYmNiNTUwOGFkNzkyNTYzZGIzNlxcXCIsXFxcImxhcmdlXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Byb2ZpbGUtMTQ3Mzc3MjkwOTUzNi1mMTdhOGFiOTAxODk/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1mYWNlcyZjcz10aW55c3JnYiZmaXQ9Y3JvcCZoPTEyOCZ3PTEyOCZzPTBmZjlhM2Y5MjkyMzAyMTJkMDhhZjBmZjQ0MmNhMDEwXFxcIn0sXFxcImxpbmtzXFxcIjp7XFxcInNlbGZcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvZ2VyYW5cXFwiLFxcXCJodG1sXFxcIjpcXFwiaHR0cHM6Ly91bnNwbGFzaC5jb20vQGdlcmFuXFxcIixcXFwicGhvdG9zXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL2dlcmFuL3Bob3Rvc1xcXCIsXFxcImxpa2VzXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL2dlcmFuL2xpa2VzXFxcIixcXFwicG9ydGZvbGlvXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL2dlcmFuL3BvcnRmb2xpb1xcXCIsXFxcImZvbGxvd2luZ1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9nZXJhbi9mb2xsb3dpbmdcXFwiLFxcXCJmb2xsb3dlcnNcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvZ2VyYW4vZm9sbG93ZXJzXFxcIn19LFxcXCJjdXJyZW50X3VzZXJfY29sbGVjdGlvbnNcXFwiOltdLFxcXCJ1cmxzXFxcIjp7XFxcInJhd1xcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDg4NDg5MTUzNTgzLTg5Y2UxOGRkNDk2OFxcXCIsXFxcImZ1bGxcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQ4ODQ4OTE1MzU4My04OWNlMThkZDQ5Njg/aXhsaWI9cmItMC4zLjUmcT04NSZmbT1qcGcmY3JvcD1lbnRyb3B5JmNzPXNyZ2Imcz0yNWExYjEyYjAyZGVjZGM0Njk5MzI5NGMzM2Q2ODFhYVxcXCIsXFxcInJlZ3VsYXJcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQ4ODQ4OTE1MzU4My04OWNlMThkZDQ5Njg/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1lbnRyb3B5JmNzPXRpbnlzcmdiJnc9MTA4MCZmaXQ9bWF4JnM9OWQxNTNkYjc4MWEyYWJhZDAyNTU1NGViNjQzNjlmYzJcXFwiLFxcXCJzbWFsbFxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDg4NDg5MTUzNTgzLTg5Y2UxOGRkNDk2OD9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWVudHJvcHkmY3M9dGlueXNyZ2Imdz00MDAmZml0PW1heCZzPWI4NGE5N2FkYzkxMDM1NDNmNTMwZWJjYzdlOTg1ZDY5XFxcIixcXFwidGh1bWJcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQ4ODQ4OTE1MzU4My04OWNlMThkZDQ5Njg/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1lbnRyb3B5JmNzPXRpbnlzcmdiJnc9MjAwJmZpdD1tYXgmcz1hZDU5ZmE5YjEwNWUyMzY0Yjc3MGYyNjZkNzI5NzlkM1xcXCJ9LFxcXCJjYXRlZ29yaWVzXFxcIjpbXSxcXFwibGlua3NcXFwiOntcXFwic2VsZlxcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS9waG90b3MvX05NNmJYUHFhQ0VcXFwiLFxcXCJodG1sXFxcIjpcXFwiaHR0cHM6Ly91bnNwbGFzaC5jb20vcGhvdG9zL19OTTZiWFBxYUNFXFxcIixcXFwiZG93bmxvYWRcXFwiOlxcXCJodHRwczovL3Vuc3BsYXNoLmNvbS9waG90b3MvX05NNmJYUHFhQ0UvZG93bmxvYWRcXFwiLFxcXCJkb3dubG9hZF9sb2NhdGlvblxcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS9waG90b3MvX05NNmJYUHFhQ0UvZG93bmxvYWRcXFwifX0se1xcXCJpZFxcXCI6XFxcIktjeHY3R3o3d213XFxcIixcXFwiY3JlYXRlZF9hdFxcXCI6XFxcIjIwMTctMDUtMjFUMTU6MzY6MTgtMDQ6MDBcXFwiLFxcXCJ1cGRhdGVkX2F0XFxcIjpcXFwiMjAxNy0xMC0wMlQxNDozOTo0Ny0wNDowMFxcXCIsXFxcIndpZHRoXFxcIjozNjQ4LFxcXCJoZWlnaHRcXFwiOjUzNDAsXFxcImNvbG9yXFxcIjpcXFwiI0ZERkRGQlxcXCIsXFxcImxpa2VzXFxcIjoxMzgsXFxcImxpa2VkX2J5X3VzZXJcXFwiOmZhbHNlLFxcXCJkZXNjcmlwdGlvblxcXCI6XFxcIkEgYmxvbmRlIHdvbWFuIHN0cm9sbGluZyBhbG9uZyBhIHN1bmxpdCBwYXRoIHRocm91Z2ggdGhlIGZvcmVzdCBpbiBOeW7DpHNoYW1uXFxcIixcXFwidXNlclxcXCI6e1xcXCJpZFxcXCI6XFxcIlluaWJxR3ItS05nXFxcIixcXFwidXBkYXRlZF9hdFxcXCI6XFxcIjIwMTctMTAtMDdUMDc6NTg6NDItMDQ6MDBcXFwiLFxcXCJ1c2VybmFtZVxcXCI6XFxcImdlcmFuXFxcIixcXFwibmFtZVxcXCI6XFxcIkdlcmFuIGRlIEtsZXJrXFxcIixcXFwiZmlyc3RfbmFtZVxcXCI6XFxcIkdlcmFuXFxcIixcXFwibGFzdF9uYW1lXFxcIjpcXFwiZGUgS2xlcmtcXFwiLFxcXCJ0d2l0dGVyX3VzZXJuYW1lXFxcIjpcXFwiZ2VyYW5kZWtsZXJrXFxcIixcXFwicG9ydGZvbGlvX3VybFxcXCI6XFxcImh0dHA6Ly9pbnN0YWdyYW0uY29tL2dlcmFuZGVrbGVya1xcXCIsXFxcImJpb1xcXCI6XFxcIlBybyBnZWVrLiBUZXJyaWJsZSBkYW5jZXIuIEluc3RhZ3JhbTogQGdlcmFuZGVrbGVya1xcXCIsXFxcImxvY2F0aW9uXFxcIjpcXFwiU3RvY2tob2xtXFxcIixcXFwidG90YWxfbGlrZXNcXFwiOjAsXFxcInRvdGFsX3Bob3Rvc1xcXCI6MjcsXFxcInRvdGFsX2NvbGxlY3Rpb25zXFxcIjowLFxcXCJwcm9maWxlX2ltYWdlXFxcIjp7XFxcInNtYWxsXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Byb2ZpbGUtMTQ3Mzc3MjkwOTUzNi1mMTdhOGFiOTAxODk/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1mYWNlcyZjcz10aW55c3JnYiZmaXQ9Y3JvcCZoPTMyJnc9MzImcz0wYjFiYWVhYjU4OTQzMDM4ZmM1MWMzMDdhNWZjZDE3OVxcXCIsXFxcIm1lZGl1bVxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9wcm9maWxlLTE0NzM3NzI5MDk1MzYtZjE3YThhYjkwMTg5P2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZmFjZXMmY3M9dGlueXNyZ2ImZml0PWNyb3AmaD02NCZ3PTY0JnM9Yzg3ZTIyYmFlMmJlYWJjYjU1MDhhZDc5MjU2M2RiMzZcXFwiLFxcXCJsYXJnZVxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9wcm9maWxlLTE0NzM3NzI5MDk1MzYtZjE3YThhYjkwMTg5P2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZmFjZXMmY3M9dGlueXNyZ2ImZml0PWNyb3AmaD0xMjgmdz0xMjgmcz0wZmY5YTNmOTI5MjMwMjEyZDA4YWYwZmY0NDJjYTAxMFxcXCJ9LFxcXCJsaW5rc1xcXCI6e1xcXCJzZWxmXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL2dlcmFuXFxcIixcXFwiaHRtbFxcXCI6XFxcImh0dHBzOi8vdW5zcGxhc2guY29tL0BnZXJhblxcXCIsXFxcInBob3Rvc1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9nZXJhbi9waG90b3NcXFwiLFxcXCJsaWtlc1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9nZXJhbi9saWtlc1xcXCIsXFxcInBvcnRmb2xpb1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9nZXJhbi9wb3J0Zm9saW9cXFwiLFxcXCJmb2xsb3dpbmdcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvZ2VyYW4vZm9sbG93aW5nXFxcIixcXFwiZm9sbG93ZXJzXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL2dlcmFuL2ZvbGxvd2Vyc1xcXCJ9fSxcXFwiY3VycmVudF91c2VyX2NvbGxlY3Rpb25zXFxcIjpbXSxcXFwidXJsc1xcXCI6e1xcXCJyYXdcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQ5NTM5NTIyNjIwMC04ZmJmNmI3MjBiOGNcXFwiLFxcXCJmdWxsXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0OTUzOTUyMjYyMDAtOGZiZjZiNzIwYjhjP2l4bGliPXJiLTAuMy41JnE9ODUmZm09anBnJmNyb3A9ZW50cm9weSZjcz1zcmdiJnM9ZDkzMmMxY2FhMWFmN2NkM2I0NWYzZjVjMjBjNDIyZTFcXFwiLFxcXCJyZWd1bGFyXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0OTUzOTUyMjYyMDAtOGZiZjZiNzIwYjhjP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZW50cm9weSZjcz10aW55c3JnYiZ3PTEwODAmZml0PW1heCZzPWFlY2Y3MzhjZDM4ODFkMTA2ZTBkNDNjYTgwNDUxMmNhXFxcIixcXFwic21hbGxcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQ5NTM5NTIyNjIwMC04ZmJmNmI3MjBiOGM/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1lbnRyb3B5JmNzPXRpbnlzcmdiJnc9NDAwJmZpdD1tYXgmcz1hOGVhOTZhM2UzMmE0OGY0YTEzYmU4ZTVjOGI0NDIxOVxcXCIsXFxcInRodW1iXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0OTUzOTUyMjYyMDAtOGZiZjZiNzIwYjhjP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZW50cm9weSZjcz10aW55c3JnYiZ3PTIwMCZmaXQ9bWF4JnM9Y2JlNzA1MjE5ZGRkZTJmZGYzNzI4ZDYzNTU1YzIwZmRcXFwifSxcXFwiY2F0ZWdvcmllc1xcXCI6W10sXFxcImxpbmtzXFxcIjp7XFxcInNlbGZcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vcGhvdG9zL0tjeHY3R3o3d213XFxcIixcXFwiaHRtbFxcXCI6XFxcImh0dHBzOi8vdW5zcGxhc2guY29tL3Bob3Rvcy9LY3h2N0d6N3dtd1xcXCIsXFxcImRvd25sb2FkXFxcIjpcXFwiaHR0cHM6Ly91bnNwbGFzaC5jb20vcGhvdG9zL0tjeHY3R3o3d213L2Rvd25sb2FkXFxcIixcXFwiZG93bmxvYWRfbG9jYXRpb25cXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vcGhvdG9zL0tjeHY3R3o3d213L2Rvd25sb2FkXFxcIn19LHtcXFwiaWRcXFwiOlxcXCJBcnRWSi0yMTdDd1xcXCIsXFxcImNyZWF0ZWRfYXRcXFwiOlxcXCIyMDE1LTExLTAyVDExOjUxOjM5LTA1OjAwXFxcIixcXFwidXBkYXRlZF9hdFxcXCI6XFxcIjIwMTctMTAtMDNUMTQ6MDE6NTUtMDQ6MDBcXFwiLFxcXCJ3aWR0aFxcXCI6NTE4NCxcXFwiaGVpZ2h0XFxcIjozNDU2LFxcXCJjb2xvclxcXCI6XFxcIiM2NTZBNURcXFwiLFxcXCJsaWtlc1xcXCI6MTAzLFxcXCJsaWtlZF9ieV91c2VyXFxcIjpmYWxzZSxcXFwiZGVzY3JpcHRpb25cXFwiOm51bGwsXFxcInVzZXJcXFwiOntcXFwiaWRcXFwiOlxcXCJtVDdzcnpuMVJXSVxcXCIsXFxcInVwZGF0ZWRfYXRcXFwiOlxcXCIyMDE3LTA5LTIxVDE0OjQyOjA4LTA0OjAwXFxcIixcXFwidXNlcm5hbWVcXFwiOlxcXCJzb21vbmVzdW1tZXJzXFxcIixcXFwibmFtZVxcXCI6XFxcIlBhdWwgU3VtbWVyc1xcXCIsXFxcImZpcnN0X25hbWVcXFwiOlxcXCJQYXVsXFxcIixcXFwibGFzdF9uYW1lXFxcIjpcXFwiU3VtbWVyc1xcXCIsXFxcInR3aXR0ZXJfdXNlcm5hbWVcXFwiOm51bGwsXFxcInBvcnRmb2xpb191cmxcXFwiOlxcXCJodHRwczovL3d3dy5mbGlja3IuY29tL3Bob3Rvcy9wYXVsX3N1bW1lcnMvXFxcIixcXFwiYmlvXFxcIjpcXFwiXFxcIixcXFwibG9jYXRpb25cXFwiOm51bGwsXFxcInRvdGFsX2xpa2VzXFxcIjowLFxcXCJ0b3RhbF9waG90b3NcXFwiOjEwLFxcXCJ0b3RhbF9jb2xsZWN0aW9uc1xcXCI6MCxcXFwicHJvZmlsZV9pbWFnZVxcXCI6e1xcXCJzbWFsbFxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9wcm9maWxlLTE0NDY0ODM1MTY4MzUtYmNiNmNjYTFiMDJkP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZmFjZXMmY3M9dGlueXNyZ2ImZml0PWNyb3AmaD0zMiZ3PTMyJnM9OWI4NWJmMjk3N2Y1ODE2YzBmYjVmNjkxZDNiZWFjNmRcXFwiLFxcXCJtZWRpdW1cXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcHJvZmlsZS0xNDQ2NDgzNTE2ODM1LWJjYjZjY2ExYjAyZD9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWZhY2VzJmNzPXRpbnlzcmdiJmZpdD1jcm9wJmg9NjQmdz02NCZzPTBiNGU0MjY1ODFiZWFhYmM1YTBjN2E1NTVmNDRjYTJjXFxcIixcXFwibGFyZ2VcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcHJvZmlsZS0xNDQ2NDgzNTE2ODM1LWJjYjZjY2ExYjAyZD9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWZhY2VzJmNzPXRpbnlzcmdiJmZpdD1jcm9wJmg9MTI4Jnc9MTI4JnM9ZWUxOWI3YWZhYTdiMWIyNmU4YmRmNjExYzYyMTEwYmVcXFwifSxcXFwibGlua3NcXFwiOntcXFwic2VsZlxcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9zb21vbmVzdW1tZXJzXFxcIixcXFwiaHRtbFxcXCI6XFxcImh0dHBzOi8vdW5zcGxhc2guY29tL0Bzb21vbmVzdW1tZXJzXFxcIixcXFwicGhvdG9zXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL3NvbW9uZXN1bW1lcnMvcGhvdG9zXFxcIixcXFwibGlrZXNcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvc29tb25lc3VtbWVycy9saWtlc1xcXCIsXFxcInBvcnRmb2xpb1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9zb21vbmVzdW1tZXJzL3BvcnRmb2xpb1xcXCIsXFxcImZvbGxvd2luZ1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9zb21vbmVzdW1tZXJzL2ZvbGxvd2luZ1xcXCIsXFxcImZvbGxvd2Vyc1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9zb21vbmVzdW1tZXJzL2ZvbGxvd2Vyc1xcXCJ9fSxcXFwiY3VycmVudF91c2VyX2NvbGxlY3Rpb25zXFxcIjpbXSxcXFwidXJsc1xcXCI6e1xcXCJyYXdcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQ0NjQ4MzA1MDY3Ni1iZDJmZGYzYWMyZDZcXFwiLFxcXCJmdWxsXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0NDY0ODMwNTA2NzYtYmQyZmRmM2FjMmQ2P2l4bGliPXJiLTAuMy41JnE9ODUmZm09anBnJmNyb3A9ZW50cm9weSZjcz1zcmdiJnM9NjJjMDE4NDI1YWMxYjBhY2ZiNTAwYzM4ODk0Y2YxYWNcXFwiLFxcXCJyZWd1bGFyXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0NDY0ODMwNTA2NzYtYmQyZmRmM2FjMmQ2P2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZW50cm9weSZjcz10aW55c3JnYiZ3PTEwODAmZml0PW1heCZzPTkwNTYwOWRhMjA2MTdiOTZhYjM3MzU1NWNkYWMzMzhlXFxcIixcXFwic21hbGxcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQ0NjQ4MzA1MDY3Ni1iZDJmZGYzYWMyZDY/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1lbnRyb3B5JmNzPXRpbnlzcmdiJnc9NDAwJmZpdD1tYXgmcz1mMjcwNDdmNGQwZDNjOGY5MGEwMWZlYjYxMjNlYjc3NVxcXCIsXFxcInRodW1iXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0NDY0ODMwNTA2NzYtYmQyZmRmM2FjMmQ2P2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZW50cm9weSZjcz10aW55c3JnYiZ3PTIwMCZmaXQ9bWF4JnM9MGQ3MTJmNDg0MGM5MTVmODNmNzY3MWY5OGExODllMmZcXFwifSxcXFwiY2F0ZWdvcmllc1xcXCI6W10sXFxcImxpbmtzXFxcIjp7XFxcInNlbGZcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vcGhvdG9zL0FydFZKLTIxN0N3XFxcIixcXFwiaHRtbFxcXCI6XFxcImh0dHBzOi8vdW5zcGxhc2guY29tL3Bob3Rvcy9BcnRWSi0yMTdDd1xcXCIsXFxcImRvd25sb2FkXFxcIjpcXFwiaHR0cHM6Ly91bnNwbGFzaC5jb20vcGhvdG9zL0FydFZKLTIxN0N3L2Rvd25sb2FkXFxcIixcXFwiZG93bmxvYWRfbG9jYXRpb25cXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vcGhvdG9zL0FydFZKLTIxN0N3L2Rvd25sb2FkXFxcIn19LHtcXFwiaWRcXFwiOlxcXCJlODVxVjNOanJVd1xcXCIsXFxcImNyZWF0ZWRfYXRcXFwiOlxcXCIyMDE1LTA0LTE0VDE3OjEyOjIxLTA0OjAwXFxcIixcXFwidXBkYXRlZF9hdFxcXCI6XFxcIjIwMTctMDktMjRUMjI6NDY6MTktMDQ6MDBcXFwiLFxcXCJ3aWR0aFxcXCI6NDA5NixcXFwiaGVpZ2h0XFxcIjoxODIxLFxcXCJjb2xvclxcXCI6XFxcIiM0MjRFM0VcXFwiLFxcXCJsaWtlc1xcXCI6NzYsXFxcImxpa2VkX2J5X3VzZXJcXFwiOmZhbHNlLFxcXCJkZXNjcmlwdGlvblxcXCI6bnVsbCxcXFwidXNlclxcXCI6e1xcXCJpZFxcXCI6XFxcIndnai0wdHlWbzkwXFxcIixcXFwidXBkYXRlZF9hdFxcXCI6XFxcIjIwMTctMDktMjJUMTc6MTg6NDMtMDQ6MDBcXFwiLFxcXCJ1c2VybmFtZVxcXCI6XFxcInZpa3Rvcl9tXFxcIixcXFwibmFtZVxcXCI6XFxcIlZpa3RvciBNb2dpbGF0XFxcIixcXFwiZmlyc3RfbmFtZVxcXCI6XFxcIlZpa3RvclxcXCIsXFxcImxhc3RfbmFtZVxcXCI6XFxcIk1vZ2lsYXRcXFwiLFxcXCJ0d2l0dGVyX3VzZXJuYW1lXFxcIjpudWxsLFxcXCJwb3J0Zm9saW9fdXJsXFxcIjpcXFwiaHR0cHM6Ly93d3cuZmxpY2tyLmNvbS9waG90b3MvbW9naWxhdF92L1xcXCIsXFxcImJpb1xcXCI6XFxcIlxcXCIsXFxcImxvY2F0aW9uXFxcIjpudWxsLFxcXCJ0b3RhbF9saWtlc1xcXCI6MCxcXFwidG90YWxfcGhvdG9zXFxcIjoxNyxcXFwidG90YWxfY29sbGVjdGlvbnNcXFwiOjAsXFxcInByb2ZpbGVfaW1hZ2VcXFwiOntcXFwic21hbGxcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGxhY2Vob2xkZXItYXZhdGFycy9leHRyYS1sYXJnZS5qcGc/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1mYWNlcyZjcz10aW55c3JnYiZmaXQ9Y3JvcCZoPTMyJnc9MzImcz0wYWQ2OGY0NGM0NzI1ZDVhM2ZkYTAxOWJhYjlkM2VkY1xcXCIsXFxcIm1lZGl1bVxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9wbGFjZWhvbGRlci1hdmF0YXJzL2V4dHJhLWxhcmdlLmpwZz9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWZhY2VzJmNzPXRpbnlzcmdiJmZpdD1jcm9wJmg9NjQmdz02NCZzPTM1NmJkNGI3NmEzZDRlYjk3ZDYzZjQ1YjgxOGRkMzU4XFxcIixcXFwibGFyZ2VcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGxhY2Vob2xkZXItYXZhdGFycy9leHRyYS1sYXJnZS5qcGc/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1mYWNlcyZjcz10aW55c3JnYiZmaXQ9Y3JvcCZoPTEyOCZ3PTEyOCZzPWVlOGJiZjVmYjhkNmU0M2FhYWEyMzhmZWFlMmZlOTBkXFxcIn0sXFxcImxpbmtzXFxcIjp7XFxcInNlbGZcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvdmlrdG9yX21cXFwiLFxcXCJodG1sXFxcIjpcXFwiaHR0cHM6Ly91bnNwbGFzaC5jb20vQHZpa3Rvcl9tXFxcIixcXFwicGhvdG9zXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL3Zpa3Rvcl9tL3Bob3Rvc1xcXCIsXFxcImxpa2VzXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL3Zpa3Rvcl9tL2xpa2VzXFxcIixcXFwicG9ydGZvbGlvXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL3Zpa3Rvcl9tL3BvcnRmb2xpb1xcXCIsXFxcImZvbGxvd2luZ1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy92aWt0b3JfbS9mb2xsb3dpbmdcXFwiLFxcXCJmb2xsb3dlcnNcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvdmlrdG9yX20vZm9sbG93ZXJzXFxcIn19LFxcXCJjdXJyZW50X3VzZXJfY29sbGVjdGlvbnNcXFwiOltdLFxcXCJ1cmxzXFxcIjp7XFxcInJhd1xcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDI5MDQyMzQ0NjMzLTkxM2VhNGJlNWZiN1xcXCIsXFxcImZ1bGxcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQyOTA0MjM0NDYzMy05MTNlYTRiZTVmYjc/aXhsaWI9cmItMC4zLjUmcT04NSZmbT1qcGcmY3JvcD1lbnRyb3B5JmNzPXNyZ2Imcz0zZGRiMzYxM2EzNjljNmJlMTNlMzhjMGE4ZDJiZjJiMlxcXCIsXFxcInJlZ3VsYXJcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQyOTA0MjM0NDYzMy05MTNlYTRiZTVmYjc/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1lbnRyb3B5JmNzPXRpbnlzcmdiJnc9MTA4MCZmaXQ9bWF4JnM9OTVmMjQ0NjNiMjA3OTgzNDkwMzliZjc0MjliYmUzYjdcXFwiLFxcXCJzbWFsbFxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDI5MDQyMzQ0NjMzLTkxM2VhNGJlNWZiNz9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWVudHJvcHkmY3M9dGlueXNyZ2Imdz00MDAmZml0PW1heCZzPTM3OTlmODIwZjg3ZTNiNWE1YTM1ZDA1Mjc2MTcxN2I5XFxcIixcXFwidGh1bWJcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQyOTA0MjM0NDYzMy05MTNlYTRiZTVmYjc/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1lbnRyb3B5JmNzPXRpbnlzcmdiJnc9MjAwJmZpdD1tYXgmcz0yOWZiOGI4YzYyNmZkMGMyODJhOTNmYjAyMzJlZTExZFxcXCJ9LFxcXCJjYXRlZ29yaWVzXFxcIjpbXSxcXFwibGlua3NcXFwiOntcXFwic2VsZlxcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS9waG90b3MvZTg1cVYzTmpyVXdcXFwiLFxcXCJodG1sXFxcIjpcXFwiaHR0cHM6Ly91bnNwbGFzaC5jb20vcGhvdG9zL2U4NXFWM05qclV3XFxcIixcXFwiZG93bmxvYWRcXFwiOlxcXCJodHRwczovL3Vuc3BsYXNoLmNvbS9waG90b3MvZTg1cVYzTmpyVXcvZG93bmxvYWRcXFwiLFxcXCJkb3dubG9hZF9sb2NhdGlvblxcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS9waG90b3MvZTg1cVYzTmpyVXcvZG93bmxvYWRcXFwifX0se1xcXCJpZFxcXCI6XFxcImE3Mm84dzlIQzJ3XFxcIixcXFwiY3JlYXRlZF9hdFxcXCI6XFxcIjIwMTctMDYtMDNUMTc6NDU6NTEtMDQ6MDBcXFwiLFxcXCJ1cGRhdGVkX2F0XFxcIjpcXFwiMjAxNy0xMC0wNlQwOTo1NjowOC0wNDowMFxcXCIsXFxcIndpZHRoXFxcIjo0MDY3LFxcXCJoZWlnaHRcXFwiOjI3MTIsXFxcImNvbG9yXFxcIjpcXFwiI0NBRjlFOVxcXCIsXFxcImxpa2VzXFxcIjoyMzAsXFxcImxpa2VkX2J5X3VzZXJcXFwiOmZhbHNlLFxcXCJkZXNjcmlwdGlvblxcXCI6bnVsbCxcXFwidXNlclxcXCI6e1xcXCJpZFxcXCI6XFxcIk5fVHlKZE0ycHRVXFxcIixcXFwidXBkYXRlZF9hdFxcXCI6XFxcIjIwMTctMTAtMDZUMjE6NDM6MDYtMDQ6MDBcXFwiLFxcXCJ1c2VybmFtZVxcXCI6XFxcImpwbGVuaW9cXFwiLFxcXCJuYW1lXFxcIjpcXFwiSm9oYW5uZXMgUGxlbmlvXFxcIixcXFwiZmlyc3RfbmFtZVxcXCI6XFxcIkpvaGFubmVzXFxcIixcXFwibGFzdF9uYW1lXFxcIjpcXFwiUGxlbmlvXFxcIixcXFwidHdpdHRlcl91c2VybmFtZVxcXCI6bnVsbCxcXFwicG9ydGZvbGlvX3VybFxcXCI6XFxcImh0dHA6Ly81MDBweC5jb20vam9wbFxcXCIsXFxcImJpb1xcXCI6XFxcIlxcXCIsXFxcImxvY2F0aW9uXFxcIjpcXFwiTXVuaWNoXFxcIixcXFwidG90YWxfbGlrZXNcXFwiOjc2LFxcXCJ0b3RhbF9waG90b3NcXFwiOjEyOSxcXFwidG90YWxfY29sbGVjdGlvbnNcXFwiOjMsXFxcInByb2ZpbGVfaW1hZ2VcXFwiOntcXFwic21hbGxcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcHJvZmlsZS0xNDkzMzIwMzc1MTEzLThkNzc2ZTY0NmZkMD9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWZhY2VzJmNzPXRpbnlzcmdiJmZpdD1jcm9wJmg9MzImdz0zMiZzPWYwNmM2ZjkyZDhlYzNlMmQ3ZjhmOTc5ODg5YzU2NDdmXFxcIixcXFwibWVkaXVtXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Byb2ZpbGUtMTQ5MzMyMDM3NTExMy04ZDc3NmU2NDZmZDA/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1mYWNlcyZjcz10aW55c3JnYiZmaXQ9Y3JvcCZoPTY0Jnc9NjQmcz1hMDRlOTJmNzA0OGY3NjBhYTFmYTVjYzVmMmEwZTEwOFxcXCIsXFxcImxhcmdlXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Byb2ZpbGUtMTQ5MzMyMDM3NTExMy04ZDc3NmU2NDZmZDA/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1mYWNlcyZjcz10aW55c3JnYiZmaXQ9Y3JvcCZoPTEyOCZ3PTEyOCZzPTQwOWQyYjdjNGUxZTVmNDBkMmUzZmMzMWU5YzA0YWVmXFxcIn0sXFxcImxpbmtzXFxcIjp7XFxcInNlbGZcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvanBsZW5pb1xcXCIsXFxcImh0bWxcXFwiOlxcXCJodHRwczovL3Vuc3BsYXNoLmNvbS9AanBsZW5pb1xcXCIsXFxcInBob3Rvc1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9qcGxlbmlvL3Bob3Rvc1xcXCIsXFxcImxpa2VzXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL2pwbGVuaW8vbGlrZXNcXFwiLFxcXCJwb3J0Zm9saW9cXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvanBsZW5pby9wb3J0Zm9saW9cXFwiLFxcXCJmb2xsb3dpbmdcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvanBsZW5pby9mb2xsb3dpbmdcXFwiLFxcXCJmb2xsb3dlcnNcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvanBsZW5pby9mb2xsb3dlcnNcXFwifX0sXFxcImN1cnJlbnRfdXNlcl9jb2xsZWN0aW9uc1xcXCI6W10sXFxcInVybHNcXFwiOntcXFwicmF3XFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0OTY1MjYzMTEwMzMtOGE4MGFlMTRhMWY5XFxcIixcXFwiZnVsbFxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDk2NTI2MzExMDMzLThhODBhZTE0YTFmOT9peGxpYj1yYi0wLjMuNSZxPTg1JmZtPWpwZyZjcm9wPWVudHJvcHkmY3M9c3JnYiZzPTlkZmFkOTgzMjk0ODA0YzgwM2JhYTg0ZThiNTkzMDdmXFxcIixcXFwicmVndWxhclxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDk2NTI2MzExMDMzLThhODBhZTE0YTFmOT9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWVudHJvcHkmY3M9dGlueXNyZ2Imdz0xMDgwJmZpdD1tYXgmcz1hZmViNmY2MWI2N2JiNzM2ZmVlZTA5NzY1OGIzZmFiNFxcXCIsXFxcInNtYWxsXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0OTY1MjYzMTEwMzMtOGE4MGFlMTRhMWY5P2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZW50cm9weSZjcz10aW55c3JnYiZ3PTQwMCZmaXQ9bWF4JnM9NTQ3OGQ1NGMwNDhkMjljMGRhODg3NDZhYThmZDZmNmNcXFwiLFxcXCJ0aHVtYlxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDk2NTI2MzExMDMzLThhODBhZTE0YTFmOT9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWVudHJvcHkmY3M9dGlueXNyZ2Imdz0yMDAmZml0PW1heCZzPTk0NzIwMmM5OTg5MjY5ZjllYzNjOTY1MmM2NDg4YTY1XFxcIn0sXFxcImNhdGVnb3JpZXNcXFwiOltdLFxcXCJsaW5rc1xcXCI6e1xcXCJzZWxmXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3Bob3Rvcy9hNzJvOHc5SEMyd1xcXCIsXFxcImh0bWxcXFwiOlxcXCJodHRwczovL3Vuc3BsYXNoLmNvbS9waG90b3MvYTcybzh3OUhDMndcXFwiLFxcXCJkb3dubG9hZFxcXCI6XFxcImh0dHBzOi8vdW5zcGxhc2guY29tL3Bob3Rvcy9hNzJvOHc5SEMydy9kb3dubG9hZFxcXCIsXFxcImRvd25sb2FkX2xvY2F0aW9uXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3Bob3Rvcy9hNzJvOHc5SEMydy9kb3dubG9hZFxcXCJ9fSx7XFxcImlkXFxcIjpcXFwiZEdEbVJxelBJRDBcXFwiLFxcXCJjcmVhdGVkX2F0XFxcIjpcXFwiMjAxNy0wNS0yN1QyMjo1NzowOC0wNDowMFxcXCIsXFxcInVwZGF0ZWRfYXRcXFwiOlxcXCIyMDE3LTEwLTAzVDEyOjQyOjI0LTA0OjAwXFxcIixcXFwid2lkdGhcXFwiOjYwMDAsXFxcImhlaWdodFxcXCI6NDAwMCxcXFwiY29sb3JcXFwiOlxcXCIjRjBGMkY0XFxcIixcXFwibGlrZXNcXFwiOjQxLFxcXCJsaWtlZF9ieV91c2VyXFxcIjpmYWxzZSxcXFwiZGVzY3JpcHRpb25cXFwiOlxcXCJBIHNtYWxsIHJvY2t5IGNyZWVrIGluIGEgZm9yZXN0IG9uIGEgZm9nZ3kgZGF5XFxcIixcXFwidXNlclxcXCI6e1xcXCJpZFxcXCI6XFxcIm5iaHJFNERfYUlBXFxcIixcXFwidXBkYXRlZF9hdFxcXCI6XFxcIjIwMTctMTAtMDZUMjI6NDQ6MzEtMDQ6MDBcXFwiLFxcXCJ1c2VybmFtZVxcXCI6XFxcImlieWRlc2lnbnNcXFwiLFxcXCJuYW1lXFxcIjpcXFwiQWxleCBJYnlcXFwiLFxcXCJmaXJzdF9uYW1lXFxcIjpcXFwiQWxleFxcXCIsXFxcImxhc3RfbmFtZVxcXCI6XFxcIklieVxcXCIsXFxcInR3aXR0ZXJfdXNlcm5hbWVcXFwiOm51bGwsXFxcInBvcnRmb2xpb191cmxcXFwiOlxcXCJodHRwOi8vd3d3LmFsZXhpYnkuY29tXFxcIixcXFwiYmlvXFxcIjpcXFwiSSBhbSBhIHByb2Zlc3Npb25hbCBwaG90b2dyYXBoZXIuIEZpbmQgbWUgb24gSW5zdGFncmFtIEBhbGV4LmlieVxcXCIsXFxcImxvY2F0aW9uXFxcIjpcXFwiQm9zdG9uLCBNQVxcXCIsXFxcInRvdGFsX2xpa2VzXFxcIjo0NjEsXFxcInRvdGFsX3Bob3Rvc1xcXCI6MTUwLFxcXCJ0b3RhbF9jb2xsZWN0aW9uc1xcXCI6MCxcXFwicHJvZmlsZV9pbWFnZVxcXCI6e1xcXCJzbWFsbFxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9wcm9maWxlLTE1MDcyOTIyMjI5NDQtNWUxOWM1YWEwZDQ4P2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZmFjZXMmY3M9dGlueXNyZ2ImZml0PWNyb3AmaD0zMiZ3PTMyJnM9MzE2ODkzYTZhYzg3NjIyZDQxMDU3ODFkYTlmODNjZTNcXFwiLFxcXCJtZWRpdW1cXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcHJvZmlsZS0xNTA3MjkyMjIyOTQ0LTVlMTljNWFhMGQ0OD9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWZhY2VzJmNzPXRpbnlzcmdiJmZpdD1jcm9wJmg9NjQmdz02NCZzPTBmNjFlODE0MDFmZGIyZTA5ZDQ4OWJiNWQxN2Q5OGRjXFxcIixcXFwibGFyZ2VcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcHJvZmlsZS0xNTA3MjkyMjIyOTQ0LTVlMTljNWFhMGQ0OD9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWZhY2VzJmNzPXRpbnlzcmdiJmZpdD1jcm9wJmg9MTI4Jnc9MTI4JnM9ODYxNDFmZWU5OWNkMGQ0ZWMyNTE0NTY2OTJhNDhmYWZcXFwifSxcXFwibGlua3NcXFwiOntcXFwic2VsZlxcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9pYnlkZXNpZ25zXFxcIixcXFwiaHRtbFxcXCI6XFxcImh0dHBzOi8vdW5zcGxhc2guY29tL0BpYnlkZXNpZ25zXFxcIixcXFwicGhvdG9zXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL2lieWRlc2lnbnMvcGhvdG9zXFxcIixcXFwibGlrZXNcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvaWJ5ZGVzaWducy9saWtlc1xcXCIsXFxcInBvcnRmb2xpb1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9pYnlkZXNpZ25zL3BvcnRmb2xpb1xcXCIsXFxcImZvbGxvd2luZ1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9pYnlkZXNpZ25zL2ZvbGxvd2luZ1xcXCIsXFxcImZvbGxvd2Vyc1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9pYnlkZXNpZ25zL2ZvbGxvd2Vyc1xcXCJ9fSxcXFwiY3VycmVudF91c2VyX2NvbGxlY3Rpb25zXFxcIjpbXSxcXFwidXJsc1xcXCI6e1xcXCJyYXdcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQ5NTk0MDE3ODU2MS02MGVjYjI0NDdiMGVcXFwiLFxcXCJmdWxsXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0OTU5NDAxNzg1NjEtNjBlY2IyNDQ3YjBlP2l4bGliPXJiLTAuMy41JnE9ODUmZm09anBnJmNyb3A9ZW50cm9weSZjcz1zcmdiJnM9ZDFlZGE1MWZmM2JjMzM4MDcwZmJiNTE5ODc5OTViYWZcXFwiLFxcXCJyZWd1bGFyXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0OTU5NDAxNzg1NjEtNjBlY2IyNDQ3YjBlP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZW50cm9weSZjcz10aW55c3JnYiZ3PTEwODAmZml0PW1heCZzPWEyZmQ1MjY0M2QxMDMwNWYxOTFjMTI2MmJlNTAyOTM0XFxcIixcXFwic21hbGxcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQ5NTk0MDE3ODU2MS02MGVjYjI0NDdiMGU/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1lbnRyb3B5JmNzPXRpbnlzcmdiJnc9NDAwJmZpdD1tYXgmcz0wNjUwNDI0OTcyZDc5OWNlNzhmMzYwZTJlN2ZlMGRjMVxcXCIsXFxcInRodW1iXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0OTU5NDAxNzg1NjEtNjBlY2IyNDQ3YjBlP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZW50cm9weSZjcz10aW55c3JnYiZ3PTIwMCZmaXQ9bWF4JnM9MjFiMzE1NjdkN2NlMTc5MzkzMWQwZjMyMmFlMGE0YThcXFwifSxcXFwiY2F0ZWdvcmllc1xcXCI6W10sXFxcImxpbmtzXFxcIjp7XFxcInNlbGZcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vcGhvdG9zL2RHRG1ScXpQSUQwXFxcIixcXFwiaHRtbFxcXCI6XFxcImh0dHBzOi8vdW5zcGxhc2guY29tL3Bob3Rvcy9kR0RtUnF6UElEMFxcXCIsXFxcImRvd25sb2FkXFxcIjpcXFwiaHR0cHM6Ly91bnNwbGFzaC5jb20vcGhvdG9zL2RHRG1ScXpQSUQwL2Rvd25sb2FkXFxcIixcXFwiZG93bmxvYWRfbG9jYXRpb25cXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vcGhvdG9zL2RHRG1ScXpQSUQwL2Rvd25sb2FkXFxcIn19LHtcXFwiaWRcXFwiOlxcXCJQNHdVeU01REFzY1xcXCIsXFxcImNyZWF0ZWRfYXRcXFwiOlxcXCIyMDE1LTA2LTI0VDExOjE4OjAwLTA0OjAwXFxcIixcXFwidXBkYXRlZF9hdFxcXCI6XFxcIjIwMTctMTAtMDNUMTM6MjQ6MjQtMDQ6MDBcXFwiLFxcXCJ3aWR0aFxcXCI6NjAwMCxcXFwiaGVpZ2h0XFxcIjo0MDAwLFxcXCJjb2xvclxcXCI6XFxcIiMyNzMwMUNcXFwiLFxcXCJsaWtlc1xcXCI6NzIsXFxcImxpa2VkX2J5X3VzZXJcXFwiOmZhbHNlLFxcXCJkZXNjcmlwdGlvblxcXCI6XFxcIkxvb2tpbmcgdXAgaW4gdGhlIG1pZGRsZSBvZiBhIHBsdXNoLCBncmVlbiBmb3Jlc3RcXFwiLFxcXCJ1c2VyXFxcIjp7XFxcImlkXFxcIjpcXFwielk4YllPZ1czMDhcXFwiLFxcXCJ1cGRhdGVkX2F0XFxcIjpcXFwiMjAxNy0xMC0wN1QwMTozOTozMS0wNDowMFxcXCIsXFxcInVzZXJuYW1lXFxcIjpcXFwidXNpbmdsaWdodFxcXCIsXFxcIm5hbWVcXFwiOlxcXCJTdGVmYW4gU3RlaW5iYXVlclxcXCIsXFxcImZpcnN0X25hbWVcXFwiOlxcXCJTdGVmYW5cXFwiLFxcXCJsYXN0X25hbWVcXFwiOlxcXCJTdGVpbmJhdWVyXFxcIixcXFwidHdpdHRlcl91c2VybmFtZVxcXCI6XFxcInN0c3QzMTQxNVxcXCIsXFxcInBvcnRmb2xpb191cmxcXFwiOlxcXCJodHRwOi8vd3d3LnVzaW5nbGlnaHQuY29tXFxcIixcXFwiYmlvXFxcIjpcXFwibWFya2V0aW5nIHByb2Zlc3Npb25hbCwgbG92aW5nIHBob3RvZ3JhcGh5LCBhcmNoaXRlY3R1cmUsIG1hY3JvcyBhbmQgbGlnaHQgLSBnZW9tZXRyeSBhbmQgc29mdHdhcmUgdGVzdCBhcmUgbXkgc2VjcmV0IGxvdmUuXFxcIixcXFwibG9jYXRpb25cXFwiOlxcXCJWaWVubmEgKEF1c3RyaWEpXFxcIixcXFwidG90YWxfbGlrZXNcXFwiOjI1MSxcXFwidG90YWxfcGhvdG9zXFxcIjoxMjcsXFxcInRvdGFsX2NvbGxlY3Rpb25zXFxcIjoxMyxcXFwicHJvZmlsZV9pbWFnZVxcXCI6e1xcXCJzbWFsbFxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9wcm9maWxlLTE0NjAzNzU4MTQwODAtNzViMmMxNWQ3NzMzP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZmFjZXMmY3M9dGlueXNyZ2ImZml0PWNyb3AmaD0zMiZ3PTMyJnM9OGZjODcyODExNjkxODUyOTc1N2VhZDc4OTNjYTgxODBcXFwiLFxcXCJtZWRpdW1cXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcHJvZmlsZS0xNDYwMzc1ODE0MDgwLTc1YjJjMTVkNzczMz9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWZhY2VzJmNzPXRpbnlzcmdiJmZpdD1jcm9wJmg9NjQmdz02NCZzPTI3Njg2ZTRjNjViYjM1Yzg3YTg4MGI4NzcwYTRlZDBiXFxcIixcXFwibGFyZ2VcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcHJvZmlsZS0xNDYwMzc1ODE0MDgwLTc1YjJjMTVkNzczMz9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWZhY2VzJmNzPXRpbnlzcmdiJmZpdD1jcm9wJmg9MTI4Jnc9MTI4JnM9ZWMzNjY3NTZkYWEyZjdhOTM2MTIzODJmNjliNWM1NDRcXFwifSxcXFwibGlua3NcXFwiOntcXFwic2VsZlxcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy91c2luZ2xpZ2h0XFxcIixcXFwiaHRtbFxcXCI6XFxcImh0dHBzOi8vdW5zcGxhc2guY29tL0B1c2luZ2xpZ2h0XFxcIixcXFwicGhvdG9zXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL3VzaW5nbGlnaHQvcGhvdG9zXFxcIixcXFwibGlrZXNcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvdXNpbmdsaWdodC9saWtlc1xcXCIsXFxcInBvcnRmb2xpb1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy91c2luZ2xpZ2h0L3BvcnRmb2xpb1xcXCIsXFxcImZvbGxvd2luZ1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy91c2luZ2xpZ2h0L2ZvbGxvd2luZ1xcXCIsXFxcImZvbGxvd2Vyc1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy91c2luZ2xpZ2h0L2ZvbGxvd2Vyc1xcXCJ9fSxcXFwiY3VycmVudF91c2VyX2NvbGxlY3Rpb25zXFxcIjpbXSxcXFwidXJsc1xcXCI6e1xcXCJyYXdcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQzNTE1ODk4ODQ3OS1lMzk4NGMyZmQwMGNcXFwiLFxcXCJmdWxsXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0MzUxNTg5ODg0NzktZTM5ODRjMmZkMDBjP2l4bGliPXJiLTAuMy41JnE9ODUmZm09anBnJmNyb3A9ZW50cm9weSZjcz1zcmdiJnM9YjM5Nzc4ZWFmZTE1MjJhOTc4NjdlZDljMjEyNDU1ZjFcXFwiLFxcXCJyZWd1bGFyXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0MzUxNTg5ODg0NzktZTM5ODRjMmZkMDBjP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZW50cm9weSZjcz10aW55c3JnYiZ3PTEwODAmZml0PW1heCZzPThmOWQ5YTgyZjc4MzkzNThjOTEzY2U2MzViMjI1ZWExXFxcIixcXFwic21hbGxcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQzNTE1ODk4ODQ3OS1lMzk4NGMyZmQwMGM/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1lbnRyb3B5JmNzPXRpbnlzcmdiJnc9NDAwJmZpdD1tYXgmcz0zNDY4NjdlYTU3YzM3Y2M3ZTM2NDRiOTUwMzhjMGU2Y1xcXCIsXFxcInRodW1iXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0MzUxNTg5ODg0NzktZTM5ODRjMmZkMDBjP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZW50cm9weSZjcz10aW55c3JnYiZ3PTIwMCZmaXQ9bWF4JnM9MTYyZDRhMzdjNTM3MTBmYzc3M2RmZmM1YmYzZWI1NTRcXFwifSxcXFwiY2F0ZWdvcmllc1xcXCI6W10sXFxcImxpbmtzXFxcIjp7XFxcInNlbGZcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vcGhvdG9zL1A0d1V5TTVEQXNjXFxcIixcXFwiaHRtbFxcXCI6XFxcImh0dHBzOi8vdW5zcGxhc2guY29tL3Bob3Rvcy9QNHdVeU01REFzY1xcXCIsXFxcImRvd25sb2FkXFxcIjpcXFwiaHR0cHM6Ly91bnNwbGFzaC5jb20vcGhvdG9zL1A0d1V5TTVEQXNjL2Rvd25sb2FkXFxcIixcXFwiZG93bmxvYWRfbG9jYXRpb25cXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vcGhvdG9zL1A0d1V5TTVEQXNjL2Rvd25sb2FkXFxcIn19LHtcXFwiaWRcXFwiOlxcXCJVSzI5U1ZER2ZVY1xcXCIsXFxcImNyZWF0ZWRfYXRcXFwiOlxcXCIyMDE2LTA2LTAyVDAxOjUxOjI4LTA0OjAwXFxcIixcXFwidXBkYXRlZF9hdFxcXCI6XFxcIjIwMTctMTAtMDRUMTA6NTg6NTctMDQ6MDBcXFwiLFxcXCJ3aWR0aFxcXCI6MzAwMCxcXFwiaGVpZ2h0XFxcIjoyMDAwLFxcXCJjb2xvclxcXCI6XFxcIiNGREZERkVcXFwiLFxcXCJsaWtlc1xcXCI6ODQsXFxcImxpa2VkX2J5X3VzZXJcXFwiOmZhbHNlLFxcXCJkZXNjcmlwdGlvblxcXCI6bnVsbCxcXFwidXNlclxcXCI6e1xcXCJpZFxcXCI6XFxcIi1vWERnTVd4Yzk0XFxcIixcXFwidXBkYXRlZF9hdFxcXCI6XFxcIjIwMTctMTAtMDdUMDY6MDM6MTktMDQ6MDBcXFwiLFxcXCJ1c2VybmFtZVxcXCI6XFxcIm1hZGJ5dGVcXFwiLFxcXCJuYW1lXFxcIjpcXFwiVmxhZGltaXIgS3VkaW5vdlxcXCIsXFxcImZpcnN0X25hbWVcXFwiOlxcXCJWbGFkaW1pclxcXCIsXFxcImxhc3RfbmFtZVxcXCI6XFxcIkt1ZGlub3ZcXFwiLFxcXCJ0d2l0dGVyX3VzZXJuYW1lXFxcIjpcXFwic3RTaWxlbnRcXFwiLFxcXCJwb3J0Zm9saW9fdXJsXFxcIjpcXFwiaHR0cDovL3ZsYWRpbWlya3VkaW5vdi5jb21cXFwiLFxcXCJiaW9cXFwiOlxcXCJIYW5nIHRoZXNlIHBob3RvcyBvbiB0aGUgd2FsbC4gQnV5IHByaW50cyDigJQgaHR0cHM6Ly9zb2NpZXR5Ni5jb20vbWFkYnl0ZS9wcmludHNcXFwiLFxcXCJsb2NhdGlvblxcXCI6XFxcIkxvcyBBbmdlbGVzXFxcIixcXFwidG90YWxfbGlrZXNcXFwiOjE3LFxcXCJ0b3RhbF9waG90b3NcXFwiOjU3LFxcXCJ0b3RhbF9jb2xsZWN0aW9uc1xcXCI6MCxcXFwicHJvZmlsZV9pbWFnZVxcXCI6e1xcXCJzbWFsbFxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9wcm9maWxlLTE0OTYzNDA5Mjg0MjAtN2RkYjY5MWEyNGI5P2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZmFjZXMmY3M9dGlueXNyZ2ImZml0PWNyb3AmaD0zMiZ3PTMyJnM9MWIwOTU3ZDljMTQ3YTBlYzg0MGY3YmNjNGJjYzljZDRcXFwiLFxcXCJtZWRpdW1cXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcHJvZmlsZS0xNDk2MzQwOTI4NDIwLTdkZGI2OTFhMjRiOT9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWZhY2VzJmNzPXRpbnlzcmdiJmZpdD1jcm9wJmg9NjQmdz02NCZzPWJhY2UwNTAzOWFkMzEwYTAzNGFiYjU3Y2Y1MWUzMWNkXFxcIixcXFwibGFyZ2VcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcHJvZmlsZS0xNDk2MzQwOTI4NDIwLTdkZGI2OTFhMjRiOT9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWZhY2VzJmNzPXRpbnlzcmdiJmZpdD1jcm9wJmg9MTI4Jnc9MTI4JnM9YjJkNzlhNTJlNjY5YmEwODkwN2ViNDBjYTE1ZjE3MTVcXFwifSxcXFwibGlua3NcXFwiOntcXFwic2VsZlxcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9tYWRieXRlXFxcIixcXFwiaHRtbFxcXCI6XFxcImh0dHBzOi8vdW5zcGxhc2guY29tL0BtYWRieXRlXFxcIixcXFwicGhvdG9zXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL21hZGJ5dGUvcGhvdG9zXFxcIixcXFwibGlrZXNcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvbWFkYnl0ZS9saWtlc1xcXCIsXFxcInBvcnRmb2xpb1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9tYWRieXRlL3BvcnRmb2xpb1xcXCIsXFxcImZvbGxvd2luZ1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9tYWRieXRlL2ZvbGxvd2luZ1xcXCIsXFxcImZvbGxvd2Vyc1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9tYWRieXRlL2ZvbGxvd2Vyc1xcXCJ9fSxcXFwiY3VycmVudF91c2VyX2NvbGxlY3Rpb25zXFxcIjpbXSxcXFwidXJsc1xcXCI6e1xcXCJyYXdcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQ2NDg0NjUzOTMyNy1mMjNkMDAzOGMxOWVcXFwiLFxcXCJmdWxsXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0NjQ4NDY1MzkzMjctZjIzZDAwMzhjMTllP2l4bGliPXJiLTAuMy41JnE9ODUmZm09anBnJmNyb3A9ZW50cm9weSZjcz1zcmdiJnM9NTc5ODQ2YTZkM2VkYzlhMjQ0NWNkNGRjZmMzZWM5MTNcXFwiLFxcXCJyZWd1bGFyXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0NjQ4NDY1MzkzMjctZjIzZDAwMzhjMTllP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZW50cm9weSZjcz10aW55c3JnYiZ3PTEwODAmZml0PW1heCZzPWQzNDc5YTg0NjgxMjI4M2FkNWFmNjYyM2VjYTVlYzM0XFxcIixcXFwic21hbGxcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTQ2NDg0NjUzOTMyNy1mMjNkMDAzOGMxOWU/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1lbnRyb3B5JmNzPXRpbnlzcmdiJnc9NDAwJmZpdD1tYXgmcz0xMjZhOGNiMjA5MTYwNjcxZjhkZDQ3OGRmMTVmMzBjZFxcXCIsXFxcInRodW1iXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0NjQ4NDY1MzkzMjctZjIzZDAwMzhjMTllP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZW50cm9weSZjcz10aW55c3JnYiZ3PTIwMCZmaXQ9bWF4JnM9ZThkODFlNDBiOTZlMzY4NzJhYjRjZDg2MGQ2NGY1NTVcXFwifSxcXFwiY2F0ZWdvcmllc1xcXCI6W10sXFxcImxpbmtzXFxcIjp7XFxcInNlbGZcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vcGhvdG9zL1VLMjlTVkRHZlVjXFxcIixcXFwiaHRtbFxcXCI6XFxcImh0dHBzOi8vdW5zcGxhc2guY29tL3Bob3Rvcy9VSzI5U1ZER2ZVY1xcXCIsXFxcImRvd25sb2FkXFxcIjpcXFwiaHR0cHM6Ly91bnNwbGFzaC5jb20vcGhvdG9zL1VLMjlTVkRHZlVjL2Rvd25sb2FkXFxcIixcXFwiZG93bmxvYWRfbG9jYXRpb25cXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vcGhvdG9zL1VLMjlTVkRHZlVjL2Rvd25sb2FkXFxcIn19LHtcXFwiaWRcXFwiOlxcXCJwYXlPakV0NXFZWVxcXCIsXFxcImNyZWF0ZWRfYXRcXFwiOlxcXCIyMDE3LTA4LTA3VDE2OjE3OjAwLTA0OjAwXFxcIixcXFwidXBkYXRlZF9hdFxcXCI6XFxcIjIwMTctMTAtMDVUMTg6NDk6MTEtMDQ6MDBcXFwiLFxcXCJ3aWR0aFxcXCI6NTE4NCxcXFwiaGVpZ2h0XFxcIjozNDU2LFxcXCJjb2xvclxcXCI6XFxcIiNGRkZGRkZcXFwiLFxcXCJsaWtlc1xcXCI6MTI4LFxcXCJsaWtlZF9ieV91c2VyXFxcIjpmYWxzZSxcXFwiZGVzY3JpcHRpb25cXFwiOlxcXCJBIG51bWJlciBvZiBtaWdodHkgdHJlZXMgb24gYSBmb2dneSBkYXkgaW4gU3RhbmxleSBQYXJrXFxcIixcXFwidXNlclxcXCI6e1xcXCJpZFxcXCI6XFxcImFaTFZIdWNZZmlnXFxcIixcXFwidXBkYXRlZF9hdFxcXCI6XFxcIjIwMTctMTAtMDZUMjI6MTI6MDYtMDQ6MDBcXFwiLFxcXCJ1c2VybmFtZVxcXCI6XFxcImp1bGllbWFyc2hcXFwiLFxcXCJuYW1lXFxcIjpcXFwiSnVsaWUgTWFyc2hcXFwiLFxcXCJmaXJzdF9uYW1lXFxcIjpcXFwiSnVsaWVcXFwiLFxcXCJsYXN0X25hbWVcXFwiOlxcXCJNYXJzaFxcXCIsXFxcInR3aXR0ZXJfdXNlcm5hbWVcXFwiOm51bGwsXFxcInBvcnRmb2xpb191cmxcXFwiOm51bGwsXFxcImJpb1xcXCI6XFxcIkZvbGxvdyBtZSBhbmQgc2F5IGhlbGxvIG9uIEluc3RhIEBqdWxpZW1hcnNocGhvdG9ncmFwaHkgXFxcIixcXFwibG9jYXRpb25cXFwiOlxcXCJWYW5jb3V2ZXIsIEJyaXRpc2ggQ29sdW1iaWFcXFwiLFxcXCJ0b3RhbF9saWtlc1xcXCI6MzQsXFxcInRvdGFsX3Bob3Rvc1xcXCI6NDEsXFxcInRvdGFsX2NvbGxlY3Rpb25zXFxcIjowLFxcXCJwcm9maWxlX2ltYWdlXFxcIjp7XFxcInNtYWxsXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Byb2ZpbGUtMTUwMTc5NDA1MTMzNy0wYjQ5Zjg2ODAzY2Q/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1mYWNlcyZjcz10aW55c3JnYiZmaXQ9Y3JvcCZoPTMyJnc9MzImcz0zYzJmZTJiOGUxYWQ2N2U3OGExNmI5ZWVlN2U0MzMxNVxcXCIsXFxcIm1lZGl1bVxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9wcm9maWxlLTE1MDE3OTQwNTEzMzctMGI0OWY4NjgwM2NkP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZmFjZXMmY3M9dGlueXNyZ2ImZml0PWNyb3AmaD02NCZ3PTY0JnM9NDIzY2Q1NjJkYzUwZWE3ODA0MGFiOGI1ZTY0NzExZjNcXFwiLFxcXCJsYXJnZVxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9wcm9maWxlLTE1MDE3OTQwNTEzMzctMGI0OWY4NjgwM2NkP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZmFjZXMmY3M9dGlueXNyZ2ImZml0PWNyb3AmaD0xMjgmdz0xMjgmcz03OTYwN2U0MjFkYjY2ZDY5OWYwNTQ4ZjZlZTU1Y2IzY1xcXCJ9LFxcXCJsaW5rc1xcXCI6e1xcXCJzZWxmXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL2p1bGllbWFyc2hcXFwiLFxcXCJodG1sXFxcIjpcXFwiaHR0cHM6Ly91bnNwbGFzaC5jb20vQGp1bGllbWFyc2hcXFwiLFxcXCJwaG90b3NcXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvanVsaWVtYXJzaC9waG90b3NcXFwiLFxcXCJsaWtlc1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9qdWxpZW1hcnNoL2xpa2VzXFxcIixcXFwicG9ydGZvbGlvXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL2p1bGllbWFyc2gvcG9ydGZvbGlvXFxcIixcXFwiZm9sbG93aW5nXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL2p1bGllbWFyc2gvZm9sbG93aW5nXFxcIixcXFwiZm9sbG93ZXJzXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL2p1bGllbWFyc2gvZm9sbG93ZXJzXFxcIn19LFxcXCJjdXJyZW50X3VzZXJfY29sbGVjdGlvbnNcXFwiOltdLFxcXCJ1cmxzXFxcIjp7XFxcInJhd1xcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNTAyMTM2OTI4MTk2LTBlYmQ1MjRiZGY5N1xcXCIsXFxcImZ1bGxcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTUwMjEzNjkyODE5Ni0wZWJkNTI0YmRmOTc/aXhsaWI9cmItMC4zLjUmcT04NSZmbT1qcGcmY3JvcD1lbnRyb3B5JmNzPXNyZ2Imcz01YTFmMjk3OWNkM2VkYzA3ODIyNTFmMzI5YjQ0YWE5Y1xcXCIsXFxcInJlZ3VsYXJcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTUwMjEzNjkyODE5Ni0wZWJkNTI0YmRmOTc/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1lbnRyb3B5JmNzPXRpbnlzcmdiJnc9MTA4MCZmaXQ9bWF4JnM9NGE4MzA0Y2VjNDg2MDNkNmMwZDNmMzU5MmQzZTRjM2NcXFwiLFxcXCJzbWFsbFxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNTAyMTM2OTI4MTk2LTBlYmQ1MjRiZGY5Nz9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWVudHJvcHkmY3M9dGlueXNyZ2Imdz00MDAmZml0PW1heCZzPWIyZGJjMDBlOTEwYjQzMWM5Y2QzYjBkY2FiOWQ4NTM2XFxcIixcXFwidGh1bWJcXFwiOlxcXCJodHRwczovL2ltYWdlcy51bnNwbGFzaC5jb20vcGhvdG8tMTUwMjEzNjkyODE5Ni0wZWJkNTI0YmRmOTc/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1lbnRyb3B5JmNzPXRpbnlzcmdiJnc9MjAwJmZpdD1tYXgmcz00NDUzZWFjZTJhNDk5NzA0MTZiNDA4MmYxZTliYzBjNVxcXCJ9LFxcXCJjYXRlZ29yaWVzXFxcIjpbXSxcXFwibGlua3NcXFwiOntcXFwic2VsZlxcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS9waG90b3MvcGF5T2pFdDVxWVlcXFwiLFxcXCJodG1sXFxcIjpcXFwiaHR0cHM6Ly91bnNwbGFzaC5jb20vcGhvdG9zL3BheU9qRXQ1cVlZXFxcIixcXFwiZG93bmxvYWRcXFwiOlxcXCJodHRwczovL3Vuc3BsYXNoLmNvbS9waG90b3MvcGF5T2pFdDVxWVkvZG93bmxvYWRcXFwiLFxcXCJkb3dubG9hZF9sb2NhdGlvblxcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS9waG90b3MvcGF5T2pFdDVxWVkvZG93bmxvYWRcXFwifX0se1xcXCJpZFxcXCI6XFxcIlUyZm5XOURaMno0XFxcIixcXFwiY3JlYXRlZF9hdFxcXCI6XFxcIjIwMTUtMTAtMTZUMTk6Mzg6MjQtMDQ6MDBcXFwiLFxcXCJ1cGRhdGVkX2F0XFxcIjpcXFwiMjAxNy0wOS0yN1QxNzoyMToyMC0wNDowMFxcXCIsXFxcIndpZHRoXFxcIjo1MTg0LFxcXCJoZWlnaHRcXFwiOjM0NTYsXFxcImNvbG9yXFxcIjpcXFwiIzQxM0UzN1xcXCIsXFxcImxpa2VzXFxcIjo2OSxcXFwibGlrZWRfYnlfdXNlclxcXCI6ZmFsc2UsXFxcImRlc2NyaXB0aW9uXFxcIjpudWxsLFxcXCJ1c2VyXFxcIjp7XFxcImlkXFxcIjpcXFwiMGRGbVZwS19GOTRcXFwiLFxcXCJ1cGRhdGVkX2F0XFxcIjpcXFwiMjAxNy0xMC0wN1QwODoyMjoxOC0wNDowMFxcXCIsXFxcInVzZXJuYW1lXFxcIjpcXFwiZWxpamFoaGVuZGVyc29uXFxcIixcXFwibmFtZVxcXCI6XFxcIkVsaWphaCBIZW5kZXJzb25cXFwiLFxcXCJmaXJzdF9uYW1lXFxcIjpcXFwiRWxpamFoXFxcIixcXFwibGFzdF9uYW1lXFxcIjpcXFwiSGVuZGVyc29uXFxcIixcXFwidHdpdHRlcl91c2VybmFtZVxcXCI6XFxcInp3YXBwb1xcXCIsXFxcInBvcnRmb2xpb191cmxcXFwiOm51bGwsXFxcImJpb1xcXCI6XFxcIkkgbGlrZSB0byB0YWtlIHBpY3R1cmVzIG9mIG15IGZyaWVuZHMgYW5kIGV2ZXJ5ZGF5IGFkdmVudHVyZXNcXFwiLFxcXCJsb2NhdGlvblxcXCI6XFxcIk5hc2h2aWxsZVxcXCIsXFxcInRvdGFsX2xpa2VzXFxcIjoyMDIsXFxcInRvdGFsX3Bob3Rvc1xcXCI6OTgsXFxcInRvdGFsX2NvbGxlY3Rpb25zXFxcIjoyLFxcXCJwcm9maWxlX2ltYWdlXFxcIjp7XFxcInNtYWxsXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Byb2ZpbGUtMTUwNDMxNTg0MTk1MS1lNzJkODZjZDNjNmM/aXhsaWI9cmItMC4zLjUmcT04MCZmbT1qcGcmY3JvcD1mYWNlcyZjcz10aW55c3JnYiZmaXQ9Y3JvcCZoPTMyJnc9MzImcz0xMDk3OTBiZDE1ZWNkOWM0OWMyZGMwZGYxOWFhNzY4OFxcXCIsXFxcIm1lZGl1bVxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9wcm9maWxlLTE1MDQzMTU4NDE5NTEtZTcyZDg2Y2QzYzZjP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZmFjZXMmY3M9dGlueXNyZ2ImZml0PWNyb3AmaD02NCZ3PTY0JnM9MmY3M2MzYTc3NjgwYzIxMmI4N2E4ZTQyNWQ2NTg2MDNcXFwiLFxcXCJsYXJnZVxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9wcm9maWxlLTE1MDQzMTU4NDE5NTEtZTcyZDg2Y2QzYzZjP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZmFjZXMmY3M9dGlueXNyZ2ImZml0PWNyb3AmaD0xMjgmdz0xMjgmcz1jYTM3MmY5YWM4ZjhlZDUzMjllOTkyNWMwNTM3NjRmYlxcXCJ9LFxcXCJsaW5rc1xcXCI6e1xcXCJzZWxmXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL2VsaWphaGhlbmRlcnNvblxcXCIsXFxcImh0bWxcXFwiOlxcXCJodHRwczovL3Vuc3BsYXNoLmNvbS9AZWxpamFoaGVuZGVyc29uXFxcIixcXFwicGhvdG9zXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL2VsaWphaGhlbmRlcnNvbi9waG90b3NcXFwiLFxcXCJsaWtlc1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9lbGlqYWhoZW5kZXJzb24vbGlrZXNcXFwiLFxcXCJwb3J0Zm9saW9cXFwiOlxcXCJodHRwczovL2FwaS51bnNwbGFzaC5jb20vdXNlcnMvZWxpamFoaGVuZGVyc29uL3BvcnRmb2xpb1xcXCIsXFxcImZvbGxvd2luZ1xcXCI6XFxcImh0dHBzOi8vYXBpLnVuc3BsYXNoLmNvbS91c2Vycy9lbGlqYWhoZW5kZXJzb24vZm9sbG93aW5nXFxcIixcXFwiZm9sbG93ZXJzXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3VzZXJzL2VsaWphaGhlbmRlcnNvbi9mb2xsb3dlcnNcXFwifX0sXFxcImN1cnJlbnRfdXNlcl9jb2xsZWN0aW9uc1xcXCI6W10sXFxcInVybHNcXFwiOntcXFwicmF3XFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0NDUwMzg2NzgzNTQtNjg5MGFkMzNiYzcyXFxcIixcXFwiZnVsbFxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDQ1MDM4Njc4MzU0LTY4OTBhZDMzYmM3Mj9peGxpYj1yYi0wLjMuNSZxPTg1JmZtPWpwZyZjcm9wPWVudHJvcHkmY3M9c3JnYiZzPTIyMjM2Zjg3ZjQyMzIyZmQyZGY4ZjY1NzZiYzE2N2I3XFxcIixcXFwicmVndWxhclxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDQ1MDM4Njc4MzU0LTY4OTBhZDMzYmM3Mj9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWVudHJvcHkmY3M9dGlueXNyZ2Imdz0xMDgwJmZpdD1tYXgmcz03MGEyYjY0MmNhOTI1MWVmZTViMmI3MDYyMzJlNWJhOVxcXCIsXFxcInNtYWxsXFxcIjpcXFwiaHR0cHM6Ly9pbWFnZXMudW5zcGxhc2guY29tL3Bob3RvLTE0NDUwMzg2NzgzNTQtNjg5MGFkMzNiYzcyP2l4bGliPXJiLTAuMy41JnE9ODAmZm09anBnJmNyb3A9ZW50cm9weSZjcz10aW55c3JnYiZ3PTQwMCZmaXQ9bWF4JnM9OTE4ODljZGI0Y2RjYzgxOGY3YjExMmUwZjU1ZGU5OWVcXFwiLFxcXCJ0aHVtYlxcXCI6XFxcImh0dHBzOi8vaW1hZ2VzLnVuc3BsYXNoLmNvbS9waG90by0xNDQ1MDM4Njc4MzU0LTY4OTBhZDMzYmM3Mj9peGxpYj1yYi0wLjMuNSZxPTgwJmZtPWpwZyZjcm9wPWVudHJvcHkmY3M9dGlueXNyZ2Imdz0yMDAmZml0PW1heCZzPThkYWQxOWM5NjFmZjgxYTljODhmMjlmNjZlMjc1NTA0XFxcIn0sXFxcImNhdGVnb3JpZXNcXFwiOltdLFxcXCJsaW5rc1xcXCI6e1xcXCJzZWxmXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3Bob3Rvcy9VMmZuVzlEWjJ6NFxcXCIsXFxcImh0bWxcXFwiOlxcXCJodHRwczovL3Vuc3BsYXNoLmNvbS9waG90b3MvVTJmblc5RFoyejRcXFwiLFxcXCJkb3dubG9hZFxcXCI6XFxcImh0dHBzOi8vdW5zcGxhc2guY29tL3Bob3Rvcy9VMmZuVzlEWjJ6NC9kb3dubG9hZFxcXCIsXFxcImRvd25sb2FkX2xvY2F0aW9uXFxcIjpcXFwiaHR0cHM6Ly9hcGkudW5zcGxhc2guY29tL3Bob3Rvcy9VMmZuVzlEWjJ6NC9kb3dubG9hZFxcXCJ9fV07XFxyXFxuXFxyXFxuLy8gICAgICAgICAgICAgICAgY29uc3QgcmVxdWVzdCA9IG5ldyBSZXF1ZXN0KGBodHRwczovL2FwaS51bnNwbGFzaC5jb20vc2VhcmNoL3Bob3Rvcz9xdWVyeT0ke3RoaXMuc2VhcmNoVGV4dH0mcGVyX3BhZ2U9MTAwYCwge1xcclxcbi8vICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFxcXCJHRVRcXFwiLFxcclxcbi8vICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiBuZXcgSGVhZGVycyh7XFxyXFxuLy8gICAgICAgICAgICAgICAgICAgICAgICBcXFwiQXV0aG9yaXphdGlvblxcXCI6IGBDbGllbnQtSUQgNjRmOTc2MmMwNGY5NDcyMjYwNjcwNmZlNjBhYTg1MTlkNzZhYmMyY2JiYmRjODZmMzIxZmE4ZjI3ZDg3MDM4MWBcXHJcXG4vLyAgICAgICAgICAgICAgICAgICAgfSlcXHJcXG4vLyAgICAgICAgICAgICAgICB9KTtcXHJcXG4vL1xcclxcbi8vICAgICAgICAgICAgICAgIGZldGNoKHJlcXVlc3QpLnRoZW4ocmVzcG9uc2UgPT4ge1xcclxcbi8vICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHtcXHJcXG4vLyAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXFxcIkxvb2tzIGxpa2UgdGhlcmUgd2FzIGEgcHJvYmxlbS4gU3RhdHVzIENvZGU6IFxcXCIgKyByZXNwb25zZS5zdGF0dXMpO1xcclxcbi8vICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xcclxcbi8vICAgICAgICAgICAgICAgICAgICB9XFxyXFxuLy8gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLmpzb24oKS50aGVuKChkYXRhKSA9PiB7XFxyXFxuLy8gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBob3RvcyA9IGRhdGEucmVzdWx0cztcXHJcXG4vLyAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KHRoaXMucGhvdG9zKSk7XFxyXFxuLy8gICAgICAgICAgICAgICAgICAgIH0pO1xcclxcbi8vICAgICAgICAgICAgICAgIH0pXFxyXFxuICAgICAgICAgICAgfSxcXHJcXG4gICAgICAgICAgICByZW5kZXJQaG90bzogZnVuY3Rpb24gKHBob3RvKSB7XFxyXFxuICAgICAgICAgICAgICAgIGNvbnN0IHJhdGlvID0gTWF0aC5taW4oNDAwIC8gcGhvdG8ud2lkdGgsIDYwMCAvIHBob3RvLmhlaWdodCk7XFxyXFxuICAgICAgICAgICAgICAgIHJldHVybiAodGhpcy4kcmVmcy5pbWcyZW5hYmxlZC5jaGVja2VkID09PSB0cnVlKSA/IGA8aW1nLTIgc3JjLXByZXZpZXc9XFxcIiR7cGhvdG8udXJscy5yYXd9P2l4bGliPXJiLTAuMy41JnE9MSZmbT1qcGcmY3JvcD1lbnRyb3B5JmNzPXRpbnlzcmdiJnc9MTAmaGVpZ2h0PTEwJmZpdD1tYXhcXFwiIHNyYy1saWdodD1cXFwiJHtwaG90by51cmxzLnRodW1ifVxcXCIgc3JjPVxcXCIke3Bob3RvLnVybHMuc21hbGx9XFxcIiB3aWR0aD1cXFwiJHtwaG90by53aWR0aCAqIHJhdGlvfVxcXCIgaGVpZ2h0PVxcXCIke3Bob3RvLmhlaWdodCAqIHJhdGlvfVxcXCI+PC9pbWctMj5gIDogYDxpbWcgc3JjPVxcXCIke3Bob3RvLnVybHMucmVndWxhcn1cXFwiIHdpZHRoPVxcXCIke3Bob3RvLndpZHRoICogcmF0aW99XFxcIiBoZWlnaHQ9XFxcIiR7cGhvdG8uaGVpZ2h0ICogcmF0aW99XFxcIiAvPmA7XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxuPC9zY3JpcHQ+XFxyXFxuXFxyXFxuPHN0eWxlIHNjb3BlZD5cXHJcXG4gICAgLnNlYXJjaC1pbnB1dC1mcmFtZSB7XFxyXFxuICAgICAgICBtYXJnaW46IGF1dG87XFxyXFxuICAgICAgICB3aWR0aDogNjAwcHg7XFxyXFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgICAgICAgcGFkZGluZzogMnJlbSAwIDAgMDtcXHJcXG4gICAgfVxcclxcbiAgICAuc2V0dGluZ3Mge1xcclxcbiAgICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgICAgIHBhZGRpbmc6IDFyZW0gMDtcXHJcXG4gICAgfVxcclxcbiAgICAuc2VhcmNoLWlucHV0LWZyYW1lIC5idG4ge1xcclxcbiAgICAgICAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogMDtcXHJcXG4gICAgICAgIGJvcmRlci10b3AtbGVmdC1yYWRpdXM6IDA7XFxyXFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYTU1ZDM5O1xcclxcbiAgICAgICAgY29sb3I6ICNGRkY7XFxyXFxuICAgIH1cXHJcXG4gICAgI3NlYXJjaF9pbnB1dCB7XFxyXFxuICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcclxcbiAgICAgICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgICAgICBoZWlnaHQ6IDUwcHg7XFxyXFxuICAgICAgICBib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiA1cHg7XFxyXFxuICAgICAgICBib3JkZXItdG9wLWxlZnQtcmFkaXVzOiA1cHg7XFxyXFxuICAgICAgICBib3JkZXI6IG5vbmU7XFxyXFxuICAgICAgICBmb250LXNpemU6IDEuNXJlbTtcXHJcXG4gICAgICAgIHBhZGRpbmc6IDAgLjVyZW07XFxyXFxuICAgIH1cXHJcXG4gICAgI2NvbnRhaW5lciB7XFxyXFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcclxcbiAgICAgICAgZmxleC13cmFwOiB3cmFwO1xcclxcbiAgICAgICAgYWxpZ24tY29udGVudDogZmxleC1zdGFydDtcXHJcXG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xcclxcbiAgICAgICAgaGVpZ2h0OiAxMDB2aDtcXHJcXG4gICAgfVxcclxcbiAgICAjY29udGFpbmVyIC5pdGVtIHtcXHJcXG4gICAgICAgIGZsZXgtZ3JvdzogMDtcXHJcXG4gICAgICAgIGZsZXgtc2hyaW5rOiAwO1xcclxcbiAgICAgICAgbWFyZ2luOiAuNXJlbTtcXHJcXG4gICAgICAgIHBhZGRpbmc6IC41cmVtO1xcclxcbiAgICAgICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXHJcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjQxLCAyNDEsIDI0MSwgMC41KTtcXHJcXG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxyXFxuICAgIH1cXHJcXG4gICAgI2NvbnRhaW5lciAuaXRlbSBpbWcge1xcclxcbiAgICAgICAgLypoZWlnaHQ6IDEwMCU7Ki9cXHJcXG4gICAgICAgIC8qd2lkdGg6IDEwMCU7Ki9cXHJcXG4gICAgfVxcclxcblxcclxcbjwvc3R5bGU+XCJdLFwic291cmNlUm9vdFwiOlwid2VicGFjazovL1wifV0pO1xuXG4vLyBleHBvcnRzXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vY3NzLWxvYWRlcj9zb3VyY2VNYXAhLi9+L3Z1ZS1sb2FkZXIvbGliL3N0eWxlLXJld3JpdGVyLmpzP2lkPWRhdGEtdi1iYzQ5N2M4NCZzY29wZWQ9dHJ1ZSEuL34vdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3NyYy9wYWdlcy9TZWFyY2gudnVlXG4vLyBtb2R1bGUgaWQgPSA3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 8 */
/***/ (function(module, exports) {

	eval("/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\r\n// css base code, injected by the css-loader\r\nmodule.exports = function() {\r\n\tvar list = [];\r\n\r\n\t// return the list of modules as css string\r\n\tlist.toString = function toString() {\r\n\t\tvar result = [];\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar item = this[i];\r\n\t\t\tif(item[2]) {\r\n\t\t\t\tresult.push(\"@media \" + item[2] + \"{\" + item[1] + \"}\");\r\n\t\t\t} else {\r\n\t\t\t\tresult.push(item[1]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn result.join(\"\");\r\n\t};\r\n\r\n\t// import a list of modules into the list\r\n\tlist.i = function(modules, mediaQuery) {\r\n\t\tif(typeof modules === \"string\")\r\n\t\t\tmodules = [[null, modules, \"\"]];\r\n\t\tvar alreadyImportedModules = {};\r\n\t\tfor(var i = 0; i < this.length; i++) {\r\n\t\t\tvar id = this[i][0];\r\n\t\t\tif(typeof id === \"number\")\r\n\t\t\t\talreadyImportedModules[id] = true;\r\n\t\t}\r\n\t\tfor(i = 0; i < modules.length; i++) {\r\n\t\t\tvar item = modules[i];\r\n\t\t\t// skip already imported module\r\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\r\n\t\t\t//  when a module is imported multiple times with different media queries.\r\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\r\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\r\n\t\t\t\tif(mediaQuery && !item[2]) {\r\n\t\t\t\t\titem[2] = mediaQuery;\r\n\t\t\t\t} else if(mediaQuery) {\r\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\r\n\t\t\t\t}\r\n\t\t\t\tlist.push(item);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\treturn list;\r\n};\r\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzP2RhMDQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGlCQUFpQjtBQUNqQztBQUNBO0FBQ0Esd0NBQXdDLGdCQUFnQjtBQUN4RCxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGlCQUFpQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0JBQW9CO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxyXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcclxuKi9cclxuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcclxuXHR2YXIgbGlzdCA9IFtdO1xyXG5cclxuXHQvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXHJcblx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xyXG5cdFx0dmFyIHJlc3VsdCA9IFtdO1xyXG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0dmFyIGl0ZW0gPSB0aGlzW2ldO1xyXG5cdFx0XHRpZihpdGVtWzJdKSB7XHJcblx0XHRcdFx0cmVzdWx0LnB1c2goXCJAbWVkaWEgXCIgKyBpdGVtWzJdICsgXCJ7XCIgKyBpdGVtWzFdICsgXCJ9XCIpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHJlc3VsdC5wdXNoKGl0ZW1bMV0pO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gcmVzdWx0LmpvaW4oXCJcIik7XHJcblx0fTtcclxuXHJcblx0Ly8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcclxuXHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XHJcblx0XHRpZih0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIilcclxuXHRcdFx0bW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xyXG5cdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBpZCA9IHRoaXNbaV1bMF07XHJcblx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcclxuXHRcdFx0XHRhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XHJcblx0XHR9XHJcblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBpdGVtID0gbW9kdWxlc1tpXTtcclxuXHRcdFx0Ly8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxyXG5cdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xyXG5cdFx0XHQvLyAgd2hlbiBhIG1vZHVsZSBpcyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIGRpZmZlcmVudCBtZWRpYSBxdWVyaWVzLlxyXG5cdFx0XHQvLyAgSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxyXG5cdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xyXG5cdFx0XHRcdGlmKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0pIHtcclxuXHRcdFx0XHRcdGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xyXG5cdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XHJcblx0XHRcdFx0XHRpdGVtWzJdID0gXCIoXCIgKyBpdGVtWzJdICsgXCIpIGFuZCAoXCIgKyBtZWRpYVF1ZXJ5ICsgXCIpXCI7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH07XHJcblx0cmV0dXJuIGxpc3Q7XHJcbn07XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1xuLy8gbW9kdWxlIGlkID0gOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	eval("/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\nvar stylesInDom = {},\n\tmemoize = function(fn) {\n\t\tvar memo;\n\t\treturn function () {\n\t\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\n\t\t\treturn memo;\n\t\t};\n\t},\n\tisOldIE = memoize(function() {\n\t\treturn /msie [6-9]\\b/.test(window.navigator.userAgent.toLowerCase());\n\t}),\n\tgetHeadElement = memoize(function () {\n\t\treturn document.head || document.getElementsByTagName(\"head\")[0];\n\t}),\n\tsingletonElement = null,\n\tsingletonCounter = 0,\n\tstyleElementsInsertedAtTop = [];\n\nmodule.exports = function(list, options) {\n\tif(false) {\n\t\tif(typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\n\t}\n\n\toptions = options || {};\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n\t// tags it will allow on a page\n\tif (typeof options.singleton === \"undefined\") options.singleton = isOldIE();\n\n\t// By default, add <style> tags to the bottom of <head>.\n\tif (typeof options.insertAt === \"undefined\") options.insertAt = \"bottom\";\n\n\tvar styles = listToStyles(list);\n\taddStylesToDom(styles, options);\n\n\treturn function update(newList) {\n\t\tvar mayRemove = [];\n\t\tfor(var i = 0; i < styles.length; i++) {\n\t\t\tvar item = styles[i];\n\t\t\tvar domStyle = stylesInDom[item.id];\n\t\t\tdomStyle.refs--;\n\t\t\tmayRemove.push(domStyle);\n\t\t}\n\t\tif(newList) {\n\t\t\tvar newStyles = listToStyles(newList);\n\t\t\taddStylesToDom(newStyles, options);\n\t\t}\n\t\tfor(var i = 0; i < mayRemove.length; i++) {\n\t\t\tvar domStyle = mayRemove[i];\n\t\t\tif(domStyle.refs === 0) {\n\t\t\t\tfor(var j = 0; j < domStyle.parts.length; j++)\n\t\t\t\t\tdomStyle.parts[j]();\n\t\t\t\tdelete stylesInDom[domStyle.id];\n\t\t\t}\n\t\t}\n\t};\n}\n\nfunction addStylesToDom(styles, options) {\n\tfor(var i = 0; i < styles.length; i++) {\n\t\tvar item = styles[i];\n\t\tvar domStyle = stylesInDom[item.id];\n\t\tif(domStyle) {\n\t\t\tdomStyle.refs++;\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\n\t\t\t}\n\t\t\tfor(; j < item.parts.length; j++) {\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\t\t} else {\n\t\t\tvar parts = [];\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\n\t\t}\n\t}\n}\n\nfunction listToStyles(list) {\n\tvar styles = [];\n\tvar newStyles = {};\n\tfor(var i = 0; i < list.length; i++) {\n\t\tvar item = list[i];\n\t\tvar id = item[0];\n\t\tvar css = item[1];\n\t\tvar media = item[2];\n\t\tvar sourceMap = item[3];\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\n\t\tif(!newStyles[id])\n\t\t\tstyles.push(newStyles[id] = {id: id, parts: [part]});\n\t\telse\n\t\t\tnewStyles[id].parts.push(part);\n\t}\n\treturn styles;\n}\n\nfunction insertStyleElement(options, styleElement) {\n\tvar head = getHeadElement();\n\tvar lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];\n\tif (options.insertAt === \"top\") {\n\t\tif(!lastStyleElementInsertedAtTop) {\n\t\t\thead.insertBefore(styleElement, head.firstChild);\n\t\t} else if(lastStyleElementInsertedAtTop.nextSibling) {\n\t\t\thead.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);\n\t\t} else {\n\t\t\thead.appendChild(styleElement);\n\t\t}\n\t\tstyleElementsInsertedAtTop.push(styleElement);\n\t} else if (options.insertAt === \"bottom\") {\n\t\thead.appendChild(styleElement);\n\t} else {\n\t\tthrow new Error(\"Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.\");\n\t}\n}\n\nfunction removeStyleElement(styleElement) {\n\tstyleElement.parentNode.removeChild(styleElement);\n\tvar idx = styleElementsInsertedAtTop.indexOf(styleElement);\n\tif(idx >= 0) {\n\t\tstyleElementsInsertedAtTop.splice(idx, 1);\n\t}\n}\n\nfunction createStyleElement(options) {\n\tvar styleElement = document.createElement(\"style\");\n\tstyleElement.type = \"text/css\";\n\tinsertStyleElement(options, styleElement);\n\treturn styleElement;\n}\n\nfunction addStyle(obj, options) {\n\tvar styleElement, update, remove;\n\n\tif (options.singleton) {\n\t\tvar styleIndex = singletonCounter++;\n\t\tstyleElement = singletonElement || (singletonElement = createStyleElement(options));\n\t\tupdate = applyToSingletonTag.bind(null, styleElement, styleIndex, false);\n\t\tremove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);\n\t} else {\n\t\tstyleElement = createStyleElement(options);\n\t\tupdate = applyToTag.bind(null, styleElement);\n\t\tremove = function() {\n\t\t\tremoveStyleElement(styleElement);\n\t\t};\n\t}\n\n\tupdate(obj);\n\n\treturn function updateStyle(newObj) {\n\t\tif(newObj) {\n\t\t\tif(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)\n\t\t\t\treturn;\n\t\t\tupdate(obj = newObj);\n\t\t} else {\n\t\t\tremove();\n\t\t}\n\t};\n}\n\nvar replaceText = (function () {\n\tvar textStore = [];\n\n\treturn function (index, replacement) {\n\t\ttextStore[index] = replacement;\n\t\treturn textStore.filter(Boolean).join('\\n');\n\t};\n})();\n\nfunction applyToSingletonTag(styleElement, index, remove, obj) {\n\tvar css = remove ? \"\" : obj.css;\n\n\tif (styleElement.styleSheet) {\n\t\tstyleElement.styleSheet.cssText = replaceText(index, css);\n\t} else {\n\t\tvar cssNode = document.createTextNode(css);\n\t\tvar childNodes = styleElement.childNodes;\n\t\tif (childNodes[index]) styleElement.removeChild(childNodes[index]);\n\t\tif (childNodes.length) {\n\t\t\tstyleElement.insertBefore(cssNode, childNodes[index]);\n\t\t} else {\n\t\t\tstyleElement.appendChild(cssNode);\n\t\t}\n\t}\n}\n\nfunction applyToTag(styleElement, obj) {\n\tvar css = obj.css;\n\tvar media = obj.media;\n\tvar sourceMap = obj.sourceMap;\n\n\tif (media) {\n\t\tstyleElement.setAttribute(\"media\", media);\n\t}\n\n\tif (sourceMap) {\n\t\t// https://developer.chrome.com/devtools/docs/javascript-debugging\n\t\t// this makes source maps inside style tags work properly in Chrome\n\t\tcss += '\\n/*# sourceURL=' + sourceMap.sources[0] + ' */';\n\t\t// http://stackoverflow.com/a/26603875\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\n\t}\n\n\tif (styleElement.styleSheet) {\n\t\tstyleElement.styleSheet.cssText = css;\n\t} else {\n\t\twhile(styleElement.firstChild) {\n\t\t\tstyleElement.removeChild(styleElement.firstChild);\n\t\t}\n\t\tstyleElement.appendChild(document.createTextNode(css));\n\t}\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	eval("\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _Main = __webpack_require__(11);\n\nvar _Main2 = _interopRequireDefault(_Main);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = {\n    components: {\n        MainLayout: _Main2.default\n    },\n    data: function data() {\n        return {\n            img2enabled: true,\n            searchText: \"forest\",\n            photos: []\n        };\n    },\n    methods: {\n        submitSearch: function submitSearch() {\n\n            this.photos = [{ \"id\": \"4dRyVyXN6Lg123\", \"created_at\": \"2016-02-16T16:05:00-05:00\", \"updated_at\": \"2017-10-07T03:01:12-04:00\", \"width\": 6016, \"height\": 4016, \"color\": \"#D3E5E9\", \"likes\": 352, \"liked_by_user\": false, \"description\": \"Mist in an evergreen forest in Šumava National Park\", \"user\": { \"id\": \"OdzrCRYp48E\", \"updated_at\": \"2017-09-24T17:24:37-04:00\", \"username\": \"lukasneasi\", \"name\": \"Lukas Neasi\", \"first_name\": \"Lukas\", \"last_name\": \"Neasi\", \"twitter_username\": null, \"portfolio_url\": \"http://lukasneasi.com\", \"bio\": \"\", \"location\": \"Prague\", \"total_likes\": 14, \"total_photos\": 10, \"total_collections\": 1, \"profile_image\": { \"small\": \"https://images.unsplash.com/placeholder-avatars/extra-large.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=0ad68f44c4725d5a3fda019bab9d3edc\", \"medium\": \"https://images.unsplash.com/placeholder-avatars/extra-large.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=356bd4b76a3d4eb97d63f45b818dd358\", \"large\": \"https://images.unsplash.com/placeholder-avatars/extra-large.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=ee8bbf5fb8d6e43aaaa238feae2fe90d\" }, \"links\": { \"self\": \"https://api.unsplash.com/users/lukasneasi\", \"html\": \"https://unsplash.com/@lukasneasi\", \"photos\": \"https://api.unsplash.com/users/lukasneasi/photos\", \"likes\": \"https://api.unsplash.com/users/lukasneasi/likes\", \"portfolio\": \"https://api.unsplash.com/users/lukasneasi/portfolio\", \"following\": \"https://api.unsplash.com/users/lukasneasi/following\", \"followers\": \"https://api.unsplash.com/users/lukasneasi/followers\" } }, \"current_user_collections\": [], \"urls\": { \"raw\": \"https://images.unsplash.com/photo-1455656678494-4d1b5f3e7ad4\", \"full\": \"https://images.unsplash.com/photo-1455656678494-4d1b5f3e7ad4?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=cafefc6876afa4fbbd51a4ad6f89a52c\", \"regular\": \"https://images.unsplash.com/photo-1455656678494-4d1b5f3e7ad4?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=97265bd5a97f601d1ef04fd474dae3cf\", \"small\": \"https://images.unsplash.com/photo-1455656678494-4d1b5f3e7ad4?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=01aae142a733540b0ed6302397960a6c\", \"thumb\": \"https://images.unsplash.com/photo-1455656678494-4d1b5f3e7ad4?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=36f502d952f795ebaf93362d67484878\" }, \"categories\": [], \"links\": { \"self\": \"https://api.unsplash.com/photos/4dRyVyXN6Lg\", \"html\": \"https://unsplash.com/photos/4dRyVyXN6Lg\", \"download\": \"https://unsplash.com/photos/4dRyVyXN6Lg/download\", \"download_location\": \"https://api.unsplash.com/photos/4dRyVyXN6Lg/download\" } }, { \"id\": \"4dRyVyXN6Lg\", \"created_at\": \"2016-02-16T16:05:00-05:00\", \"updated_at\": \"2017-10-07T03:01:12-04:00\", \"width\": 6016, \"height\": 4016, \"color\": \"#D3E5E9\", \"likes\": 352, \"liked_by_user\": false, \"description\": \"Mist in an evergreen forest in Šumava National Park\", \"user\": { \"id\": \"OdzrCRYp48E\", \"updated_at\": \"2017-09-24T17:24:37-04:00\", \"username\": \"lukasneasi\", \"name\": \"Lukas Neasi\", \"first_name\": \"Lukas\", \"last_name\": \"Neasi\", \"twitter_username\": null, \"portfolio_url\": \"http://lukasneasi.com\", \"bio\": \"\", \"location\": \"Prague\", \"total_likes\": 14, \"total_photos\": 10, \"total_collections\": 1, \"profile_image\": { \"small\": \"https://images.unsplash.com/placeholder-avatars/extra-large.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=0ad68f44c4725d5a3fda019bab9d3edc\", \"medium\": \"https://images.unsplash.com/placeholder-avatars/extra-large.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=356bd4b76a3d4eb97d63f45b818dd358\", \"large\": \"https://images.unsplash.com/placeholder-avatars/extra-large.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=ee8bbf5fb8d6e43aaaa238feae2fe90d\" }, \"links\": { \"self\": \"https://api.unsplash.com/users/lukasneasi\", \"html\": \"https://unsplash.com/@lukasneasi\", \"photos\": \"https://api.unsplash.com/users/lukasneasi/photos\", \"likes\": \"https://api.unsplash.com/users/lukasneasi/likes\", \"portfolio\": \"https://api.unsplash.com/users/lukasneasi/portfolio\", \"following\": \"https://api.unsplash.com/users/lukasneasi/following\", \"followers\": \"https://api.unsplash.com/users/lukasneasi/followers\" } }, \"current_user_collections\": [], \"urls\": { \"raw\": \"https://images.unsplash.com/photo-1455656678494-4d1b5f3e7ad4\", \"full\": \"https://images.unsplash.com/photo-1455656678494-4d1b5f3e7ad4?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=cafefc6876afa4fbbd51a4ad6f89a52c\", \"regular\": \"https://images.unsplash.com/photo-1455656678494-4d1b5f3e7ad4?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=97265bd5a97f601d1ef04fd474dae3cf\", \"small\": \"https://images.unsplash.com/photo-1455656678494-4d1b5f3e7ad4?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=01aae142a733540b0ed6302397960a6c\", \"thumb\": \"https://images.unsplash.com/photo-1455656678494-4d1b5f3e7ad4?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=36f502d952f795ebaf93362d67484878\" }, \"categories\": [], \"links\": { \"self\": \"https://api.unsplash.com/photos/4dRyVyXN6Lg\", \"html\": \"https://unsplash.com/photos/4dRyVyXN6Lg\", \"download\": \"https://unsplash.com/photos/4dRyVyXN6Lg/download\", \"download_location\": \"https://api.unsplash.com/photos/4dRyVyXN6Lg/download\" } }, { \"id\": \"TFyi0QOx08c\", \"created_at\": \"2014-12-08T14:04:48-05:00\", \"updated_at\": \"2017-10-06T16:31:15-04:00\", \"width\": 2200, \"height\": 1467, \"color\": \"#929794\", \"likes\": 1268, \"liked_by_user\": false, \"description\": \"A pine forest shrouded in a dense fog descending from above\", \"user\": { \"id\": \"-rcrJA1bVtQ\", \"updated_at\": \"2017-10-05T14:34:38-04:00\", \"username\": \"jaymantri\", \"name\": \"Jay Mantri\", \"first_name\": \"Jay\", \"last_name\": \"Mantri\", \"twitter_username\": \"jaymantri\", \"portfolio_url\": \"http://jaymantri.com/\", \"bio\": \"Designer by day, burger monster by night.\", \"location\": \"Los Angeles, California\", \"total_likes\": 0, \"total_photos\": 5, \"total_collections\": 0, \"profile_image\": { \"small\": \"https://images.unsplash.com/profile-1503027684826-c9c642529b92?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=79a040d28c55609e74afab8c51b2856b\", \"medium\": \"https://images.unsplash.com/profile-1503027684826-c9c642529b92?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=29f24b986f22a6e49fb8a776717bc79e\", \"large\": \"https://images.unsplash.com/profile-1503027684826-c9c642529b92?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=d5c52153d40ec3d66a93cd3d913dd612\" }, \"links\": { \"self\": \"https://api.unsplash.com/users/jaymantri\", \"html\": \"https://unsplash.com/@jaymantri\", \"photos\": \"https://api.unsplash.com/users/jaymantri/photos\", \"likes\": \"https://api.unsplash.com/users/jaymantri/likes\", \"portfolio\": \"https://api.unsplash.com/users/jaymantri/portfolio\", \"following\": \"https://api.unsplash.com/users/jaymantri/following\", \"followers\": \"https://api.unsplash.com/users/jaymantri/followers\" } }, \"current_user_collections\": [], \"urls\": { \"raw\": \"https://images.unsplash.com/photo-1418065460487-3e41a6c84dc5\", \"full\": \"https://images.unsplash.com/photo-1418065460487-3e41a6c84dc5?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=10a68627b31e390a0b30cca13c891ad3\", \"regular\": \"https://images.unsplash.com/photo-1418065460487-3e41a6c84dc5?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=6dff6e3c57f5cda4e14cd1d2988c5083\", \"small\": \"https://images.unsplash.com/photo-1418065460487-3e41a6c84dc5?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=da76a54b6b17756c64dfcba6de5d7cd2\", \"thumb\": \"https://images.unsplash.com/photo-1418065460487-3e41a6c84dc5?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=b273ac7816a7a92fcfdf8b51e6476ee2\" }, \"categories\": [], \"links\": { \"self\": \"https://api.unsplash.com/photos/TFyi0QOx08c\", \"html\": \"https://unsplash.com/photos/TFyi0QOx08c\", \"download\": \"https://unsplash.com/photos/TFyi0QOx08c/download\", \"download_location\": \"https://api.unsplash.com/photos/TFyi0QOx08c/download\" } }, { \"id\": \"sp-p7uuT0tw\", \"created_at\": \"2015-11-24T09:30:49-05:00\", \"updated_at\": \"2017-10-05T21:25:42-04:00\", \"width\": 6000, \"height\": 4000, \"color\": \"#4A464B\", \"likes\": 489, \"liked_by_user\": false, \"description\": null, \"user\": { \"id\": \"9LR8U8xfNug\", \"updated_at\": \"2017-10-02T14:13:23-04:00\", \"username\": \"sebastian_unrau\", \"name\": \"Sebastian Unrau\", \"first_name\": \"Sebastian\", \"last_name\": \"Unrau\", \"twitter_username\": \"BastiUnrau\", \"portfolio_url\": \"https://www.instagram.com/sebastian_unrau\", \"bio\": \"\", \"location\": \"Bad Pyrmont, Germany\", \"total_likes\": 34, \"total_photos\": 13, \"total_collections\": 1, \"profile_image\": { \"small\": \"https://images.unsplash.com/profile-1461334411402-27384bf39c3a?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=c948e02c54e790bcd36e9be01253506d\", \"medium\": \"https://images.unsplash.com/profile-1461334411402-27384bf39c3a?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=34a70e2d4db221e9830eff1feaff4834\", \"large\": \"https://images.unsplash.com/profile-1461334411402-27384bf39c3a?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=0b2292454d71868bd8c8bcc7b7374d59\" }, \"links\": { \"self\": \"https://api.unsplash.com/users/sebastian_unrau\", \"html\": \"https://unsplash.com/@sebastian_unrau\", \"photos\": \"https://api.unsplash.com/users/sebastian_unrau/photos\", \"likes\": \"https://api.unsplash.com/users/sebastian_unrau/likes\", \"portfolio\": \"https://api.unsplash.com/users/sebastian_unrau/portfolio\", \"following\": \"https://api.unsplash.com/users/sebastian_unrau/following\", \"followers\": \"https://api.unsplash.com/users/sebastian_unrau/followers\" } }, \"current_user_collections\": [], \"urls\": { \"raw\": \"https://images.unsplash.com/photo-1448375240586-882707db888b\", \"full\": \"https://images.unsplash.com/photo-1448375240586-882707db888b?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=14d4705d865e5fb239e6eef3b625828e\", \"regular\": \"https://images.unsplash.com/photo-1448375240586-882707db888b?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=67ccb50e35865caef60ea779e38359cf\", \"small\": \"https://images.unsplash.com/photo-1448375240586-882707db888b?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=47d6884d58a136b96a1e42fc793112bd\", \"thumb\": \"https://images.unsplash.com/photo-1448375240586-882707db888b?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=c42ea4a036f9abf14ffaa3ecd286c1dd\" }, \"categories\": [], \"links\": { \"self\": \"https://api.unsplash.com/photos/sp-p7uuT0tw\", \"html\": \"https://unsplash.com/photos/sp-p7uuT0tw\", \"download\": \"https://unsplash.com/photos/sp-p7uuT0tw/download\", \"download_location\": \"https://api.unsplash.com/photos/sp-p7uuT0tw/download\" } }, { \"id\": \"3ytjETpQMNY\", \"created_at\": \"2015-08-27T12:15:20-04:00\", \"updated_at\": \"2017-10-07T04:17:05-04:00\", \"width\": 6016, \"height\": 4016, \"color\": \"#535452\", \"likes\": 1857, \"liked_by_user\": false, \"description\": \"A dim shot of fog over a forest in Decollatura\", \"user\": { \"id\": \"mPbowYWnZ1c\", \"updated_at\": \"2017-09-22T19:25:04-04:00\", \"username\": \"carminu\", \"name\": \"Carmine De Fazio\", \"first_name\": \"Carmine\", \"last_name\": \"De Fazio\", \"twitter_username\": \"Carmins\", \"portfolio_url\": \"https://instagram.com/carminu/\", \"bio\": \"\", \"location\": null, \"total_likes\": 78, \"total_photos\": 4, \"total_collections\": 0, \"profile_image\": { \"small\": \"https://images.unsplash.com/profile-1443895110997-346376a065f1?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=97c440951a5bfe1b0eb137894527f07c\", \"medium\": \"https://images.unsplash.com/profile-1443895110997-346376a065f1?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=7e1ea34b0d62ac02bb71571955c646e9\", \"large\": \"https://images.unsplash.com/profile-1443895110997-346376a065f1?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=f68308380f60f936b14770a2ddc092c4\" }, \"links\": { \"self\": \"https://api.unsplash.com/users/carminu\", \"html\": \"https://unsplash.com/@carminu\", \"photos\": \"https://api.unsplash.com/users/carminu/photos\", \"likes\": \"https://api.unsplash.com/users/carminu/likes\", \"portfolio\": \"https://api.unsplash.com/users/carminu/portfolio\", \"following\": \"https://api.unsplash.com/users/carminu/following\", \"followers\": \"https://api.unsplash.com/users/carminu/followers\" } }, \"current_user_collections\": [], \"urls\": { \"raw\": \"https://images.unsplash.com/photo-1440688807730-73e4e2169fb8\", \"full\": \"https://images.unsplash.com/photo-1440688807730-73e4e2169fb8?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=02acce01a61211632055bc5fce8d012f\", \"regular\": \"https://images.unsplash.com/photo-1440688807730-73e4e2169fb8?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=977cf757fa1f24f2d1e864a4aa58aae8\", \"small\": \"https://images.unsplash.com/photo-1440688807730-73e4e2169fb8?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=d2a7b137e7d0fa1cd584d7d796e00697\", \"thumb\": \"https://images.unsplash.com/photo-1440688807730-73e4e2169fb8?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=80268e61d1db62a7e38d7be9a30591be\" }, \"categories\": [], \"links\": { \"self\": \"https://api.unsplash.com/photos/3ytjETpQMNY\", \"html\": \"https://unsplash.com/photos/3ytjETpQMNY\", \"download\": \"https://unsplash.com/photos/3ytjETpQMNY/download\", \"download_location\": \"https://api.unsplash.com/photos/3ytjETpQMNY/download\" } }, { \"id\": \"x48QL8gNYZ8\", \"created_at\": \"2015-10-29T03:48:26-04:00\", \"updated_at\": \"2017-10-02T11:02:08-04:00\", \"width\": 4928, \"height\": 3264, \"color\": \"#474842\", \"likes\": 372, \"liked_by_user\": false, \"description\": \"A light fog on the trail through the forest in Muszyna Zdrój\", \"user\": { \"id\": \"S4T8zxLq1vI\", \"updated_at\": \"2017-10-01T16:31:23-04:00\", \"username\": \"alienowicz\", \"name\": \"Artur Rutkowski\", \"first_name\": \"Artur\", \"last_name\": \"Rutkowski\", \"twitter_username\": null, \"portfolio_url\": \"http://www.arturrro.pl/\", \"bio\": \"Hi, \\r\\nI'm Graphic Designer and Amateur Photographer forom Warsaw, Poland.\\r\\n\", \"location\": \"Warsaw, Poland\", \"total_likes\": 47, \"total_photos\": 8, \"total_collections\": 0, \"profile_image\": { \"small\": \"https://images.unsplash.com/profile-1501416126626-f70dd4367617?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=ad8138a13a2489a034058ed78c0588cd\", \"medium\": \"https://images.unsplash.com/profile-1501416126626-f70dd4367617?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=a5471a904f1cc3f05f9a8afc3a9973f6\", \"large\": \"https://images.unsplash.com/profile-1501416126626-f70dd4367617?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=d0abcd179e658f33dc4d3f0e76c62bac\" }, \"links\": { \"self\": \"https://api.unsplash.com/users/alienowicz\", \"html\": \"https://unsplash.com/@alienowicz\", \"photos\": \"https://api.unsplash.com/users/alienowicz/photos\", \"likes\": \"https://api.unsplash.com/users/alienowicz/likes\", \"portfolio\": \"https://api.unsplash.com/users/alienowicz/portfolio\", \"following\": \"https://api.unsplash.com/users/alienowicz/following\", \"followers\": \"https://api.unsplash.com/users/alienowicz/followers\" } }, \"current_user_collections\": [], \"urls\": { \"raw\": \"https://images.unsplash.com/photo-1446104838475-bc6508184f08\", \"full\": \"https://images.unsplash.com/photo-1446104838475-bc6508184f08?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=26f4bbe8b28ff1d87278a4af5f9e255a\", \"regular\": \"https://images.unsplash.com/photo-1446104838475-bc6508184f08?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=914acdc119c68bff5eba3e26152c5e3a\", \"small\": \"https://images.unsplash.com/photo-1446104838475-bc6508184f08?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=dbea367d21339d07ce1cd13069ab73e8\", \"thumb\": \"https://images.unsplash.com/photo-1446104838475-bc6508184f08?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=e803963d08c969665a8bbb9ab04f65c7\" }, \"categories\": [], \"links\": { \"self\": \"https://api.unsplash.com/photos/x48QL8gNYZ8\", \"html\": \"https://unsplash.com/photos/x48QL8gNYZ8\", \"download\": \"https://unsplash.com/photos/x48QL8gNYZ8/download\", \"download_location\": \"https://api.unsplash.com/photos/x48QL8gNYZ8/download\" } }, { \"id\": \"dkzlTpMYYMQ\", \"created_at\": \"2015-10-23T07:43:38-04:00\", \"updated_at\": \"2017-10-02T20:59:23-04:00\", \"width\": 5760, \"height\": 3840, \"color\": \"#3F5850\", \"likes\": 199, \"liked_by_user\": false, \"description\": null, \"user\": { \"id\": \"6hh7fFmCplk\", \"updated_at\": \"2017-09-22T13:44:00-04:00\", \"username\": \"wfuller\", \"name\": \"Will Fuller\", \"first_name\": \"Will\", \"last_name\": \"Fuller\", \"twitter_username\": \"will_fuller\", \"portfolio_url\": \"http://willfullerphotography.com/\", \"bio\": \"\", \"location\": null, \"total_likes\": 32, \"total_photos\": 3, \"total_collections\": 0, \"profile_image\": { \"small\": \"https://images.unsplash.com/profile-fb-1445555189-9be131ac477d.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=ca85abe97dbc84fed8a9615309842a28\", \"medium\": \"https://images.unsplash.com/profile-fb-1445555189-9be131ac477d.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=5073c24ff6669d5c78b74509928fd3c6\", \"large\": \"https://images.unsplash.com/profile-fb-1445555189-9be131ac477d.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=72ea55ca0fac1438b8b833c731587781\" }, \"links\": { \"self\": \"https://api.unsplash.com/users/wfuller\", \"html\": \"https://unsplash.com/@wfuller\", \"photos\": \"https://api.unsplash.com/users/wfuller/photos\", \"likes\": \"https://api.unsplash.com/users/wfuller/likes\", \"portfolio\": \"https://api.unsplash.com/users/wfuller/portfolio\", \"following\": \"https://api.unsplash.com/users/wfuller/following\", \"followers\": \"https://api.unsplash.com/users/wfuller/followers\" } }, \"current_user_collections\": [], \"urls\": { \"raw\": \"https://images.unsplash.com/photo-1445600523100-d5b99b664bda\", \"full\": \"https://images.unsplash.com/photo-1445600523100-d5b99b664bda?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=d23c17350365b555b97b38c1affc5959\", \"regular\": \"https://images.unsplash.com/photo-1445600523100-d5b99b664bda?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=b12697857c5272774e3cb9bbbeb2b18e\", \"small\": \"https://images.unsplash.com/photo-1445600523100-d5b99b664bda?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=fe15d3afead71632135db1378cd46f81\", \"thumb\": \"https://images.unsplash.com/photo-1445600523100-d5b99b664bda?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=44caefcc5cb830d5a00cac2965b22042\" }, \"categories\": [], \"links\": { \"self\": \"https://api.unsplash.com/photos/dkzlTpMYYMQ\", \"html\": \"https://unsplash.com/photos/dkzlTpMYYMQ\", \"download\": \"https://unsplash.com/photos/dkzlTpMYYMQ/download\", \"download_location\": \"https://api.unsplash.com/photos/dkzlTpMYYMQ/download\" } }, { \"id\": \"P8PlK2nGwqA\", \"created_at\": \"2016-10-24T11:23:18-04:00\", \"updated_at\": \"2017-10-06T15:50:33-04:00\", \"width\": 2329, \"height\": 1639, \"color\": \"#EFF1F2\", \"likes\": 534, \"liked_by_user\": false, \"description\": \"A small island with a clump of evergreen trees on a lake\", \"user\": { \"id\": \"qbkkNqEAHh8\", \"updated_at\": \"2017-09-22T12:54:47-04:00\", \"username\": \"juanster\", \"name\": \"Juan Davila\", \"first_name\": \"Juan\", \"last_name\": \"Davila\", \"twitter_username\": \"juanstermonster\", \"portfolio_url\": \"http://onedavila.com/\", \"bio\": \"I’m a Toronto based photographer and designer. \\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nSay hello!\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nEMAIL: hello@onedavila.com\\r\\n\\r\\n\\r\\n\", \"location\": \"Toronto, Canada\", \"total_likes\": 1, \"total_photos\": 15, \"total_collections\": 0, \"profile_image\": { \"small\": \"https://images.unsplash.com/profile-1446242087925-6b291fa7de5f?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=aeab740b8403c1c62835112789d8909d\", \"medium\": \"https://images.unsplash.com/profile-1446242087925-6b291fa7de5f?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=20c0f15a81c67a33ee638b1a43b5acd3\", \"large\": \"https://images.unsplash.com/profile-1446242087925-6b291fa7de5f?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=42b3144cb851930778741de7148ca919\" }, \"links\": { \"self\": \"https://api.unsplash.com/users/juanster\", \"html\": \"https://unsplash.com/@juanster\", \"photos\": \"https://api.unsplash.com/users/juanster/photos\", \"likes\": \"https://api.unsplash.com/users/juanster/likes\", \"portfolio\": \"https://api.unsplash.com/users/juanster/portfolio\", \"following\": \"https://api.unsplash.com/users/juanster/following\", \"followers\": \"https://api.unsplash.com/users/juanster/followers\" } }, \"current_user_collections\": [], \"urls\": { \"raw\": \"https://images.unsplash.com/photo-1477322524744-0eece9e79640\", \"full\": \"https://images.unsplash.com/photo-1477322524744-0eece9e79640?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=2fef9e5c67cbee95a5b77430517f31f2\", \"regular\": \"https://images.unsplash.com/photo-1477322524744-0eece9e79640?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=5bef3c529882f2b9d072c01593a34673\", \"small\": \"https://images.unsplash.com/photo-1477322524744-0eece9e79640?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=d899d785ea1a104300e859a15fc2941f\", \"thumb\": \"https://images.unsplash.com/photo-1477322524744-0eece9e79640?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=200c05b7df707c523b853d05ed2cac51\" }, \"categories\": [], \"links\": { \"self\": \"https://api.unsplash.com/photos/P8PlK2nGwqA\", \"html\": \"https://unsplash.com/photos/P8PlK2nGwqA\", \"download\": \"https://unsplash.com/photos/P8PlK2nGwqA/download\", \"download_location\": \"https://api.unsplash.com/photos/P8PlK2nGwqA/download\" } }, { \"id\": \"WH4e0NVslsc\", \"created_at\": \"2015-08-02T07:27:21-04:00\", \"updated_at\": \"2017-10-03T09:13:19-04:00\", \"width\": 5184, \"height\": 3456, \"color\": \"#413C2A\", \"likes\": 96, \"liked_by_user\": false, \"description\": \"An overgrown path through a coniferous forest\", \"user\": { \"id\": \"nfZyTM0R_TI\", \"updated_at\": \"2017-09-21T10:17:07-04:00\", \"username\": \"nech\", \"name\": \"Kirill Nechmonya\", \"first_name\": \"Kirill\", \"last_name\": \"Nechmonya\", \"twitter_username\": null, \"portfolio_url\": \"http://mircoproduction.com/\", \"bio\": \"\", \"location\": null, \"total_likes\": 3, \"total_photos\": 11, \"total_collections\": 0, \"profile_image\": { \"small\": \"https://images.unsplash.com/placeholder-avatars/extra-large.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=0ad68f44c4725d5a3fda019bab9d3edc\", \"medium\": \"https://images.unsplash.com/placeholder-avatars/extra-large.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=356bd4b76a3d4eb97d63f45b818dd358\", \"large\": \"https://images.unsplash.com/placeholder-avatars/extra-large.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=ee8bbf5fb8d6e43aaaa238feae2fe90d\" }, \"links\": { \"self\": \"https://api.unsplash.com/users/nech\", \"html\": \"https://unsplash.com/@nech\", \"photos\": \"https://api.unsplash.com/users/nech/photos\", \"likes\": \"https://api.unsplash.com/users/nech/likes\", \"portfolio\": \"https://api.unsplash.com/users/nech/portfolio\", \"following\": \"https://api.unsplash.com/users/nech/following\", \"followers\": \"https://api.unsplash.com/users/nech/followers\" } }, \"current_user_collections\": [], \"urls\": { \"raw\": \"https://images.unsplash.com/photo-1438514794628-6ad25147b1d4\", \"full\": \"https://images.unsplash.com/photo-1438514794628-6ad25147b1d4?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=853d7df16686fee9d944cf3d27efb7ee\", \"regular\": \"https://images.unsplash.com/photo-1438514794628-6ad25147b1d4?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=6e828b26b077994c123897346cda4b11\", \"small\": \"https://images.unsplash.com/photo-1438514794628-6ad25147b1d4?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=87871981649f7aaf6edb31e660f0b6ba\", \"thumb\": \"https://images.unsplash.com/photo-1438514794628-6ad25147b1d4?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=829285fa4b469b6f299070df32c4d626\" }, \"categories\": [], \"links\": { \"self\": \"https://api.unsplash.com/photos/WH4e0NVslsc\", \"html\": \"https://unsplash.com/photos/WH4e0NVslsc\", \"download\": \"https://unsplash.com/photos/WH4e0NVslsc/download\", \"download_location\": \"https://api.unsplash.com/photos/WH4e0NVslsc/download\" } }, { \"id\": \"9F22zHd6dmM\", \"created_at\": \"2016-03-25T15:51:00-04:00\", \"updated_at\": \"2017-10-02T19:14:28-04:00\", \"width\": 4900, \"height\": 3267, \"color\": \"#131313\", \"likes\": 139, \"liked_by_user\": false, \"description\": null, \"user\": { \"id\": \"xqiscbtGdPc\", \"updated_at\": \"2017-10-05T07:45:18-04:00\", \"username\": \"teddykelley\", \"name\": \"Teddy Kelley\", \"first_name\": \"Teddy\", \"last_name\": \"Kelley\", \"twitter_username\": null, \"portfolio_url\": \"https://teddykelley.smugmug.com\", \"bio\": \"Instagram @Simpler.Times\\r\\n\\r\\nteddykelley@gmail.com\", \"location\": null, \"total_likes\": 44, \"total_photos\": 41, \"total_collections\": 0, \"profile_image\": { \"small\": \"https://images.unsplash.com/profile-1454994701248-ea5cee4726f4?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=d05a497a978036e6df242f12860ae60a\", \"medium\": \"https://images.unsplash.com/profile-1454994701248-ea5cee4726f4?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=821db6a091b23e57ea3c6a7533674996\", \"large\": \"https://images.unsplash.com/profile-1454994701248-ea5cee4726f4?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=77429ab0384f8625cc780c7a87c71c41\" }, \"links\": { \"self\": \"https://api.unsplash.com/users/teddykelley\", \"html\": \"https://unsplash.com/@teddykelley\", \"photos\": \"https://api.unsplash.com/users/teddykelley/photos\", \"likes\": \"https://api.unsplash.com/users/teddykelley/likes\", \"portfolio\": \"https://api.unsplash.com/users/teddykelley/portfolio\", \"following\": \"https://api.unsplash.com/users/teddykelley/following\", \"followers\": \"https://api.unsplash.com/users/teddykelley/followers\" } }, \"current_user_collections\": [], \"urls\": { \"raw\": \"https://images.unsplash.com/photo-1458935416903-006892a9d8ca\", \"full\": \"https://images.unsplash.com/photo-1458935416903-006892a9d8ca?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=a643fef5100bc96a90edef31f5f050a1\", \"regular\": \"https://images.unsplash.com/photo-1458935416903-006892a9d8ca?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=6ec0e7f7fc94f3ffddfed4235f427621\", \"small\": \"https://images.unsplash.com/photo-1458935416903-006892a9d8ca?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=442a5766727822d894badf5af465eb67\", \"thumb\": \"https://images.unsplash.com/photo-1458935416903-006892a9d8ca?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=e844531e51834b67d5b84e7da48e4f40\" }, \"categories\": [], \"links\": { \"self\": \"https://api.unsplash.com/photos/9F22zHd6dmM\", \"html\": \"https://unsplash.com/photos/9F22zHd6dmM\", \"download\": \"https://unsplash.com/photos/9F22zHd6dmM/download\", \"download_location\": \"https://api.unsplash.com/photos/9F22zHd6dmM/download\" } }, { \"id\": \"d6kSvT2xZQo\", \"created_at\": \"2015-08-26T05:35:50-04:00\", \"updated_at\": \"2017-10-04T02:41:54-04:00\", \"width\": 3264, \"height\": 2448, \"color\": \"#534F33\", \"likes\": 94, \"liked_by_user\": false, \"description\": null, \"user\": { \"id\": \"uXQY0WJDRvo\", \"updated_at\": \"2017-09-22T09:02:54-04:00\", \"username\": \"outoforbit\", \"name\": \"Gustav Gullstrand\", \"first_name\": \"Gustav\", \"last_name\": \"Gullstrand\", \"twitter_username\": null, \"portfolio_url\": null, \"bio\": \"\", \"location\": null, \"total_likes\": 0, \"total_photos\": 1, \"total_collections\": 0, \"profile_image\": { \"small\": \"https://images.unsplash.com/placeholder-avatars/extra-large.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=0ad68f44c4725d5a3fda019bab9d3edc\", \"medium\": \"https://images.unsplash.com/placeholder-avatars/extra-large.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=356bd4b76a3d4eb97d63f45b818dd358\", \"large\": \"https://images.unsplash.com/placeholder-avatars/extra-large.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=ee8bbf5fb8d6e43aaaa238feae2fe90d\" }, \"links\": { \"self\": \"https://api.unsplash.com/users/outoforbit\", \"html\": \"https://unsplash.com/@outoforbit\", \"photos\": \"https://api.unsplash.com/users/outoforbit/photos\", \"likes\": \"https://api.unsplash.com/users/outoforbit/likes\", \"portfolio\": \"https://api.unsplash.com/users/outoforbit/portfolio\", \"following\": \"https://api.unsplash.com/users/outoforbit/following\", \"followers\": \"https://api.unsplash.com/users/outoforbit/followers\" } }, \"current_user_collections\": [], \"urls\": { \"raw\": \"https://images.unsplash.com/photo-1440581572325-0bea30075d9d\", \"full\": \"https://images.unsplash.com/photo-1440581572325-0bea30075d9d?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=84d3d09f8ac1338adf4546278856ddac\", \"regular\": \"https://images.unsplash.com/photo-1440581572325-0bea30075d9d?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=8359a43c03f2ee0e0a50502e583a2934\", \"small\": \"https://images.unsplash.com/photo-1440581572325-0bea30075d9d?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=1bebeb99491936b1392807d3679587d8\", \"thumb\": \"https://images.unsplash.com/photo-1440581572325-0bea30075d9d?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=676465e79c18f1788039801288ec3e24\" }, \"categories\": [], \"links\": { \"self\": \"https://api.unsplash.com/photos/d6kSvT2xZQo\", \"html\": \"https://unsplash.com/photos/d6kSvT2xZQo\", \"download\": \"https://unsplash.com/photos/d6kSvT2xZQo/download\", \"download_location\": \"https://api.unsplash.com/photos/d6kSvT2xZQo/download\" } }, { \"id\": \"5KvErlbdeyo\", \"created_at\": \"2016-06-23T10:02:53-04:00\", \"updated_at\": \"2017-10-06T02:04:21-04:00\", \"width\": 5760, \"height\": 3840, \"color\": \"#C0B87C\", \"likes\": 146, \"liked_by_user\": false, \"description\": null, \"user\": { \"id\": \"A7mKxgipFc8\", \"updated_at\": \"2017-10-07T05:18:37-04:00\", \"username\": \"markusspiske\", \"name\": \"Markus Spiske\", \"first_name\": \"Markus\", \"last_name\": \"Spiske\", \"twitter_username\": null, \"portfolio_url\": \"http://freeforcommercialuse.net/\", \"bio\": \"Authentic #unstock photos for commercial use. Stunning lifestyle imagery for modern creatives.\", \"location\": \"Erlangen, Bavaria, Germany\", \"total_likes\": 821, \"total_photos\": 335, \"total_collections\": 18, \"profile_image\": { \"small\": \"https://images.unsplash.com/profile-1468003870880-1d44bae203c5?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=35a08b101a4d88f1dcb14e78d68721c9\", \"medium\": \"https://images.unsplash.com/profile-1468003870880-1d44bae203c5?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=266b89f88f8132cecdf3b0e8c53335fb\", \"large\": \"https://images.unsplash.com/profile-1468003870880-1d44bae203c5?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=8ff6442ed89750b7d7367672547cbff3\" }, \"links\": { \"self\": \"https://api.unsplash.com/users/markusspiske\", \"html\": \"https://unsplash.com/@markusspiske\", \"photos\": \"https://api.unsplash.com/users/markusspiske/photos\", \"likes\": \"https://api.unsplash.com/users/markusspiske/likes\", \"portfolio\": \"https://api.unsplash.com/users/markusspiske/portfolio\", \"following\": \"https://api.unsplash.com/users/markusspiske/following\", \"followers\": \"https://api.unsplash.com/users/markusspiske/followers\" } }, \"current_user_collections\": [], \"urls\": { \"raw\": \"https://images.unsplash.com/photo-1466690519659-283ca81adf97\", \"full\": \"https://images.unsplash.com/photo-1466690519659-283ca81adf97?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=36530fbd96d3955e48a6976fe729298a\", \"regular\": \"https://images.unsplash.com/photo-1466690519659-283ca81adf97?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=17d4e7659bc857c2ff20a39ed2acc660\", \"small\": \"https://images.unsplash.com/photo-1466690519659-283ca81adf97?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=a4ed40db64a2ee9bd0de26f10d26bba7\", \"thumb\": \"https://images.unsplash.com/photo-1466690519659-283ca81adf97?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=2acc7e54461b533a366f0f35623e20d4\" }, \"categories\": [], \"links\": { \"self\": \"https://api.unsplash.com/photos/5KvErlbdeyo\", \"html\": \"https://unsplash.com/photos/5KvErlbdeyo\", \"download\": \"https://unsplash.com/photos/5KvErlbdeyo/download\", \"download_location\": \"https://api.unsplash.com/photos/5KvErlbdeyo/download\" } }, { \"id\": \"B2KgTWnNBd4\", \"created_at\": \"2015-01-25T17:29:46-05:00\", \"updated_at\": \"2017-10-03T14:00:55-04:00\", \"width\": 4368, \"height\": 2912, \"color\": \"#74755A\", \"likes\": 71, \"liked_by_user\": false, \"description\": null, \"user\": { \"id\": \"T4DYyWhpUZw\", \"updated_at\": \"2017-10-06T07:53:41-04:00\", \"username\": \"redevo\", \"name\": \"Dave Robinson\", \"first_name\": \"Dave\", \"last_name\": \"Robinson\", \"twitter_username\": \"davefrombarrow\", \"portfolio_url\": \"http://twitter.com/davefrombarrow\", \"bio\": \"Inbound agency owner, retained firefighter, ballroom dancer and drummer.\", \"location\": \"Aboyne, Scotland\", \"total_likes\": 0, \"total_photos\": 49, \"total_collections\": 0, \"profile_image\": { \"small\": \"https://images.unsplash.com/profile-1495554831880-c3e0f0c53075?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=49549d48244c5e2c614d1230882c13a6\", \"medium\": \"https://images.unsplash.com/profile-1495554831880-c3e0f0c53075?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=0d61d06e20b5266a32e1db37bf71c211\", \"large\": \"https://images.unsplash.com/profile-1495554831880-c3e0f0c53075?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=8489df33d86740a8ed88c99382a0f5f0\" }, \"links\": { \"self\": \"https://api.unsplash.com/users/redevo\", \"html\": \"https://unsplash.com/@redevo\", \"photos\": \"https://api.unsplash.com/users/redevo/photos\", \"likes\": \"https://api.unsplash.com/users/redevo/likes\", \"portfolio\": \"https://api.unsplash.com/users/redevo/portfolio\", \"following\": \"https://api.unsplash.com/users/redevo/following\", \"followers\": \"https://api.unsplash.com/users/redevo/followers\" } }, \"current_user_collections\": [], \"urls\": { \"raw\": \"https://images.unsplash.com/photo-1422224832140-0e546210efc3\", \"full\": \"https://images.unsplash.com/photo-1422224832140-0e546210efc3?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=a5f80b56c6a957fb53b08004192d8fb7\", \"regular\": \"https://images.unsplash.com/photo-1422224832140-0e546210efc3?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=bb0478264ac2720d028b790d77538323\", \"small\": \"https://images.unsplash.com/photo-1422224832140-0e546210efc3?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=f323466ff99823f9946860dfed4196a1\", \"thumb\": \"https://images.unsplash.com/photo-1422224832140-0e546210efc3?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=282fcaa48a9b2042b8508977a120ef99\" }, \"categories\": [], \"links\": { \"self\": \"https://api.unsplash.com/photos/B2KgTWnNBd4\", \"html\": \"https://unsplash.com/photos/B2KgTWnNBd4\", \"download\": \"https://unsplash.com/photos/B2KgTWnNBd4/download\", \"download_location\": \"https://api.unsplash.com/photos/B2KgTWnNBd4/download\" } }, { \"id\": \"Gc7Ahec__XQ\", \"created_at\": \"2017-07-31T16:32:34-04:00\", \"updated_at\": \"2017-10-07T04:23:26-04:00\", \"width\": 3961, \"height\": 5941, \"color\": \"#FEF7FB\", \"likes\": 89, \"liked_by_user\": false, \"description\": null, \"user\": { \"id\": \"mygX5zA-01o\", \"updated_at\": \"2017-10-06T11:58:05-04:00\", \"username\": \"ckirby\", \"name\": \"Cameron Kirby\", \"first_name\": \"Cameron\", \"last_name\": \"Kirby\", \"twitter_username\": \"cameronmkirby\", \"portfolio_url\": \"http://www.cameronmkirby.com/digitaldownloads\", \"bio\": \"You're great. \", \"location\": \"SLC, UT\", \"total_likes\": 53, \"total_photos\": 94, \"total_collections\": 0, \"profile_image\": { \"small\": \"https://images.unsplash.com/profile-1507257293189-39b0b24922fe?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=6c06558390a8eabf4526d67226f39784\", \"medium\": \"https://images.unsplash.com/profile-1507257293189-39b0b24922fe?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=2965983be9522d7dbdd3eeb4973ca60c\", \"large\": \"https://images.unsplash.com/profile-1507257293189-39b0b24922fe?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=66f8f3929a6feb6b0938efde9b57472d\" }, \"links\": { \"self\": \"https://api.unsplash.com/users/ckirby\", \"html\": \"https://unsplash.com/@ckirby\", \"photos\": \"https://api.unsplash.com/users/ckirby/photos\", \"likes\": \"https://api.unsplash.com/users/ckirby/likes\", \"portfolio\": \"https://api.unsplash.com/users/ckirby/portfolio\", \"following\": \"https://api.unsplash.com/users/ckirby/following\", \"followers\": \"https://api.unsplash.com/users/ckirby/followers\" } }, \"current_user_collections\": [], \"urls\": { \"raw\": \"https://images.unsplash.com/photo-1501533123-e62013cabb4f\", \"full\": \"https://images.unsplash.com/photo-1501533123-e62013cabb4f?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=b9113e3ab1db2e5cdea56e73178feb4c\", \"regular\": \"https://images.unsplash.com/photo-1501533123-e62013cabb4f?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=2f949dbd1379410869552799864e9886\", \"small\": \"https://images.unsplash.com/photo-1501533123-e62013cabb4f?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=dbfc175c935d72f57acf7798862e922b\", \"thumb\": \"https://images.unsplash.com/photo-1501533123-e62013cabb4f?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=512f925f7e8b03b6603e0f82d19d95bd\" }, \"categories\": [], \"links\": { \"self\": \"https://api.unsplash.com/photos/Gc7Ahec__XQ\", \"html\": \"https://unsplash.com/photos/Gc7Ahec__XQ\", \"download\": \"https://unsplash.com/photos/Gc7Ahec__XQ/download\", \"download_location\": \"https://api.unsplash.com/photos/Gc7Ahec__XQ/download\" } }, { \"id\": \"01Qqkfz-ck8\", \"created_at\": \"2016-10-28T19:22:52-04:00\", \"updated_at\": \"2017-10-05T06:39:52-04:00\", \"width\": 5184, \"height\": 3456, \"color\": \"#BBB9C6\", \"likes\": 173, \"liked_by_user\": false, \"description\": \"A drone shot of the treetops in a coniferous forest\", \"user\": { \"id\": \"fxhATpS_SgQ\", \"updated_at\": \"2017-10-07T08:19:35-04:00\", \"username\": \"noahsilliman\", \"name\": \"Noah Silliman\", \"first_name\": \"Noah\", \"last_name\": \"Silliman\", \"twitter_username\": \"DanielThorndyk1\", \"portfolio_url\": \"https://soundcloud.com/user-388635053\", \"bio\": \"Welcome to Noah Silliman Photography! If you like my photography be sure to check out my instrgram page: @NoahSilliman and my music in the link above. Thank you, and Enjoy!\", \"location\": null, \"total_likes\": 324, \"total_photos\": 45, \"total_collections\": 0, \"profile_image\": { \"small\": \"https://images.unsplash.com/profile-1504297927268-15a68a102765?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=c639c77ca15436fe928ec2014fd2fc65\", \"medium\": \"https://images.unsplash.com/profile-1504297927268-15a68a102765?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=c7a7f6e41d40643d40288a714300176a\", \"large\": \"https://images.unsplash.com/profile-1504297927268-15a68a102765?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=110b794ae846d849d408edec30964cc8\" }, \"links\": { \"self\": \"https://api.unsplash.com/users/noahsilliman\", \"html\": \"https://unsplash.com/@noahsilliman\", \"photos\": \"https://api.unsplash.com/users/noahsilliman/photos\", \"likes\": \"https://api.unsplash.com/users/noahsilliman/likes\", \"portfolio\": \"https://api.unsplash.com/users/noahsilliman/portfolio\", \"following\": \"https://api.unsplash.com/users/noahsilliman/following\", \"followers\": \"https://api.unsplash.com/users/noahsilliman/followers\" } }, \"current_user_collections\": [], \"urls\": { \"raw\": \"https://images.unsplash.com/photo-1477696957384-3b1d731c4cff\", \"full\": \"https://images.unsplash.com/photo-1477696957384-3b1d731c4cff?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=b39b330aa10a485f612e2c22f0122759\", \"regular\": \"https://images.unsplash.com/photo-1477696957384-3b1d731c4cff?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=348b8399aa950ad48e99ace7d9592b37\", \"small\": \"https://images.unsplash.com/photo-1477696957384-3b1d731c4cff?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=8da15f22bfc5f7da6b83fc80b5337e22\", \"thumb\": \"https://images.unsplash.com/photo-1477696957384-3b1d731c4cff?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=5bcc4dd7d530087e6e9d1d6bb4326bb2\" }, \"categories\": [], \"links\": { \"self\": \"https://api.unsplash.com/photos/01Qqkfz-ck8\", \"html\": \"https://unsplash.com/photos/01Qqkfz-ck8\", \"download\": \"https://unsplash.com/photos/01Qqkfz-ck8/download\", \"download_location\": \"https://api.unsplash.com/photos/01Qqkfz-ck8/download\" } }, { \"id\": \"15d_4S2tJsQ\", \"created_at\": \"2016-01-14T22:57:54-05:00\", \"updated_at\": \"2017-10-06T08:05:42-04:00\", \"width\": 5760, \"height\": 3840, \"color\": \"#D3D1C7\", \"likes\": 89, \"liked_by_user\": false, \"description\": null, \"user\": { \"id\": \"Org6rBPeeAQ\", \"updated_at\": \"2017-10-07T08:25:50-04:00\", \"username\": \"garciasaldana_\", \"name\": \"Pablo Garcia Saldaña\", \"first_name\": \"Pablo\", \"last_name\": \"Garcia Saldaña\", \"twitter_username\": \"pagsa__\", \"portfolio_url\": \"http://www.garciasaldana.com\", \"bio\": \"Self taught cinematographer and landscape photographer. \\r\\nFound love in photography thanks to the revolution of DSLR´s.\\r\\nCurrently living in Mexico City, he works as an \\r\\nindependent filmmaker and a photography instructor,  feel free to contact me.\", \"location\": \"Mexico,City\", \"total_likes\": 84, \"total_photos\": 84, \"total_collections\": 1, \"profile_image\": { \"small\": \"https://images.unsplash.com/profile-1463699072698-7e90bcd253f6?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=55bcfd54d3c4194e10b4b4605554ecbe\", \"medium\": \"https://images.unsplash.com/profile-1463699072698-7e90bcd253f6?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=ef196da84273dd247a483dfe32ed5507\", \"large\": \"https://images.unsplash.com/profile-1463699072698-7e90bcd253f6?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=b6e6e6925b91cb6c8059dde0e9b3341f\" }, \"links\": { \"self\": \"https://api.unsplash.com/users/garciasaldana_\", \"html\": \"https://unsplash.com/@garciasaldana_\", \"photos\": \"https://api.unsplash.com/users/garciasaldana_/photos\", \"likes\": \"https://api.unsplash.com/users/garciasaldana_/likes\", \"portfolio\": \"https://api.unsplash.com/users/garciasaldana_/portfolio\", \"following\": \"https://api.unsplash.com/users/garciasaldana_/following\", \"followers\": \"https://api.unsplash.com/users/garciasaldana_/followers\" } }, \"current_user_collections\": [], \"urls\": { \"raw\": \"https://images.unsplash.com/photo-1452830015922-20ec8cfc86be\", \"full\": \"https://images.unsplash.com/photo-1452830015922-20ec8cfc86be?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=40a32c25dee561d6fddb5904778dfbd3\", \"regular\": \"https://images.unsplash.com/photo-1452830015922-20ec8cfc86be?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=3a09edd18a98966cfeb2c8132b9be263\", \"small\": \"https://images.unsplash.com/photo-1452830015922-20ec8cfc86be?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=1523a8d8e4399db0c8858293fc6fb9ec\", \"thumb\": \"https://images.unsplash.com/photo-1452830015922-20ec8cfc86be?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=6919001f6b60aba21d688a6c73fff03f\" }, \"categories\": [], \"links\": { \"self\": \"https://api.unsplash.com/photos/15d_4S2tJsQ\", \"html\": \"https://unsplash.com/photos/15d_4S2tJsQ\", \"download\": \"https://unsplash.com/photos/15d_4S2tJsQ/download\", \"download_location\": \"https://api.unsplash.com/photos/15d_4S2tJsQ/download\" } }, { \"id\": \"2ShvY8Lf6l0\", \"created_at\": \"2015-03-12T10:20:52-04:00\", \"updated_at\": \"2017-10-04T02:42:24-04:00\", \"width\": 2560, \"height\": 1440, \"color\": \"#4A3A21\", \"likes\": 276, \"liked_by_user\": false, \"description\": \"Grass and trees in a forest with rays of sunlight peeking through\", \"user\": { \"id\": \"X_PlSruZcfs\", \"updated_at\": \"2017-09-28T05:22:55-04:00\", \"username\": \"szmigieldesign\", \"name\": \"Lukasz Szmigiel\", \"first_name\": \"Lukasz\", \"last_name\": \"Szmigiel\", \"twitter_username\": null, \"portfolio_url\": \"http://photography.szmigieldesign.pl\", \"bio\": \"Spectator, anthropologist, introvert, atheist. Takes photographs from the need of exploration. Deeply fascinated by culture. Privately - a perfectionist whose quest in life is to seek peace, good coffee and chocolate covered cookies. \", \"location\": \"Poland\", \"total_likes\": 79, \"total_photos\": 110, \"total_collections\": 0, \"profile_image\": { \"small\": \"https://images.unsplash.com/profile-1441974180349-689b9b920fea?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=0e8a8022daeae1a79649afe1db35f85c\", \"medium\": \"https://images.unsplash.com/profile-1441974180349-689b9b920fea?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=e8b9ef70b38e76c9ffd349c57bc7f3fa\", \"large\": \"https://images.unsplash.com/profile-1441974180349-689b9b920fea?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=30da3e1447fc48279f9171e08dcc2aa8\" }, \"links\": { \"self\": \"https://api.unsplash.com/users/szmigieldesign\", \"html\": \"https://unsplash.com/@szmigieldesign\", \"photos\": \"https://api.unsplash.com/users/szmigieldesign/photos\", \"likes\": \"https://api.unsplash.com/users/szmigieldesign/likes\", \"portfolio\": \"https://api.unsplash.com/users/szmigieldesign/portfolio\", \"following\": \"https://api.unsplash.com/users/szmigieldesign/following\", \"followers\": \"https://api.unsplash.com/users/szmigieldesign/followers\" } }, \"current_user_collections\": [], \"urls\": { \"raw\": \"https://images.unsplash.com/photo-1426170042593-200f250dfdaf\", \"full\": \"https://images.unsplash.com/photo-1426170042593-200f250dfdaf?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=6487e7bd0efc74ea522287c03103228f\", \"regular\": \"https://images.unsplash.com/photo-1426170042593-200f250dfdaf?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=8183c45b5a6187b6674f4dfa8d0a644b\", \"small\": \"https://images.unsplash.com/photo-1426170042593-200f250dfdaf?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=4c10f3b68479b4e893ceb5e67e378931\", \"thumb\": \"https://images.unsplash.com/photo-1426170042593-200f250dfdaf?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=bc5b5ce14a71185bda5894ab3e1ebd21\" }, \"categories\": [], \"links\": { \"self\": \"https://api.unsplash.com/photos/2ShvY8Lf6l0\", \"html\": \"https://unsplash.com/photos/2ShvY8Lf6l0\", \"download\": \"https://unsplash.com/photos/2ShvY8Lf6l0/download\", \"download_location\": \"https://api.unsplash.com/photos/2ShvY8Lf6l0/download\" } }, { \"id\": \"GmL0s_u6H9E\", \"created_at\": \"2015-08-11T00:14:21-04:00\", \"updated_at\": \"2017-10-02T20:59:33-04:00\", \"width\": 5472, \"height\": 3382, \"color\": \"#3F341C\", \"likes\": 51, \"liked_by_user\": false, \"description\": \"A pond in a forest in Kuitpo Forest Reserve\", \"user\": { \"id\": \"kMNkot28eOU\", \"updated_at\": \"2017-10-07T08:22:20-04:00\", \"username\": \"mkwlsn\", \"name\": \"Mike Wilson\", \"first_name\": \"Mike\", \"last_name\": \"Wilson\", \"twitter_username\": \"savilleknight\", \"portfolio_url\": \"http://mikewilson.com.au\", \"bio\": \"Street Photography | New Topography  | Unsplash Featured Photographer | See more on Instagram at @mkwlsn\", \"location\": \"Australia\", \"total_likes\": 690, \"total_photos\": 478, \"total_collections\": 0, \"profile_image\": { \"small\": \"https://images.unsplash.com/profile-1500855728366-723cb2ce843b?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=afd1ef7be01d91d280a9e64e3f048016\", \"medium\": \"https://images.unsplash.com/profile-1500855728366-723cb2ce843b?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=929665d6ed5dd95416340b4eadea72dd\", \"large\": \"https://images.unsplash.com/profile-1500855728366-723cb2ce843b?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=d72e71c6c3bc5e1acc46dd2b44e599e2\" }, \"links\": { \"self\": \"https://api.unsplash.com/users/mkwlsn\", \"html\": \"https://unsplash.com/@mkwlsn\", \"photos\": \"https://api.unsplash.com/users/mkwlsn/photos\", \"likes\": \"https://api.unsplash.com/users/mkwlsn/likes\", \"portfolio\": \"https://api.unsplash.com/users/mkwlsn/portfolio\", \"following\": \"https://api.unsplash.com/users/mkwlsn/following\", \"followers\": \"https://api.unsplash.com/users/mkwlsn/followers\" } }, \"current_user_collections\": [], \"urls\": { \"raw\": \"https://images.unsplash.com/photo-1439266347198-c9449544ac7d\", \"full\": \"https://images.unsplash.com/photo-1439266347198-c9449544ac7d?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=e1c8dac27afcc73c8c6cd451acfe0cce\", \"regular\": \"https://images.unsplash.com/photo-1439266347198-c9449544ac7d?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=a75b98b6cb96d5dc79ba79233ecfc3d4\", \"small\": \"https://images.unsplash.com/photo-1439266347198-c9449544ac7d?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=268a102379723a1e3c8e7708985caab7\", \"thumb\": \"https://images.unsplash.com/photo-1439266347198-c9449544ac7d?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=a354f97d5cb7e0315f48cad45dd32f4e\" }, \"categories\": [], \"links\": { \"self\": \"https://api.unsplash.com/photos/GmL0s_u6H9E\", \"html\": \"https://unsplash.com/photos/GmL0s_u6H9E\", \"download\": \"https://unsplash.com/photos/GmL0s_u6H9E/download\", \"download_location\": \"https://api.unsplash.com/photos/GmL0s_u6H9E/download\" } }, { \"id\": \"qKFxQ3X-YbI\", \"created_at\": \"2014-12-08T14:06:50-05:00\", \"updated_at\": \"2017-10-07T08:23:49-04:00\", \"width\": 2200, \"height\": 1467, \"color\": \"#6E7C82\", \"likes\": 260, \"liked_by_user\": false, \"description\": \"A pale shot of tall conifers in thick fog\", \"user\": { \"id\": \"-rcrJA1bVtQ\", \"updated_at\": \"2017-10-05T14:34:38-04:00\", \"username\": \"jaymantri\", \"name\": \"Jay Mantri\", \"first_name\": \"Jay\", \"last_name\": \"Mantri\", \"twitter_username\": \"jaymantri\", \"portfolio_url\": \"http://jaymantri.com/\", \"bio\": \"Designer by day, burger monster by night.\", \"location\": \"Los Angeles, California\", \"total_likes\": 0, \"total_photos\": 5, \"total_collections\": 0, \"profile_image\": { \"small\": \"https://images.unsplash.com/profile-1503027684826-c9c642529b92?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=79a040d28c55609e74afab8c51b2856b\", \"medium\": \"https://images.unsplash.com/profile-1503027684826-c9c642529b92?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=29f24b986f22a6e49fb8a776717bc79e\", \"large\": \"https://images.unsplash.com/profile-1503027684826-c9c642529b92?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=d5c52153d40ec3d66a93cd3d913dd612\" }, \"links\": { \"self\": \"https://api.unsplash.com/users/jaymantri\", \"html\": \"https://unsplash.com/@jaymantri\", \"photos\": \"https://api.unsplash.com/users/jaymantri/photos\", \"likes\": \"https://api.unsplash.com/users/jaymantri/likes\", \"portfolio\": \"https://api.unsplash.com/users/jaymantri/portfolio\", \"following\": \"https://api.unsplash.com/users/jaymantri/following\", \"followers\": \"https://api.unsplash.com/users/jaymantri/followers\" } }, \"current_user_collections\": [], \"urls\": { \"raw\": \"https://images.unsplash.com/photo-1418065514041-ace6539f65cf\", \"full\": \"https://images.unsplash.com/photo-1418065514041-ace6539f65cf?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=a62a4d447ae1a50b288a94caba64a786\", \"regular\": \"https://images.unsplash.com/photo-1418065514041-ace6539f65cf?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=31fe42a62c7b19bbaedccdb547cff287\", \"small\": \"https://images.unsplash.com/photo-1418065514041-ace6539f65cf?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=840fd3436593da7b10f574a7c188377b\", \"thumb\": \"https://images.unsplash.com/photo-1418065514041-ace6539f65cf?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=aac1d3febf911d4f311311dc7eba827c\" }, \"categories\": [], \"links\": { \"self\": \"https://api.unsplash.com/photos/qKFxQ3X-YbI\", \"html\": \"https://unsplash.com/photos/qKFxQ3X-YbI\", \"download\": \"https://unsplash.com/photos/qKFxQ3X-YbI/download\", \"download_location\": \"https://api.unsplash.com/photos/qKFxQ3X-YbI/download\" } }, { \"id\": \"y1fcIQhSu7Q\", \"created_at\": \"2015-09-04T23:08:21-04:00\", \"updated_at\": \"2017-10-05T13:28:42-04:00\", \"width\": 3840, \"height\": 2160, \"color\": \"#5E6051\", \"likes\": 193, \"liked_by_user\": false, \"description\": \"A low-angle shot of a foggy forest\", \"user\": { \"id\": \"w7sRH2QJ60U\", \"updated_at\": \"2017-09-22T08:44:15-04:00\", \"username\": \"evondeveloper\", \"name\": \"Trần Anh Tuấn\", \"first_name\": \"Trần Anh\", \"last_name\": \"Tuấn\", \"twitter_username\": null, \"portfolio_url\": null, \"bio\": \"\", \"location\": null, \"total_likes\": 0, \"total_photos\": 2, \"total_collections\": 0, \"profile_image\": { \"small\": \"https://images.unsplash.com/profile-fb-1441422426-f3d0862e9002.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=5d6e076effd59938ba755c5428da815c\", \"medium\": \"https://images.unsplash.com/profile-fb-1441422426-f3d0862e9002.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=36d2963bc61d7f9be3d9b5c6e5f5d3c5\", \"large\": \"https://images.unsplash.com/profile-fb-1441422426-f3d0862e9002.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=4c9a86b28e7688d5786eaf3baa6b053d\" }, \"links\": { \"self\": \"https://api.unsplash.com/users/evondeveloper\", \"html\": \"https://unsplash.com/@evondeveloper\", \"photos\": \"https://api.unsplash.com/users/evondeveloper/photos\", \"likes\": \"https://api.unsplash.com/users/evondeveloper/likes\", \"portfolio\": \"https://api.unsplash.com/users/evondeveloper/portfolio\", \"following\": \"https://api.unsplash.com/users/evondeveloper/following\", \"followers\": \"https://api.unsplash.com/users/evondeveloper/followers\" } }, \"current_user_collections\": [], \"urls\": { \"raw\": \"https://images.unsplash.com/photo-1441422454217-519d3ee81350\", \"full\": \"https://images.unsplash.com/photo-1441422454217-519d3ee81350?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=d366ff4575a0492bafc1cb477f53e6eb\", \"regular\": \"https://images.unsplash.com/photo-1441422454217-519d3ee81350?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=b18319d5a2e69eb7a1e5737cea8184df\", \"small\": \"https://images.unsplash.com/photo-1441422454217-519d3ee81350?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=9225d2b71f84087a73cd417568611b81\", \"thumb\": \"https://images.unsplash.com/photo-1441422454217-519d3ee81350?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=b5229a58410b23c74a38db8cb4990129\" }, \"categories\": [], \"links\": { \"self\": \"https://api.unsplash.com/photos/y1fcIQhSu7Q\", \"html\": \"https://unsplash.com/photos/y1fcIQhSu7Q\", \"download\": \"https://unsplash.com/photos/y1fcIQhSu7Q/download\", \"download_location\": \"https://api.unsplash.com/photos/y1fcIQhSu7Q/download\" } }, { \"id\": \"P3DxOe-OJGA\", \"created_at\": \"2017-04-17T23:31:07-04:00\", \"updated_at\": \"2017-10-02T23:41:03-04:00\", \"width\": 4000, \"height\": 6000, \"color\": \"#D0CFD5\", \"likes\": 252, \"liked_by_user\": false, \"description\": \"An evergreen forest with moss covering everything from tree trunks to fallen logs on the ground\", \"user\": { \"id\": \"j6QxoEZ0SdY\", \"updated_at\": \"2017-09-22T15:33:51-04:00\", \"username\": \"dsamps\", \"name\": \"Tuce\", \"first_name\": \"Tuce \", \"last_name\": null, \"twitter_username\": null, \"portfolio_url\": null, \"bio\": \"\", \"location\": \"Portland,Oregon\", \"total_likes\": 237, \"total_photos\": 57, \"total_collections\": 0, \"profile_image\": { \"small\": \"https://images.unsplash.com/profile-1492486386449-040748f86c57?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=93d1afdfc6daf337fe1e02b668c27399\", \"medium\": \"https://images.unsplash.com/profile-1492486386449-040748f86c57?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=b4e4e525caae257da1d81389664ed704\", \"large\": \"https://images.unsplash.com/profile-1492486386449-040748f86c57?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=32621cc08924a9659b4f61abcd656462\" }, \"links\": { \"self\": \"https://api.unsplash.com/users/dsamps\", \"html\": \"https://unsplash.com/@dsamps\", \"photos\": \"https://api.unsplash.com/users/dsamps/photos\", \"likes\": \"https://api.unsplash.com/users/dsamps/likes\", \"portfolio\": \"https://api.unsplash.com/users/dsamps/portfolio\", \"following\": \"https://api.unsplash.com/users/dsamps/following\", \"followers\": \"https://api.unsplash.com/users/dsamps/followers\" } }, \"current_user_collections\": [], \"urls\": { \"raw\": \"https://images.unsplash.com/photo-1492486169476-8c5dafd9539f\", \"full\": \"https://images.unsplash.com/photo-1492486169476-8c5dafd9539f?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=31449365a69e1cb9e9d042f8ddf11027\", \"regular\": \"https://images.unsplash.com/photo-1492486169476-8c5dafd9539f?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=a138fe7946d6f028d3ae31e8bbb35176\", \"small\": \"https://images.unsplash.com/photo-1492486169476-8c5dafd9539f?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=ab6d05cf92f8420278c1917f9828b39f\", \"thumb\": \"https://images.unsplash.com/photo-1492486169476-8c5dafd9539f?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=673f5ff4cc24ce080a7677fa643c578a\" }, \"categories\": [], \"links\": { \"self\": \"https://api.unsplash.com/photos/P3DxOe-OJGA\", \"html\": \"https://unsplash.com/photos/P3DxOe-OJGA\", \"download\": \"https://unsplash.com/photos/P3DxOe-OJGA/download\", \"download_location\": \"https://api.unsplash.com/photos/P3DxOe-OJGA/download\" } }, { \"id\": \"_NM6bXPqaCE\", \"created_at\": \"2017-03-02T16:18:25-05:00\", \"updated_at\": \"2017-10-05T10:56:23-04:00\", \"width\": 4000, \"height\": 3000, \"color\": \"#CDC7D1\", \"likes\": 149, \"liked_by_user\": false, \"description\": null, \"user\": { \"id\": \"YnibqGr-KNg\", \"updated_at\": \"2017-10-07T07:58:42-04:00\", \"username\": \"geran\", \"name\": \"Geran de Klerk\", \"first_name\": \"Geran\", \"last_name\": \"de Klerk\", \"twitter_username\": \"gerandeklerk\", \"portfolio_url\": \"http://instagram.com/gerandeklerk\", \"bio\": \"Pro geek. Terrible dancer. Instagram: @gerandeklerk\", \"location\": \"Stockholm\", \"total_likes\": 0, \"total_photos\": 27, \"total_collections\": 0, \"profile_image\": { \"small\": \"https://images.unsplash.com/profile-1473772909536-f17a8ab90189?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=0b1baeab58943038fc51c307a5fcd179\", \"medium\": \"https://images.unsplash.com/profile-1473772909536-f17a8ab90189?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=c87e22bae2beabcb5508ad792563db36\", \"large\": \"https://images.unsplash.com/profile-1473772909536-f17a8ab90189?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=0ff9a3f929230212d08af0ff442ca010\" }, \"links\": { \"self\": \"https://api.unsplash.com/users/geran\", \"html\": \"https://unsplash.com/@geran\", \"photos\": \"https://api.unsplash.com/users/geran/photos\", \"likes\": \"https://api.unsplash.com/users/geran/likes\", \"portfolio\": \"https://api.unsplash.com/users/geran/portfolio\", \"following\": \"https://api.unsplash.com/users/geran/following\", \"followers\": \"https://api.unsplash.com/users/geran/followers\" } }, \"current_user_collections\": [], \"urls\": { \"raw\": \"https://images.unsplash.com/photo-1488489153583-89ce18dd4968\", \"full\": \"https://images.unsplash.com/photo-1488489153583-89ce18dd4968?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=25a1b12b02decdc46993294c33d681aa\", \"regular\": \"https://images.unsplash.com/photo-1488489153583-89ce18dd4968?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=9d153db781a2abad025554eb64369fc2\", \"small\": \"https://images.unsplash.com/photo-1488489153583-89ce18dd4968?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=b84a97adc9103543f530ebcc7e985d69\", \"thumb\": \"https://images.unsplash.com/photo-1488489153583-89ce18dd4968?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=ad59fa9b105e2364b770f266d72979d3\" }, \"categories\": [], \"links\": { \"self\": \"https://api.unsplash.com/photos/_NM6bXPqaCE\", \"html\": \"https://unsplash.com/photos/_NM6bXPqaCE\", \"download\": \"https://unsplash.com/photos/_NM6bXPqaCE/download\", \"download_location\": \"https://api.unsplash.com/photos/_NM6bXPqaCE/download\" } }, { \"id\": \"Kcxv7Gz7wmw\", \"created_at\": \"2017-05-21T15:36:18-04:00\", \"updated_at\": \"2017-10-02T14:39:47-04:00\", \"width\": 3648, \"height\": 5340, \"color\": \"#FDFDFB\", \"likes\": 138, \"liked_by_user\": false, \"description\": \"A blonde woman strolling along a sunlit path through the forest in Nynäshamn\", \"user\": { \"id\": \"YnibqGr-KNg\", \"updated_at\": \"2017-10-07T07:58:42-04:00\", \"username\": \"geran\", \"name\": \"Geran de Klerk\", \"first_name\": \"Geran\", \"last_name\": \"de Klerk\", \"twitter_username\": \"gerandeklerk\", \"portfolio_url\": \"http://instagram.com/gerandeklerk\", \"bio\": \"Pro geek. Terrible dancer. Instagram: @gerandeklerk\", \"location\": \"Stockholm\", \"total_likes\": 0, \"total_photos\": 27, \"total_collections\": 0, \"profile_image\": { \"small\": \"https://images.unsplash.com/profile-1473772909536-f17a8ab90189?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=0b1baeab58943038fc51c307a5fcd179\", \"medium\": \"https://images.unsplash.com/profile-1473772909536-f17a8ab90189?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=c87e22bae2beabcb5508ad792563db36\", \"large\": \"https://images.unsplash.com/profile-1473772909536-f17a8ab90189?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=0ff9a3f929230212d08af0ff442ca010\" }, \"links\": { \"self\": \"https://api.unsplash.com/users/geran\", \"html\": \"https://unsplash.com/@geran\", \"photos\": \"https://api.unsplash.com/users/geran/photos\", \"likes\": \"https://api.unsplash.com/users/geran/likes\", \"portfolio\": \"https://api.unsplash.com/users/geran/portfolio\", \"following\": \"https://api.unsplash.com/users/geran/following\", \"followers\": \"https://api.unsplash.com/users/geran/followers\" } }, \"current_user_collections\": [], \"urls\": { \"raw\": \"https://images.unsplash.com/photo-1495395226200-8fbf6b720b8c\", \"full\": \"https://images.unsplash.com/photo-1495395226200-8fbf6b720b8c?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=d932c1caa1af7cd3b45f3f5c20c422e1\", \"regular\": \"https://images.unsplash.com/photo-1495395226200-8fbf6b720b8c?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=aecf738cd3881d106e0d43ca804512ca\", \"small\": \"https://images.unsplash.com/photo-1495395226200-8fbf6b720b8c?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=a8ea96a3e32a48f4a13be8e5c8b44219\", \"thumb\": \"https://images.unsplash.com/photo-1495395226200-8fbf6b720b8c?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=cbe705219ddde2fdf3728d63555c20fd\" }, \"categories\": [], \"links\": { \"self\": \"https://api.unsplash.com/photos/Kcxv7Gz7wmw\", \"html\": \"https://unsplash.com/photos/Kcxv7Gz7wmw\", \"download\": \"https://unsplash.com/photos/Kcxv7Gz7wmw/download\", \"download_location\": \"https://api.unsplash.com/photos/Kcxv7Gz7wmw/download\" } }, { \"id\": \"ArtVJ-217Cw\", \"created_at\": \"2015-11-02T11:51:39-05:00\", \"updated_at\": \"2017-10-03T14:01:55-04:00\", \"width\": 5184, \"height\": 3456, \"color\": \"#656A5D\", \"likes\": 103, \"liked_by_user\": false, \"description\": null, \"user\": { \"id\": \"mT7srzn1RWI\", \"updated_at\": \"2017-09-21T14:42:08-04:00\", \"username\": \"somonesummers\", \"name\": \"Paul Summers\", \"first_name\": \"Paul\", \"last_name\": \"Summers\", \"twitter_username\": null, \"portfolio_url\": \"https://www.flickr.com/photos/paul_summers/\", \"bio\": \"\", \"location\": null, \"total_likes\": 0, \"total_photos\": 10, \"total_collections\": 0, \"profile_image\": { \"small\": \"https://images.unsplash.com/profile-1446483516835-bcb6cca1b02d?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=9b85bf2977f5816c0fb5f691d3beac6d\", \"medium\": \"https://images.unsplash.com/profile-1446483516835-bcb6cca1b02d?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=0b4e426581beaabc5a0c7a555f44ca2c\", \"large\": \"https://images.unsplash.com/profile-1446483516835-bcb6cca1b02d?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=ee19b7afaa7b1b26e8bdf611c62110be\" }, \"links\": { \"self\": \"https://api.unsplash.com/users/somonesummers\", \"html\": \"https://unsplash.com/@somonesummers\", \"photos\": \"https://api.unsplash.com/users/somonesummers/photos\", \"likes\": \"https://api.unsplash.com/users/somonesummers/likes\", \"portfolio\": \"https://api.unsplash.com/users/somonesummers/portfolio\", \"following\": \"https://api.unsplash.com/users/somonesummers/following\", \"followers\": \"https://api.unsplash.com/users/somonesummers/followers\" } }, \"current_user_collections\": [], \"urls\": { \"raw\": \"https://images.unsplash.com/photo-1446483050676-bd2fdf3ac2d6\", \"full\": \"https://images.unsplash.com/photo-1446483050676-bd2fdf3ac2d6?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=62c018425ac1b0acfb500c38894cf1ac\", \"regular\": \"https://images.unsplash.com/photo-1446483050676-bd2fdf3ac2d6?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=905609da20617b96ab373555cdac338e\", \"small\": \"https://images.unsplash.com/photo-1446483050676-bd2fdf3ac2d6?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=f27047f4d0d3c8f90a01feb6123eb775\", \"thumb\": \"https://images.unsplash.com/photo-1446483050676-bd2fdf3ac2d6?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=0d712f4840c915f83f7671f98a189e2f\" }, \"categories\": [], \"links\": { \"self\": \"https://api.unsplash.com/photos/ArtVJ-217Cw\", \"html\": \"https://unsplash.com/photos/ArtVJ-217Cw\", \"download\": \"https://unsplash.com/photos/ArtVJ-217Cw/download\", \"download_location\": \"https://api.unsplash.com/photos/ArtVJ-217Cw/download\" } }, { \"id\": \"e85qV3NjrUw\", \"created_at\": \"2015-04-14T17:12:21-04:00\", \"updated_at\": \"2017-09-24T22:46:19-04:00\", \"width\": 4096, \"height\": 1821, \"color\": \"#424E3E\", \"likes\": 76, \"liked_by_user\": false, \"description\": null, \"user\": { \"id\": \"wgj-0tyVo90\", \"updated_at\": \"2017-09-22T17:18:43-04:00\", \"username\": \"viktor_m\", \"name\": \"Viktor Mogilat\", \"first_name\": \"Viktor\", \"last_name\": \"Mogilat\", \"twitter_username\": null, \"portfolio_url\": \"https://www.flickr.com/photos/mogilat_v/\", \"bio\": \"\", \"location\": null, \"total_likes\": 0, \"total_photos\": 17, \"total_collections\": 0, \"profile_image\": { \"small\": \"https://images.unsplash.com/placeholder-avatars/extra-large.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=0ad68f44c4725d5a3fda019bab9d3edc\", \"medium\": \"https://images.unsplash.com/placeholder-avatars/extra-large.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=356bd4b76a3d4eb97d63f45b818dd358\", \"large\": \"https://images.unsplash.com/placeholder-avatars/extra-large.jpg?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=ee8bbf5fb8d6e43aaaa238feae2fe90d\" }, \"links\": { \"self\": \"https://api.unsplash.com/users/viktor_m\", \"html\": \"https://unsplash.com/@viktor_m\", \"photos\": \"https://api.unsplash.com/users/viktor_m/photos\", \"likes\": \"https://api.unsplash.com/users/viktor_m/likes\", \"portfolio\": \"https://api.unsplash.com/users/viktor_m/portfolio\", \"following\": \"https://api.unsplash.com/users/viktor_m/following\", \"followers\": \"https://api.unsplash.com/users/viktor_m/followers\" } }, \"current_user_collections\": [], \"urls\": { \"raw\": \"https://images.unsplash.com/photo-1429042344633-913ea4be5fb7\", \"full\": \"https://images.unsplash.com/photo-1429042344633-913ea4be5fb7?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=3ddb3613a369c6be13e38c0a8d2bf2b2\", \"regular\": \"https://images.unsplash.com/photo-1429042344633-913ea4be5fb7?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=95f24463b20798349039bf7429bbe3b7\", \"small\": \"https://images.unsplash.com/photo-1429042344633-913ea4be5fb7?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=3799f820f87e3b5a5a35d052761717b9\", \"thumb\": \"https://images.unsplash.com/photo-1429042344633-913ea4be5fb7?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=29fb8b8c626fd0c282a93fb0232ee11d\" }, \"categories\": [], \"links\": { \"self\": \"https://api.unsplash.com/photos/e85qV3NjrUw\", \"html\": \"https://unsplash.com/photos/e85qV3NjrUw\", \"download\": \"https://unsplash.com/photos/e85qV3NjrUw/download\", \"download_location\": \"https://api.unsplash.com/photos/e85qV3NjrUw/download\" } }, { \"id\": \"a72o8w9HC2w\", \"created_at\": \"2017-06-03T17:45:51-04:00\", \"updated_at\": \"2017-10-06T09:56:08-04:00\", \"width\": 4067, \"height\": 2712, \"color\": \"#CAF9E9\", \"likes\": 230, \"liked_by_user\": false, \"description\": null, \"user\": { \"id\": \"N_TyJdM2ptU\", \"updated_at\": \"2017-10-06T21:43:06-04:00\", \"username\": \"jplenio\", \"name\": \"Johannes Plenio\", \"first_name\": \"Johannes\", \"last_name\": \"Plenio\", \"twitter_username\": null, \"portfolio_url\": \"http://500px.com/jopl\", \"bio\": \"\", \"location\": \"Munich\", \"total_likes\": 76, \"total_photos\": 129, \"total_collections\": 3, \"profile_image\": { \"small\": \"https://images.unsplash.com/profile-1493320375113-8d776e646fd0?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=f06c6f92d8ec3e2d7f8f979889c5647f\", \"medium\": \"https://images.unsplash.com/profile-1493320375113-8d776e646fd0?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=a04e92f7048f760aa1fa5cc5f2a0e108\", \"large\": \"https://images.unsplash.com/profile-1493320375113-8d776e646fd0?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=409d2b7c4e1e5f40d2e3fc31e9c04aef\" }, \"links\": { \"self\": \"https://api.unsplash.com/users/jplenio\", \"html\": \"https://unsplash.com/@jplenio\", \"photos\": \"https://api.unsplash.com/users/jplenio/photos\", \"likes\": \"https://api.unsplash.com/users/jplenio/likes\", \"portfolio\": \"https://api.unsplash.com/users/jplenio/portfolio\", \"following\": \"https://api.unsplash.com/users/jplenio/following\", \"followers\": \"https://api.unsplash.com/users/jplenio/followers\" } }, \"current_user_collections\": [], \"urls\": { \"raw\": \"https://images.unsplash.com/photo-1496526311033-8a80ae14a1f9\", \"full\": \"https://images.unsplash.com/photo-1496526311033-8a80ae14a1f9?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=9dfad983294804c803baa84e8b59307f\", \"regular\": \"https://images.unsplash.com/photo-1496526311033-8a80ae14a1f9?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=afeb6f61b67bb736feee097658b3fab4\", \"small\": \"https://images.unsplash.com/photo-1496526311033-8a80ae14a1f9?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=5478d54c048d29c0da88746aa8fd6f6c\", \"thumb\": \"https://images.unsplash.com/photo-1496526311033-8a80ae14a1f9?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=947202c9989269f9ec3c9652c6488a65\" }, \"categories\": [], \"links\": { \"self\": \"https://api.unsplash.com/photos/a72o8w9HC2w\", \"html\": \"https://unsplash.com/photos/a72o8w9HC2w\", \"download\": \"https://unsplash.com/photos/a72o8w9HC2w/download\", \"download_location\": \"https://api.unsplash.com/photos/a72o8w9HC2w/download\" } }, { \"id\": \"dGDmRqzPID0\", \"created_at\": \"2017-05-27T22:57:08-04:00\", \"updated_at\": \"2017-10-03T12:42:24-04:00\", \"width\": 6000, \"height\": 4000, \"color\": \"#F0F2F4\", \"likes\": 41, \"liked_by_user\": false, \"description\": \"A small rocky creek in a forest on a foggy day\", \"user\": { \"id\": \"nbhrE4D_aIA\", \"updated_at\": \"2017-10-06T22:44:31-04:00\", \"username\": \"ibydesigns\", \"name\": \"Alex Iby\", \"first_name\": \"Alex\", \"last_name\": \"Iby\", \"twitter_username\": null, \"portfolio_url\": \"http://www.alexiby.com\", \"bio\": \"I am a professional photographer. Find me on Instagram @alex.iby\", \"location\": \"Boston, MA\", \"total_likes\": 461, \"total_photos\": 150, \"total_collections\": 0, \"profile_image\": { \"small\": \"https://images.unsplash.com/profile-1507292222944-5e19c5aa0d48?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=316893a6ac87622d4105781da9f83ce3\", \"medium\": \"https://images.unsplash.com/profile-1507292222944-5e19c5aa0d48?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=0f61e81401fdb2e09d489bb5d17d98dc\", \"large\": \"https://images.unsplash.com/profile-1507292222944-5e19c5aa0d48?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=86141fee99cd0d4ec251456692a48faf\" }, \"links\": { \"self\": \"https://api.unsplash.com/users/ibydesigns\", \"html\": \"https://unsplash.com/@ibydesigns\", \"photos\": \"https://api.unsplash.com/users/ibydesigns/photos\", \"likes\": \"https://api.unsplash.com/users/ibydesigns/likes\", \"portfolio\": \"https://api.unsplash.com/users/ibydesigns/portfolio\", \"following\": \"https://api.unsplash.com/users/ibydesigns/following\", \"followers\": \"https://api.unsplash.com/users/ibydesigns/followers\" } }, \"current_user_collections\": [], \"urls\": { \"raw\": \"https://images.unsplash.com/photo-1495940178561-60ecb2447b0e\", \"full\": \"https://images.unsplash.com/photo-1495940178561-60ecb2447b0e?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=d1eda51ff3bc338070fbb51987995baf\", \"regular\": \"https://images.unsplash.com/photo-1495940178561-60ecb2447b0e?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=a2fd52643d10305f191c1262be502934\", \"small\": \"https://images.unsplash.com/photo-1495940178561-60ecb2447b0e?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=0650424972d799ce78f360e2e7fe0dc1\", \"thumb\": \"https://images.unsplash.com/photo-1495940178561-60ecb2447b0e?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=21b31567d7ce1793931d0f322ae0a4a8\" }, \"categories\": [], \"links\": { \"self\": \"https://api.unsplash.com/photos/dGDmRqzPID0\", \"html\": \"https://unsplash.com/photos/dGDmRqzPID0\", \"download\": \"https://unsplash.com/photos/dGDmRqzPID0/download\", \"download_location\": \"https://api.unsplash.com/photos/dGDmRqzPID0/download\" } }, { \"id\": \"P4wUyM5DAsc\", \"created_at\": \"2015-06-24T11:18:00-04:00\", \"updated_at\": \"2017-10-03T13:24:24-04:00\", \"width\": 6000, \"height\": 4000, \"color\": \"#27301C\", \"likes\": 72, \"liked_by_user\": false, \"description\": \"Looking up in the middle of a plush, green forest\", \"user\": { \"id\": \"zY8bYOgW308\", \"updated_at\": \"2017-10-07T01:39:31-04:00\", \"username\": \"usinglight\", \"name\": \"Stefan Steinbauer\", \"first_name\": \"Stefan\", \"last_name\": \"Steinbauer\", \"twitter_username\": \"stst31415\", \"portfolio_url\": \"http://www.usinglight.com\", \"bio\": \"marketing professional, loving photography, architecture, macros and light - geometry and software test are my secret love.\", \"location\": \"Vienna (Austria)\", \"total_likes\": 251, \"total_photos\": 127, \"total_collections\": 13, \"profile_image\": { \"small\": \"https://images.unsplash.com/profile-1460375814080-75b2c15d7733?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=8fc8728116918529757ead7893ca8180\", \"medium\": \"https://images.unsplash.com/profile-1460375814080-75b2c15d7733?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=27686e4c65bb35c87a880b8770a4ed0b\", \"large\": \"https://images.unsplash.com/profile-1460375814080-75b2c15d7733?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=ec366756daa2f7a93612382f69b5c544\" }, \"links\": { \"self\": \"https://api.unsplash.com/users/usinglight\", \"html\": \"https://unsplash.com/@usinglight\", \"photos\": \"https://api.unsplash.com/users/usinglight/photos\", \"likes\": \"https://api.unsplash.com/users/usinglight/likes\", \"portfolio\": \"https://api.unsplash.com/users/usinglight/portfolio\", \"following\": \"https://api.unsplash.com/users/usinglight/following\", \"followers\": \"https://api.unsplash.com/users/usinglight/followers\" } }, \"current_user_collections\": [], \"urls\": { \"raw\": \"https://images.unsplash.com/photo-1435158988479-e3984c2fd00c\", \"full\": \"https://images.unsplash.com/photo-1435158988479-e3984c2fd00c?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=b39778eafe1522a97867ed9c212455f1\", \"regular\": \"https://images.unsplash.com/photo-1435158988479-e3984c2fd00c?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=8f9d9a82f7839358c913ce635b225ea1\", \"small\": \"https://images.unsplash.com/photo-1435158988479-e3984c2fd00c?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=346867ea57c37cc7e3644b95038c0e6c\", \"thumb\": \"https://images.unsplash.com/photo-1435158988479-e3984c2fd00c?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=162d4a37c53710fc773dffc5bf3eb554\" }, \"categories\": [], \"links\": { \"self\": \"https://api.unsplash.com/photos/P4wUyM5DAsc\", \"html\": \"https://unsplash.com/photos/P4wUyM5DAsc\", \"download\": \"https://unsplash.com/photos/P4wUyM5DAsc/download\", \"download_location\": \"https://api.unsplash.com/photos/P4wUyM5DAsc/download\" } }, { \"id\": \"UK29SVDGfUc\", \"created_at\": \"2016-06-02T01:51:28-04:00\", \"updated_at\": \"2017-10-04T10:58:57-04:00\", \"width\": 3000, \"height\": 2000, \"color\": \"#FDFDFE\", \"likes\": 84, \"liked_by_user\": false, \"description\": null, \"user\": { \"id\": \"-oXDgMWxc94\", \"updated_at\": \"2017-10-07T06:03:19-04:00\", \"username\": \"madbyte\", \"name\": \"Vladimir Kudinov\", \"first_name\": \"Vladimir\", \"last_name\": \"Kudinov\", \"twitter_username\": \"stSilent\", \"portfolio_url\": \"http://vladimirkudinov.com\", \"bio\": \"Hang these photos on the wall. Buy prints — https://society6.com/madbyte/prints\", \"location\": \"Los Angeles\", \"total_likes\": 17, \"total_photos\": 57, \"total_collections\": 0, \"profile_image\": { \"small\": \"https://images.unsplash.com/profile-1496340928420-7ddb691a24b9?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=1b0957d9c147a0ec840f7bcc4bcc9cd4\", \"medium\": \"https://images.unsplash.com/profile-1496340928420-7ddb691a24b9?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=bace05039ad310a034abb57cf51e31cd\", \"large\": \"https://images.unsplash.com/profile-1496340928420-7ddb691a24b9?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=b2d79a52e669ba08907eb40ca15f1715\" }, \"links\": { \"self\": \"https://api.unsplash.com/users/madbyte\", \"html\": \"https://unsplash.com/@madbyte\", \"photos\": \"https://api.unsplash.com/users/madbyte/photos\", \"likes\": \"https://api.unsplash.com/users/madbyte/likes\", \"portfolio\": \"https://api.unsplash.com/users/madbyte/portfolio\", \"following\": \"https://api.unsplash.com/users/madbyte/following\", \"followers\": \"https://api.unsplash.com/users/madbyte/followers\" } }, \"current_user_collections\": [], \"urls\": { \"raw\": \"https://images.unsplash.com/photo-1464846539327-f23d0038c19e\", \"full\": \"https://images.unsplash.com/photo-1464846539327-f23d0038c19e?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=579846a6d3edc9a2445cd4dcfc3ec913\", \"regular\": \"https://images.unsplash.com/photo-1464846539327-f23d0038c19e?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=d3479a846812283ad5af6623eca5ec34\", \"small\": \"https://images.unsplash.com/photo-1464846539327-f23d0038c19e?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=126a8cb209160671f8dd478df15f30cd\", \"thumb\": \"https://images.unsplash.com/photo-1464846539327-f23d0038c19e?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=e8d81e40b96e36872ab4cd860d64f555\" }, \"categories\": [], \"links\": { \"self\": \"https://api.unsplash.com/photos/UK29SVDGfUc\", \"html\": \"https://unsplash.com/photos/UK29SVDGfUc\", \"download\": \"https://unsplash.com/photos/UK29SVDGfUc/download\", \"download_location\": \"https://api.unsplash.com/photos/UK29SVDGfUc/download\" } }, { \"id\": \"payOjEt5qYY\", \"created_at\": \"2017-08-07T16:17:00-04:00\", \"updated_at\": \"2017-10-05T18:49:11-04:00\", \"width\": 5184, \"height\": 3456, \"color\": \"#FFFFFF\", \"likes\": 128, \"liked_by_user\": false, \"description\": \"A number of mighty trees on a foggy day in Stanley Park\", \"user\": { \"id\": \"aZLVHucYfig\", \"updated_at\": \"2017-10-06T22:12:06-04:00\", \"username\": \"juliemarsh\", \"name\": \"Julie Marsh\", \"first_name\": \"Julie\", \"last_name\": \"Marsh\", \"twitter_username\": null, \"portfolio_url\": null, \"bio\": \"Follow me and say hello on Insta @juliemarshphotography \", \"location\": \"Vancouver, British Columbia\", \"total_likes\": 34, \"total_photos\": 41, \"total_collections\": 0, \"profile_image\": { \"small\": \"https://images.unsplash.com/profile-1501794051337-0b49f86803cd?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=3c2fe2b8e1ad67e78a16b9eee7e43315\", \"medium\": \"https://images.unsplash.com/profile-1501794051337-0b49f86803cd?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=423cd562dc50ea78040ab8b5e64711f3\", \"large\": \"https://images.unsplash.com/profile-1501794051337-0b49f86803cd?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=79607e421db66d699f0548f6ee55cb3c\" }, \"links\": { \"self\": \"https://api.unsplash.com/users/juliemarsh\", \"html\": \"https://unsplash.com/@juliemarsh\", \"photos\": \"https://api.unsplash.com/users/juliemarsh/photos\", \"likes\": \"https://api.unsplash.com/users/juliemarsh/likes\", \"portfolio\": \"https://api.unsplash.com/users/juliemarsh/portfolio\", \"following\": \"https://api.unsplash.com/users/juliemarsh/following\", \"followers\": \"https://api.unsplash.com/users/juliemarsh/followers\" } }, \"current_user_collections\": [], \"urls\": { \"raw\": \"https://images.unsplash.com/photo-1502136928196-0ebd524bdf97\", \"full\": \"https://images.unsplash.com/photo-1502136928196-0ebd524bdf97?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=5a1f2979cd3edc0782251f329b44aa9c\", \"regular\": \"https://images.unsplash.com/photo-1502136928196-0ebd524bdf97?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=4a8304cec48603d6c0d3f3592d3e4c3c\", \"small\": \"https://images.unsplash.com/photo-1502136928196-0ebd524bdf97?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=b2dbc00e910b431c9cd3b0dcab9d8536\", \"thumb\": \"https://images.unsplash.com/photo-1502136928196-0ebd524bdf97?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=4453eace2a49970416b4082f1e9bc0c5\" }, \"categories\": [], \"links\": { \"self\": \"https://api.unsplash.com/photos/payOjEt5qYY\", \"html\": \"https://unsplash.com/photos/payOjEt5qYY\", \"download\": \"https://unsplash.com/photos/payOjEt5qYY/download\", \"download_location\": \"https://api.unsplash.com/photos/payOjEt5qYY/download\" } }, { \"id\": \"U2fnW9DZ2z4\", \"created_at\": \"2015-10-16T19:38:24-04:00\", \"updated_at\": \"2017-09-27T17:21:20-04:00\", \"width\": 5184, \"height\": 3456, \"color\": \"#413E37\", \"likes\": 69, \"liked_by_user\": false, \"description\": null, \"user\": { \"id\": \"0dFmVpK_F94\", \"updated_at\": \"2017-10-07T08:22:18-04:00\", \"username\": \"elijahhenderson\", \"name\": \"Elijah Henderson\", \"first_name\": \"Elijah\", \"last_name\": \"Henderson\", \"twitter_username\": \"zwappo\", \"portfolio_url\": null, \"bio\": \"I like to take pictures of my friends and everyday adventures\", \"location\": \"Nashville\", \"total_likes\": 202, \"total_photos\": 98, \"total_collections\": 2, \"profile_image\": { \"small\": \"https://images.unsplash.com/profile-1504315841951-e72d86cd3c6c?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=32&w=32&s=109790bd15ecd9c49c2dc0df19aa7688\", \"medium\": \"https://images.unsplash.com/profile-1504315841951-e72d86cd3c6c?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=64&w=64&s=2f73c3a77680c212b87a8e425d658603\", \"large\": \"https://images.unsplash.com/profile-1504315841951-e72d86cd3c6c?ixlib=rb-0.3.5&q=80&fm=jpg&crop=faces&cs=tinysrgb&fit=crop&h=128&w=128&s=ca372f9ac8f8ed5329e9925c053764fb\" }, \"links\": { \"self\": \"https://api.unsplash.com/users/elijahhenderson\", \"html\": \"https://unsplash.com/@elijahhenderson\", \"photos\": \"https://api.unsplash.com/users/elijahhenderson/photos\", \"likes\": \"https://api.unsplash.com/users/elijahhenderson/likes\", \"portfolio\": \"https://api.unsplash.com/users/elijahhenderson/portfolio\", \"following\": \"https://api.unsplash.com/users/elijahhenderson/following\", \"followers\": \"https://api.unsplash.com/users/elijahhenderson/followers\" } }, \"current_user_collections\": [], \"urls\": { \"raw\": \"https://images.unsplash.com/photo-1445038678354-6890ad33bc72\", \"full\": \"https://images.unsplash.com/photo-1445038678354-6890ad33bc72?ixlib=rb-0.3.5&q=85&fm=jpg&crop=entropy&cs=srgb&s=22236f87f42322fd2df8f6576bc167b7\", \"regular\": \"https://images.unsplash.com/photo-1445038678354-6890ad33bc72?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=1080&fit=max&s=70a2b642ca9251efe5b2b706232e5ba9\", \"small\": \"https://images.unsplash.com/photo-1445038678354-6890ad33bc72?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=400&fit=max&s=91889cdb4cdcc818f7b112e0f55de99e\", \"thumb\": \"https://images.unsplash.com/photo-1445038678354-6890ad33bc72?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=8dad19c961ff81a9c88f29f66e275504\" }, \"categories\": [], \"links\": { \"self\": \"https://api.unsplash.com/photos/U2fnW9DZ2z4\", \"html\": \"https://unsplash.com/photos/U2fnW9DZ2z4\", \"download\": \"https://unsplash.com/photos/U2fnW9DZ2z4/download\", \"download_location\": \"https://api.unsplash.com/photos/U2fnW9DZ2z4/download\" } }];\n\n            //                const request = new Request(`https://api.unsplash.com/search/photos?query=${this.searchText}&per_page=100`, {\n            //                    method: \"GET\",\n            //                    headers: new Headers({\n            //                        \"Authorization\": `Client-ID 64f9762c04f94722606706fe60aa8519d76abc2cbbbdc86f321fa8f27d870381`\n            //                    })\n            //                });\n            //\n            //                fetch(request).then(response => {\n            //                    if (response.status !== 200) {\n            //                        console.error(\"Looks like there was a problem. Status Code: \" + response.status);\n            //                        return;\n            //                    }\n            //                    response.json().then((data) => {\n            //                        this.photos = data.results;\n            //                        console.log(JSON.stringify(this.photos));\n            //                    });\n            //                })\n        },\n        renderPhoto: function renderPhoto(photo) {\n            var ratio = Math.min(400 / photo.width, 600 / photo.height);\n            return this.$refs.img2enabled.checked === true ? \"<img-2 src-preview=\\\"\" + photo.urls.raw + \"?ixlib=rb-0.3.5&q=1&fm=jpg&crop=entropy&cs=tinysrgb&w=10&height=10&fit=max\\\" src-light=\\\"\" + photo.urls.thumb + \"\\\" src=\\\"\" + photo.urls.small + \"\\\" width=\\\"\" + photo.width * ratio + \"\\\" height=\\\"\" + photo.height * ratio + \"\\\"></img-2>\" : \"<img src=\\\"\" + photo.urls.regular + \"\\\" width=\\\"\" + photo.width * ratio + \"\\\" height=\\\"\" + photo.height * ratio + \"\\\" />\";\n        }\n    }\n}; //\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	eval("var __vue_exports__, __vue_options__\nvar __vue_styles__ = {}\n\n/* styles */\n__webpack_require__(12)\n\n/* script */\n__vue_exports__ = __webpack_require__(14)\n\n/* template */\nvar __vue_template__ = __webpack_require__(15)\n__vue_options__ = __vue_exports__ = __vue_exports__ || {}\nif (\n  typeof __vue_exports__.default === \"object\" ||\n  typeof __vue_exports__.default === \"function\"\n) {\nif (Object.keys(__vue_exports__).some(function (key) { return key !== \"default\" && key !== \"__esModule\" })) {console.error(\"named exports are not supported in *.vue files.\")}\n__vue_options__ = __vue_exports__ = __vue_exports__.default\n}\nif (typeof __vue_options__ === \"function\") {\n  __vue_options__ = __vue_options__.options\n}\n__vue_options__.__file = \"C:\\\\Users\\\\leon\\\\Code\\\\img-2-playground\\\\src\\\\layouts\\\\Main.vue\"\n__vue_options__.render = __vue_template__.render\n__vue_options__.staticRenderFns = __vue_template__.staticRenderFns\n__vue_options__._scopeId = \"data-v-0f94b22a\"\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-0f94b22a\", __vue_options__)\n  } else {\n    hotAPI.reload(\"data-v-0f94b22a\", __vue_options__)\n  }\n})()}\nif (__vue_options__.functional) {console.error(\"[vue-loader] Main.vue: functional components are not supported and should be defined in plain js files using render functions.\")}\n\nmodule.exports = __vue_exports__\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGF5b3V0cy9NYWluLnZ1ZT9mODdiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELG1EQUFtRCxJQUFJO0FBQzdHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFlBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsQ0FBQztBQUNELGlDQUFpQzs7QUFFakMiLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX192dWVfZXhwb3J0c19fLCBfX3Z1ZV9vcHRpb25zX19cbnZhciBfX3Z1ZV9zdHlsZXNfXyA9IHt9XG5cbi8qIHN0eWxlcyAqL1xucmVxdWlyZShcIiEhdnVlLXN0eWxlLWxvYWRlciFjc3MtbG9hZGVyP3NvdXJjZU1hcCF2dWUtbG9hZGVyL2xpYi9zdHlsZS1yZXdyaXRlcj9pZD1kYXRhLXYtMGY5NGIyMmEmc2NvcGVkPXRydWUhdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL01haW4udnVlXCIpXG5cbi8qIHNjcmlwdCAqL1xuX192dWVfZXhwb3J0c19fID0gcmVxdWlyZShcIiEhYmFiZWwtbG9hZGVyIXZ1ZS1sb2FkZXIvbGliL3NlbGVjdG9yP3R5cGU9c2NyaXB0JmluZGV4PTAhLi9NYWluLnZ1ZVwiKVxuXG4vKiB0ZW1wbGF0ZSAqL1xudmFyIF9fdnVlX3RlbXBsYXRlX18gPSByZXF1aXJlKFwiISF2dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlcj9pZD1kYXRhLXYtMGY5NGIyMmEhdnVlLWxvYWRlci9saWIvc2VsZWN0b3I/dHlwZT10ZW1wbGF0ZSZpbmRleD0wIS4vTWFpbi52dWVcIilcbl9fdnVlX29wdGlvbnNfXyA9IF9fdnVlX2V4cG9ydHNfXyA9IF9fdnVlX2V4cG9ydHNfXyB8fCB7fVxuaWYgKFxuICB0eXBlb2YgX192dWVfZXhwb3J0c19fLmRlZmF1bHQgPT09IFwib2JqZWN0XCIgfHxcbiAgdHlwZW9mIF9fdnVlX2V4cG9ydHNfXy5kZWZhdWx0ID09PSBcImZ1bmN0aW9uXCJcbikge1xuaWYgKE9iamVjdC5rZXlzKF9fdnVlX2V4cG9ydHNfXykuc29tZShmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBrZXkgIT09IFwiZGVmYXVsdFwiICYmIGtleSAhPT0gXCJfX2VzTW9kdWxlXCIgfSkpIHtjb25zb2xlLmVycm9yKFwibmFtZWQgZXhwb3J0cyBhcmUgbm90IHN1cHBvcnRlZCBpbiAqLnZ1ZSBmaWxlcy5cIil9XG5fX3Z1ZV9vcHRpb25zX18gPSBfX3Z1ZV9leHBvcnRzX18gPSBfX3Z1ZV9leHBvcnRzX18uZGVmYXVsdFxufVxuaWYgKHR5cGVvZiBfX3Z1ZV9vcHRpb25zX18gPT09IFwiZnVuY3Rpb25cIikge1xuICBfX3Z1ZV9vcHRpb25zX18gPSBfX3Z1ZV9vcHRpb25zX18ub3B0aW9uc1xufVxuX192dWVfb3B0aW9uc19fLl9fZmlsZSA9IFwiQzpcXFxcVXNlcnNcXFxcbGVvblxcXFxDb2RlXFxcXGltZy0yLXBsYXlncm91bmRcXFxcc3JjXFxcXGxheW91dHNcXFxcTWFpbi52dWVcIlxuX192dWVfb3B0aW9uc19fLnJlbmRlciA9IF9fdnVlX3RlbXBsYXRlX18ucmVuZGVyXG5fX3Z1ZV9vcHRpb25zX18uc3RhdGljUmVuZGVyRm5zID0gX192dWVfdGVtcGxhdGVfXy5zdGF0aWNSZW5kZXJGbnNcbl9fdnVlX29wdGlvbnNfXy5fc2NvcGVJZCA9IFwiZGF0YS12LTBmOTRiMjJhXCJcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHsoZnVuY3Rpb24gKCkge1xuICB2YXIgaG90QVBJID0gcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKVxuICBob3RBUEkuaW5zdGFsbChyZXF1aXJlKFwidnVlXCIpLCBmYWxzZSlcbiAgaWYgKCFob3RBUEkuY29tcGF0aWJsZSkgcmV0dXJuXG4gIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICBob3RBUEkuY3JlYXRlUmVjb3JkKFwiZGF0YS12LTBmOTRiMjJhXCIsIF9fdnVlX29wdGlvbnNfXylcbiAgfSBlbHNlIHtcbiAgICBob3RBUEkucmVsb2FkKFwiZGF0YS12LTBmOTRiMjJhXCIsIF9fdnVlX29wdGlvbnNfXylcbiAgfVxufSkoKX1cbmlmIChfX3Z1ZV9vcHRpb25zX18uZnVuY3Rpb25hbCkge2NvbnNvbGUuZXJyb3IoXCJbdnVlLWxvYWRlcl0gTWFpbi52dWU6IGZ1bmN0aW9uYWwgY29tcG9uZW50cyBhcmUgbm90IHN1cHBvcnRlZCBhbmQgc2hvdWxkIGJlIGRlZmluZWQgaW4gcGxhaW4ganMgZmlsZXMgdXNpbmcgcmVuZGVyIGZ1bmN0aW9ucy5cIil9XG5cbm1vZHVsZS5leHBvcnRzID0gX192dWVfZXhwb3J0c19fXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9sYXlvdXRzL01haW4udnVlXG4vLyBtb2R1bGUgaWQgPSAxMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(13);\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = __webpack_require__(9)(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(false) {\n\t// When the styles change, update the <style> tags\n\tif(!content.locals) {\n\t\tmodule.hot.accept(\"!!../../node_modules/css-loader/index.js?sourceMap!../../node_modules/vue-loader/lib/style-rewriter.js?id=data-v-0f94b22a&scoped=true!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./Main.vue\", function() {\n\t\t\tvar newContent = require(\"!!../../node_modules/css-loader/index.js?sourceMap!../../node_modules/vue-loader/lib/style-rewriter.js?id=data-v-0f94b22a&scoped=true!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./Main.vue\");\n\t\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\t\t\tupdate(newContent);\n\t\t});\n\t}\n\t// When the module is disposed, remove the <style> tags\n\tmodule.hot.dispose(function() { update(); });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGF5b3V0cy9NYWluLnZ1ZT9jODk1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQXFGO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsZ0NBQWdDLFVBQVUsRUFBRTtBQUM1QyIsImZpbGUiOiIxMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9zb3VyY2VNYXAhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLXJld3JpdGVyLmpzP2lkPWRhdGEtdi0wZjk0YjIyYSZzY29wZWQ9dHJ1ZSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL01haW4udnVlXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9hZGRTdHlsZXMuanNcIikoY29udGVudCwge30pO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG5cdC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdGlmKCFjb250ZW50LmxvY2Fscykge1xuXHRcdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9zb3VyY2VNYXAhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLXJld3JpdGVyLmpzP2lkPWRhdGEtdi0wZjk0YjIyYSZzY29wZWQ9dHJ1ZSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL01haW4udnVlXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9zb3VyY2VNYXAhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLXJld3JpdGVyLmpzP2lkPWRhdGEtdi0wZjk0YjIyYSZzY29wZWQ9dHJ1ZSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL01haW4udnVlXCIpO1xuXHRcdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cdFx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdFx0fSk7XG5cdH1cblx0Ly8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdnVlLXN0eWxlLWxvYWRlciEuL34vY3NzLWxvYWRlcj9zb3VyY2VNYXAhLi9+L3Z1ZS1sb2FkZXIvbGliL3N0eWxlLXJld3JpdGVyLmpzP2lkPWRhdGEtdi0wZjk0YjIyYSZzY29wZWQ9dHJ1ZSEuL34vdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3NyYy9sYXlvdXRzL01haW4udnVlXG4vLyBtb2R1bGUgaWQgPSAxMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	eval("exports = module.exports = __webpack_require__(8)();\n// imports\n\n\n// module\nexports.push([module.id, \"\\n.container[data-v-0f94b22a] {\\n    width: 100%;\\n    height: 100%;\\n    /*display: flex;*/\\n    /*flex-direction: column;*/\\n}\\n\", \"\", {\"version\":3,\"sources\":[\"/./src/layouts/Main.vue?681e5e9b\"],\"names\":[],\"mappings\":\";AAmBA;IACA,YAAA;IACA,aAAA;IACA,kBAAA;IACA,2BAAA;CACA\",\"file\":\"Main.vue\",\"sourcesContent\":[\"<template>\\r\\n    <div class=\\\"container\\\">\\r\\n        <content>\\r\\n            <slot></slot>\\r\\n        </content>\\r\\n    </div>\\r\\n</template>\\r\\n\\r\\n<script>\\r\\n    export default {\\r\\n        computed: {\\r\\n            currentRoute: function () {\\r\\n                return this.$router.currentRoute.name;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n</script>\\r\\n\\r\\n<style scoped>\\r\\n    .container {\\r\\n        width: 100%;\\r\\n        height: 100%;\\r\\n        /*display: flex;*/\\r\\n        /*flex-direction: column;*/\\r\\n    }\\r\\n</style>\\r\\n\"],\"sourceRoot\":\"webpack://\"}]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGF5b3V0cy9NYWluLnZ1ZT9hYWFkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7OztBQUdBO0FBQ0EseURBQXlELGtCQUFrQixtQkFBbUIsc0JBQXNCLGlDQUFpQyxLQUFLLFVBQVUsbUZBQW1GLE1BQU0sVUFBVSxVQUFVLFdBQVcsV0FBVyxtT0FBbU8sdUJBQXVCLDJDQUEyQywwREFBMEQsaUJBQWlCLGFBQWEsU0FBUyx1REFBdUQsd0JBQXdCLHlCQUF5Qiw0QkFBNEIsdUNBQXVDLFdBQVcsNkNBQTZDOztBQUVoNUIiLCJmaWxlIjoiMTMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKCk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJcXG4uY29udGFpbmVyW2RhdGEtdi0wZjk0YjIyYV0ge1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbiAgICAvKmRpc3BsYXk6IGZsZXg7Ki9cXG4gICAgLypmbGV4LWRpcmVjdGlvbjogY29sdW1uOyovXFxufVxcblwiLCBcIlwiLCB7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCIvLi9zcmMvbGF5b3V0cy9NYWluLnZ1ZT82ODFlNWU5YlwiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiO0FBbUJBO0lBQ0EsWUFBQTtJQUNBLGFBQUE7SUFDQSxrQkFBQTtJQUNBLDJCQUFBO0NBQ0FcIixcImZpbGVcIjpcIk1haW4udnVlXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIjx0ZW1wbGF0ZT5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiY29udGFpbmVyXFxcIj5cXHJcXG4gICAgICAgIDxjb250ZW50PlxcclxcbiAgICAgICAgICAgIDxzbG90Pjwvc2xvdD5cXHJcXG4gICAgICAgIDwvY29udGVudD5cXHJcXG4gICAgPC9kaXY+XFxyXFxuPC90ZW1wbGF0ZT5cXHJcXG5cXHJcXG48c2NyaXB0PlxcclxcbiAgICBleHBvcnQgZGVmYXVsdCB7XFxyXFxuICAgICAgICBjb21wdXRlZDoge1xcclxcbiAgICAgICAgICAgIGN1cnJlbnRSb3V0ZTogZnVuY3Rpb24gKCkge1xcclxcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy4kcm91dGVyLmN1cnJlbnRSb3V0ZS5uYW1lO1xcclxcbiAgICAgICAgICAgIH1cXHJcXG4gICAgICAgIH1cXHJcXG4gICAgfVxcclxcbjwvc2NyaXB0PlxcclxcblxcclxcbjxzdHlsZSBzY29wZWQ+XFxyXFxuICAgIC5jb250YWluZXIge1xcclxcbiAgICAgICAgd2lkdGg6IDEwMCU7XFxyXFxuICAgICAgICBoZWlnaHQ6IDEwMCU7XFxyXFxuICAgICAgICAvKmRpc3BsYXk6IGZsZXg7Ki9cXHJcXG4gICAgICAgIC8qZmxleC1kaXJlY3Rpb246IGNvbHVtbjsqL1xcclxcbiAgICB9XFxyXFxuPC9zdHlsZT5cXHJcXG5cIl0sXCJzb3VyY2VSb290XCI6XCJ3ZWJwYWNrOi8vXCJ9XSk7XG5cbi8vIGV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9jc3MtbG9hZGVyP3NvdXJjZU1hcCEuL34vdnVlLWxvYWRlci9saWIvc3R5bGUtcmV3cml0ZXIuanM/aWQ9ZGF0YS12LTBmOTRiMjJhJnNjb3BlZD10cnVlIS4vfi92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vc3JjL2xheW91dHMvTWFpbi52dWVcbi8vIG1vZHVsZSBpZCA9IDEzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 14 */
/***/ (function(module, exports) {

	eval("\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n//\n//\n//\n//\n//\n//\n//\n//\n\nexports.default = {\n    computed: {\n        currentRoute: function currentRoute() {\n            return this.$router.currentRoute.name;\n        }\n    }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vTWFpbi52dWU/NTY0NiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFTQTs7Ozs4Q0FHQTs2Q0FDQTtBQUVBO0FBSkE7QUFEQSIsImZpbGUiOiIxNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIjx0ZW1wbGF0ZT5cclxuICAgIDxkaXYgY2xhc3M9XCJjb250YWluZXJcIj5cclxuICAgICAgICA8Y29udGVudD5cclxuICAgICAgICAgICAgPHNsb3Q+PC9zbG90PlxyXG4gICAgICAgIDwvY29udGVudD5cclxuICAgIDwvZGl2PlxyXG48L3RlbXBsYXRlPlxyXG5cclxuPHNjcmlwdD5cclxuICAgIGV4cG9ydCBkZWZhdWx0IHtcclxuICAgICAgICBjb21wdXRlZDoge1xyXG4gICAgICAgICAgICBjdXJyZW50Um91dGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLiRyb3V0ZXIuY3VycmVudFJvdXRlLm5hbWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlIHNjb3BlZD5cclxuICAgIC5jb250YWluZXIge1xyXG4gICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgIGhlaWdodDogMTAwJTtcclxuICAgICAgICAvKmRpc3BsYXk6IGZsZXg7Ki9cclxuICAgICAgICAvKmZsZXgtZGlyZWN0aW9uOiBjb2x1bW47Ki9cclxuICAgIH1cclxuPC9zdHlsZT5cclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIE1haW4udnVlPzY4MWU1ZTliIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"container\"\n  }, [_c('content', [_vm._t(\"default\")], 2)])\n},staticRenderFns: []}\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-0f94b22a\", module.exports)\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGF5b3V0cy9NYWluLnZ1ZT81YzZmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGdCQUFnQixtQkFBbUIsYUFBYSwwQkFBMEI7QUFDMUU7QUFDQTtBQUNBLEdBQUc7QUFDSCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjE1LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHM9e3JlbmRlcjpmdW5jdGlvbiAoKXt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtcbiAgcmV0dXJuIF9jKCdkaXYnLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwiY29udGFpbmVyXCJcbiAgfSwgW19jKCdjb250ZW50JywgW192bS5fdChcImRlZmF1bHRcIildLCAyKV0pXG59LHN0YXRpY1JlbmRlckZuczogW119XG5pZiAobW9kdWxlLmhvdCkge1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmIChtb2R1bGUuaG90LmRhdGEpIHtcbiAgICAgcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKS5yZXJlbmRlcihcImRhdGEtdi0wZjk0YjIyYVwiLCBtb2R1bGUuZXhwb3J0cylcbiAgfVxufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci5qcz9pZD1kYXRhLXYtMGY5NGIyMmEhLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3NyYy9sYXlvdXRzL01haW4udnVlXG4vLyBtb2R1bGUgaWQgPSAxNVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

	eval("module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('main-layout', [_c('div', {\n    staticClass: \"search-input-frame\"\n  }, [_c('input', {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: (_vm.searchText),\n      expression: \"searchText\"\n    }],\n    attrs: {\n      \"type\": \"text\",\n      \"id\": \"search_input\"\n    },\n    domProps: {\n      \"value\": (_vm.searchText)\n    },\n    on: {\n      \"input\": function($event) {\n        if ($event.target.composing) { return; }\n        _vm.searchText = $event.target.value\n      }\n    }\n  }), _vm._v(\" \"), _c('button', {\n    staticClass: \"btn\",\n    on: {\n      \"click\": function($event) {\n        _vm.submitSearch()\n      }\n    }\n  }, [_vm._v(\"Search\")])]), _vm._v(\" \"), _c('div', {\n    staticClass: \"settings\"\n  }, [_c('label', [_vm._v(\"Use Img-2: \"), _c('input', {\n    ref: \"img2enabled\",\n    attrs: {\n      \"type\": \"checkbox\",\n      \"checked\": \"\"\n    }\n  })])]), _vm._v(\" \"), _c('div', {\n    attrs: {\n      \"id\": \"container\"\n    }\n  }, _vm._l((_vm.photos), function(photo) {\n    return _c('div', {\n      staticClass: \"item\",\n      domProps: {\n        \"innerHTML\": _vm._s(_vm.renderPhoto(photo))\n      }\n    })\n  }))])\n},staticRenderFns: []}\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-bc497c84\", module.exports)\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvU2VhcmNoLnZ1ZT8xYTU3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGdCQUFnQixtQkFBbUIsYUFBYSwwQkFBMEI7QUFDMUU7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxzQ0FBc0MsUUFBUTtBQUM5QztBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNILENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cz17cmVuZGVyOmZ1bmN0aW9uICgpe3ZhciBfdm09dGhpczt2YXIgX2g9X3ZtLiRjcmVhdGVFbGVtZW50O3ZhciBfYz1fdm0uX3NlbGYuX2N8fF9oO1xuICByZXR1cm4gX2MoJ21haW4tbGF5b3V0JywgW19jKCdkaXYnLCB7XG4gICAgc3RhdGljQ2xhc3M6IFwic2VhcmNoLWlucHV0LWZyYW1lXCJcbiAgfSwgW19jKCdpbnB1dCcsIHtcbiAgICBkaXJlY3RpdmVzOiBbe1xuICAgICAgbmFtZTogXCJtb2RlbFwiLFxuICAgICAgcmF3TmFtZTogXCJ2LW1vZGVsXCIsXG4gICAgICB2YWx1ZTogKF92bS5zZWFyY2hUZXh0KSxcbiAgICAgIGV4cHJlc3Npb246IFwic2VhcmNoVGV4dFwiXG4gICAgfV0sXG4gICAgYXR0cnM6IHtcbiAgICAgIFwidHlwZVwiOiBcInRleHRcIixcbiAgICAgIFwiaWRcIjogXCJzZWFyY2hfaW5wdXRcIlxuICAgIH0sXG4gICAgZG9tUHJvcHM6IHtcbiAgICAgIFwidmFsdWVcIjogKF92bS5zZWFyY2hUZXh0KVxuICAgIH0sXG4gICAgb246IHtcbiAgICAgIFwiaW5wdXRcIjogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgeyByZXR1cm47IH1cbiAgICAgICAgX3ZtLnNlYXJjaFRleHQgPSAkZXZlbnQudGFyZ2V0LnZhbHVlXG4gICAgICB9XG4gICAgfVxuICB9KSwgX3ZtLl92KFwiIFwiKSwgX2MoJ2J1dHRvbicsIHtcbiAgICBzdGF0aWNDbGFzczogXCJidG5cIixcbiAgICBvbjoge1xuICAgICAgXCJjbGlja1wiOiBmdW5jdGlvbigkZXZlbnQpIHtcbiAgICAgICAgX3ZtLnN1Ym1pdFNlYXJjaCgpXG4gICAgICB9XG4gICAgfVxuICB9LCBbX3ZtLl92KFwiU2VhcmNoXCIpXSldKSwgX3ZtLl92KFwiIFwiKSwgX2MoJ2RpdicsIHtcbiAgICBzdGF0aWNDbGFzczogXCJzZXR0aW5nc1wiXG4gIH0sIFtfYygnbGFiZWwnLCBbX3ZtLl92KFwiVXNlIEltZy0yOiBcIiksIF9jKCdpbnB1dCcsIHtcbiAgICByZWY6IFwiaW1nMmVuYWJsZWRcIixcbiAgICBhdHRyczoge1xuICAgICAgXCJ0eXBlXCI6IFwiY2hlY2tib3hcIixcbiAgICAgIFwiY2hlY2tlZFwiOiBcIlwiXG4gICAgfVxuICB9KV0pXSksIF92bS5fdihcIiBcIiksIF9jKCdkaXYnLCB7XG4gICAgYXR0cnM6IHtcbiAgICAgIFwiaWRcIjogXCJjb250YWluZXJcIlxuICAgIH1cbiAgfSwgX3ZtLl9sKChfdm0ucGhvdG9zKSwgZnVuY3Rpb24ocGhvdG8pIHtcbiAgICByZXR1cm4gX2MoJ2RpdicsIHtcbiAgICAgIHN0YXRpY0NsYXNzOiBcIml0ZW1cIixcbiAgICAgIGRvbVByb3BzOiB7XG4gICAgICAgIFwiaW5uZXJIVE1MXCI6IF92bS5fcyhfdm0ucmVuZGVyUGhvdG8ocGhvdG8pKVxuICAgICAgfVxuICAgIH0pXG4gIH0pKV0pXG59LHN0YXRpY1JlbmRlckZuczogW119XG5pZiAobW9kdWxlLmhvdCkge1xuICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gIGlmIChtb2R1bGUuaG90LmRhdGEpIHtcbiAgICAgcmVxdWlyZShcInZ1ZS1ob3QtcmVsb2FkLWFwaVwiKS5yZXJlbmRlcihcImRhdGEtdi1iYzQ5N2M4NFwiLCBtb2R1bGUuZXhwb3J0cylcbiAgfVxufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi92dWUtbG9hZGVyL2xpYi90ZW1wbGF0ZS1jb21waWxlci5qcz9pZD1kYXRhLXYtYmM0OTdjODQhLi9+L3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9dGVtcGxhdGUmaW5kZXg9MCEuL3NyYy9wYWdlcy9TZWFyY2gudnVlXG4vLyBtb2R1bGUgaWQgPSAxNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ })
/******/ ]);